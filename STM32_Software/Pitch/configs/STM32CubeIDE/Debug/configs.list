
configs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d904  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800da18  0800da18  0001da18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfbc  0800dfbc  00020358  2**0
                  CONTENTS
  4 .ARM          00000000  0800dfbc  0800dfbc  00020358  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dfbc  0800dfbc  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfbc  0800dfbc  0001dfbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dfc0  0800dfc0  0001dfc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800dfc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001310  20000358  0800e31c  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001668  0800e31c  00021668  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b25  00000000  00000000  00020381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e9  00000000  00000000  00032ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00036090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  000371c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b17d  00000000  00000000  00038168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143ba  00000000  00000000  000532e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea50  00000000  00000000  0006769f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f60ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005950  00000000  00000000  000f6140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d9fc 	.word	0x0800d9fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0800d9fc 	.word	0x0800d9fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f94:	f001 fd64 	bl	8002a60 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f98:	f000 f88a 	bl	80010b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f9c:	f000 faf6 	bl	800158c <MX_GPIO_Init>
	MX_TIM2_Init();
 8000fa0:	f000 f954 	bl	800124c <MX_TIM2_Init>
	MX_TIM1_Init();
 8000fa4:	f000 f8de 	bl	8001164 <MX_TIM1_Init>
	MX_USB_DEVICE_Init();
 8000fa8:	f001 f8b0 	bl	800210c <MX_USB_DEVICE_Init>
	MX_TIM3_Init();
 8000fac:	f000 f9be 	bl	800132c <MX_TIM3_Init>
	MX_TIM4_Init();
 8000fb0:	f000 fa54 	bl	800145c <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */

	TIM1->CCR1 = 50;
 8000fb4:	4b37      	ldr	r3, [pc, #220]	; (8001094 <main+0x104>)
 8000fb6:	2232      	movs	r2, #50	; 0x32
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
	//Frequency measurement on TIM1_CHANNEL_1
	//HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); //dead pin
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4836      	ldr	r0, [pc, #216]	; (8001098 <main+0x108>)
 8000fbe:	f004 fb99 	bl	80056f4 <HAL_TIM_IC_Start_IT>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //closest to AIR (FIRST)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4835      	ldr	r0, [pc, #212]	; (800109c <main+0x10c>)
 8000fc6:	f004 fa9b 	bl	8005500 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000fca:	2104      	movs	r1, #4
 8000fcc:	4833      	ldr	r0, [pc, #204]	; (800109c <main+0x10c>)
 8000fce:	f004 fa97 	bl	8005500 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000fd2:	2108      	movs	r1, #8
 8000fd4:	4831      	ldr	r0, [pc, #196]	; (800109c <main+0x10c>)
 8000fd6:	f004 fa93 	bl	8005500 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000fda:	210c      	movs	r1, #12
 8000fdc:	482f      	ldr	r0, [pc, #188]	; (800109c <main+0x10c>)
 8000fde:	f004 fa8f 	bl	8005500 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	482e      	ldr	r0, [pc, #184]	; (80010a0 <main+0x110>)
 8000fe6:	f004 fa8b 	bl	8005500 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000fea:	2104      	movs	r1, #4
 8000fec:	482c      	ldr	r0, [pc, #176]	; (80010a0 <main+0x110>)
 8000fee:	f004 fa87 	bl	8005500 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //closest to END (LAST)
 8000ff2:	2108      	movs	r1, #8
 8000ff4:	482a      	ldr	r0, [pc, #168]	; (80010a0 <main+0x110>)
 8000ff6:	f004 fa83 	bl	8005500 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000ffa:	210c      	movs	r1, #12
 8000ffc:	4828      	ldr	r0, [pc, #160]	; (80010a0 <main+0x110>)
 8000ffe:	f004 fa7f 	bl	8005500 <HAL_TIM_PWM_Start>

	//Initialize ALL servo-motor positions to closed
	htim3.Instance->CCR1 = FRONT_ROW_CLOSE_POS;
 8001002:	4b26      	ldr	r3, [pc, #152]	; (800109c <main+0x10c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2228      	movs	r2, #40	; 0x28
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = FRONT_ROW_CLOSE_POS;
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <main+0x10c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2228      	movs	r2, #40	; 0x28
 8001010:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = BACK_ROW_CLOSE_POS;
 8001012:	4b22      	ldr	r3, [pc, #136]	; (800109c <main+0x10c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2219      	movs	r2, #25
 8001018:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = FRONT_ROW_CLOSE_POS;
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <main+0x10c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2228      	movs	r2, #40	; 0x28
 8001020:	641a      	str	r2, [r3, #64]	; 0x40

	htim4.Instance->CCR1 = BACK_ROW_CLOSE_POS;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <main+0x110>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2219      	movs	r2, #25
 8001028:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = FRONT_ROW_CLOSE_POS;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <main+0x110>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2228      	movs	r2, #40	; 0x28
 8001030:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = BACK_ROW_CLOSE_POS;
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <main+0x110>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2219      	movs	r2, #25
 8001038:	63da      	str	r2, [r3, #60]	; 0x3c
	//htim4.Instance->CCR4 = CLOSE_POS;
	HAL_GPIO_WritePin(GPIOB, B14_GREEN_PITCH_LED_Pin, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001040:	4818      	ldr	r0, [pc, #96]	; (80010a4 <main+0x114>)
 8001042:	f002 f83c 	bl	80030be <HAL_GPIO_WritePin>

		/* USER CODE BEGIN 3 */

		//test_servos();
		//If switch is in calibrating position, then calibrate antenna.
		if (HAL_GPIO_ReadPin(B12_SWITCH_GPIO_Port, B12_SWITCH_Pin)
 8001046:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104a:	4816      	ldr	r0, [pc, #88]	; (80010a4 <main+0x114>)
 800104c:	f002 f820 	bl	8003090 <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	2b01      	cmp	r3, #1
 8001054:	d10a      	bne.n	800106c <main+0xdc>
				== GPIO_PIN_SET) {
			calibrate_antenna();
 8001056:	f000 fb23 	bl	80016a0 <calibrate_antenna>
			print_to_com_port();
 800105a:	f000 fcbf 	bl	80019dc <print_to_com_port>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); //indikacija switcha
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001064:	4810      	ldr	r0, [pc, #64]	; (80010a8 <main+0x118>)
 8001066:	f002 f82a 	bl	80030be <HAL_GPIO_WritePin>
 800106a:	e7ec      	b.n	8001046 <main+0xb6>
			// HAL_GPIO_WritePin(GPIOB, B14_GREEN_PITCH_LED_Pin, GPIO_PIN_RESET);
		}
		//Play instrument
		else {
			HAL_GPIO_WritePin(GPIOB, B14_GREEN_PITCH_LED_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001072:	480c      	ldr	r0, [pc, #48]	; (80010a4 <main+0x114>)
 8001074:	f002 f823 	bl	80030be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107e:	480a      	ldr	r0, [pc, #40]	; (80010a8 <main+0x118>)
 8001080:	f002 f81d 	bl	80030be <HAL_GPIO_WritePin>
			if (finished_one_measurement == 1) {
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <main+0x11c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d1dc      	bne.n	8001046 <main+0xb6>
				play_music();
 800108c:	f000 fbb6 	bl	80017fc <play_music>
		if (HAL_GPIO_ReadPin(B12_SWITCH_GPIO_Port, B12_SWITCH_Pin)
 8001090:	e7d9      	b.n	8001046 <main+0xb6>
 8001092:	bf00      	nop
 8001094:	40012c00 	.word	0x40012c00
 8001098:	200003bc 	.word	0x200003bc
 800109c:	20000404 	.word	0x20000404
 80010a0:	2000044c 	.word	0x2000044c
 80010a4:	40010c00 	.word	0x40010c00
 80010a8:	40011000 	.word	0x40011000
 80010ac:	200004a8 	.word	0x200004a8

080010b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b094      	sub	sp, #80	; 0x50
 80010b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ba:	2228      	movs	r2, #40	; 0x28
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f009 fd46 	bl	800ab50 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ee:	2301      	movs	r3, #1
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f2:	2302      	movs	r3, #2
 80010f4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001100:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001106:	4618      	mov	r0, r3
 8001108:	f003 fcb4 	bl	8004a74 <HAL_RCC_OscConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x66>
		Error_Handler();
 8001112:	f000 fd0d 	bl	8001b30 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001126:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2102      	movs	r1, #2
 8001132:	4618      	mov	r0, r3
 8001134:	f003 ff20 	bl	8004f78 <HAL_RCC_ClockConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x92>
		Error_Handler();
 800113e:	f000 fcf7 	bl	8001b30 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001142:	2310      	movs	r3, #16
 8001144:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	4618      	mov	r0, r3
 800114e:	f004 f879 	bl	8005244 <HAL_RCCEx_PeriphCLKConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0xac>
		Error_Handler();
 8001158:	f000 fcea 	bl	8001b30 <Error_Handler>
	}
}
 800115c:	bf00      	nop
 800115e:	3750      	adds	r7, #80	; 0x50
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001182:	463b      	mov	r3, r7
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800118e:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <MX_TIM1_Init+0xe0>)
 8001190:	4a2d      	ldr	r2, [pc, #180]	; (8001248 <MX_TIM1_Init+0xe4>)
 8001192:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <MX_TIM1_Init+0xe0>)
 8001196:	2200      	movs	r2, #0
 8001198:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <MX_TIM1_Init+0xe0>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65536 - 1;
 80011a0:	4b28      	ldr	r3, [pc, #160]	; (8001244 <MX_TIM1_Init+0xe0>)
 80011a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <MX_TIM1_Init+0xe0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <MX_TIM1_Init+0xe0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b4:	4b23      	ldr	r3, [pc, #140]	; (8001244 <MX_TIM1_Init+0xe0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80011ba:	4822      	ldr	r0, [pc, #136]	; (8001244 <MX_TIM1_Init+0xe0>)
 80011bc:	f004 f8f8 	bl	80053b0 <HAL_TIM_Base_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM1_Init+0x66>
		Error_Handler();
 80011c6:	f000 fcb3 	bl	8001b30 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ce:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80011d0:	f107 0318 	add.w	r3, r7, #24
 80011d4:	4619      	mov	r1, r3
 80011d6:	481b      	ldr	r0, [pc, #108]	; (8001244 <MX_TIM1_Init+0xe0>)
 80011d8:	f004 fdec 	bl	8005db4 <HAL_TIM_ConfigClockSource>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0x82>
		Error_Handler();
 80011e2:	f000 fca5 	bl	8001b30 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 80011e6:	4817      	ldr	r0, [pc, #92]	; (8001244 <MX_TIM1_Init+0xe0>)
 80011e8:	f004 fa2c 	bl	8005644 <HAL_TIM_IC_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0x92>
		Error_Handler();
 80011f2:	f000 fc9d 	bl	8001b30 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	4619      	mov	r1, r3
 8001204:	480f      	ldr	r0, [pc, #60]	; (8001244 <MX_TIM1_Init+0xe0>)
 8001206:	f005 fab3 	bl	8006770 <HAL_TIMEx_MasterConfigSynchronization>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM1_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8001210:	f000 fc8e 	bl	8001b30 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001214:	2300      	movs	r3, #0
 8001216:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001218:	2301      	movs	r3, #1
 800121a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001224:	463b      	mov	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	4619      	mov	r1, r3
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <MX_TIM1_Init+0xe0>)
 800122c:	f004 fc70 	bl	8005b10 <HAL_TIM_IC_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM1_Init+0xd6>
		Error_Handler();
 8001236:	f000 fc7b 	bl	8001b30 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	; 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000374 	.word	0x20000374
 8001248:	40012c00 	.word	0x40012c00

0800124c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001252:	f107 0318 	add.w	r3, r7, #24
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800126a:	463b      	mov	r3, r7
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001276:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <MX_TIM2_Init+0xdc>)
 8001278:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800127c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <MX_TIM2_Init+0xdc>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b28      	ldr	r3, [pc, #160]	; (8001328 <MX_TIM2_Init+0xdc>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65536 - 1;
 800128a:	4b27      	ldr	r3, [pc, #156]	; (8001328 <MX_TIM2_Init+0xdc>)
 800128c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001290:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b25      	ldr	r3, [pc, #148]	; (8001328 <MX_TIM2_Init+0xdc>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001298:	4b23      	ldr	r3, [pc, #140]	; (8001328 <MX_TIM2_Init+0xdc>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800129e:	4822      	ldr	r0, [pc, #136]	; (8001328 <MX_TIM2_Init+0xdc>)
 80012a0:	f004 f886 	bl	80053b0 <HAL_TIM_Base_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM2_Init+0x62>
		Error_Handler();
 80012aa:	f000 fc41 	bl	8001b30 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b2:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80012b4:	f107 0318 	add.w	r3, r7, #24
 80012b8:	4619      	mov	r1, r3
 80012ba:	481b      	ldr	r0, [pc, #108]	; (8001328 <MX_TIM2_Init+0xdc>)
 80012bc:	f004 fd7a 	bl	8005db4 <HAL_TIM_ConfigClockSource>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM2_Init+0x7e>
		Error_Handler();
 80012c6:	f000 fc33 	bl	8001b30 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 80012ca:	4817      	ldr	r0, [pc, #92]	; (8001328 <MX_TIM2_Init+0xdc>)
 80012cc:	f004 f9ba 	bl	8005644 <HAL_TIM_IC_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM2_Init+0x8e>
		Error_Handler();
 80012d6:	f000 fc2b 	bl	8001b30 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	4619      	mov	r1, r3
 80012e8:	480f      	ldr	r0, [pc, #60]	; (8001328 <MX_TIM2_Init+0xdc>)
 80012ea:	f005 fa41 	bl	8006770 <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 80012f4:	f000 fc1c 	bl	8001b30 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012f8:	2300      	movs	r3, #0
 80012fa:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012fc:	2301      	movs	r3, #1
 80012fe:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001308:	463b      	mov	r3, r7
 800130a:	2200      	movs	r2, #0
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <MX_TIM2_Init+0xdc>)
 8001310:	f004 fbfe 	bl	8005b10 <HAL_TIM_IC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM2_Init+0xd2>
		Error_Handler();
 800131a:	f000 fc09 	bl	8001b30 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	; 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200003bc 	.word	0x200003bc

0800132c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	; 0x38
 8001330:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001340:	f107 0320 	add.w	r3, r7, #32
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
 8001358:	615a      	str	r2, [r3, #20]
 800135a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800135c:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <MX_TIM3_Init+0x128>)
 800135e:	4a3e      	ldr	r2, [pc, #248]	; (8001458 <MX_TIM3_Init+0x12c>)
 8001360:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 1440 - 1;
 8001362:	4b3c      	ldr	r3, [pc, #240]	; (8001454 <MX_TIM3_Init+0x128>)
 8001364:	f240 529f 	movw	r2, #1439	; 0x59f
 8001368:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136a:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <MX_TIM3_Init+0x128>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 8001370:	4b38      	ldr	r3, [pc, #224]	; (8001454 <MX_TIM3_Init+0x128>)
 8001372:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001376:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001378:	4b36      	ldr	r3, [pc, #216]	; (8001454 <MX_TIM3_Init+0x128>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137e:	4b35      	ldr	r3, [pc, #212]	; (8001454 <MX_TIM3_Init+0x128>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001384:	4833      	ldr	r0, [pc, #204]	; (8001454 <MX_TIM3_Init+0x128>)
 8001386:	f004 f813 	bl	80053b0 <HAL_TIM_Base_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x68>
		Error_Handler();
 8001390:	f000 fbce 	bl	8001b30 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800139a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139e:	4619      	mov	r1, r3
 80013a0:	482c      	ldr	r0, [pc, #176]	; (8001454 <MX_TIM3_Init+0x128>)
 80013a2:	f004 fd07 	bl	8005db4 <HAL_TIM_ConfigClockSource>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM3_Init+0x84>
		Error_Handler();
 80013ac:	f000 fbc0 	bl	8001b30 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80013b0:	4828      	ldr	r0, [pc, #160]	; (8001454 <MX_TIM3_Init+0x128>)
 80013b2:	f004 f84c 	bl	800544e <HAL_TIM_PWM_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM3_Init+0x94>
		Error_Handler();
 80013bc:	f000 fbb8 	bl	8001b30 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80013c8:	f107 0320 	add.w	r3, r7, #32
 80013cc:	4619      	mov	r1, r3
 80013ce:	4821      	ldr	r0, [pc, #132]	; (8001454 <MX_TIM3_Init+0x128>)
 80013d0:	f005 f9ce 	bl	8006770 <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80013da:	f000 fba9 	bl	8001b30 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013de:	2360      	movs	r3, #96	; 0x60
 80013e0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	4619      	mov	r1, r3
 80013f4:	4817      	ldr	r0, [pc, #92]	; (8001454 <MX_TIM3_Init+0x128>)
 80013f6:	f004 fc1f 	bl	8005c38 <HAL_TIM_PWM_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8001400:	f000 fb96 	bl	8001b30 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2204      	movs	r2, #4
 8001408:	4619      	mov	r1, r3
 800140a:	4812      	ldr	r0, [pc, #72]	; (8001454 <MX_TIM3_Init+0x128>)
 800140c:	f004 fc14 	bl	8005c38 <HAL_TIM_PWM_ConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8001416:	f000 fb8b 	bl	8001b30 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2208      	movs	r2, #8
 800141e:	4619      	mov	r1, r3
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <MX_TIM3_Init+0x128>)
 8001422:	f004 fc09 	bl	8005c38 <HAL_TIM_PWM_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM3_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 800142c:	f000 fb80 	bl	8001b30 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	220c      	movs	r2, #12
 8001434:	4619      	mov	r1, r3
 8001436:	4807      	ldr	r0, [pc, #28]	; (8001454 <MX_TIM3_Init+0x128>)
 8001438:	f004 fbfe 	bl	8005c38 <HAL_TIM_PWM_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM3_Init+0x11a>
			!= HAL_OK) {
		Error_Handler();
 8001442:	f000 fb75 	bl	8001b30 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001446:	4803      	ldr	r0, [pc, #12]	; (8001454 <MX_TIM3_Init+0x128>)
 8001448:	f000 fc84 	bl	8001d54 <HAL_TIM_MspPostInit>

}
 800144c:	bf00      	nop
 800144e:	3738      	adds	r7, #56	; 0x38
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000404 	.word	0x20000404
 8001458:	40000400 	.word	0x40000400

0800145c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b08e      	sub	sp, #56	; 0x38
 8001460:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001470:	f107 0320 	add.w	r3, r7, #32
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
 8001488:	615a      	str	r2, [r3, #20]
 800148a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800148c:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <MX_TIM4_Init+0x128>)
 800148e:	4a3e      	ldr	r2, [pc, #248]	; (8001588 <MX_TIM4_Init+0x12c>)
 8001490:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 1440 - 1;
 8001492:	4b3c      	ldr	r3, [pc, #240]	; (8001584 <MX_TIM4_Init+0x128>)
 8001494:	f240 529f 	movw	r2, #1439	; 0x59f
 8001498:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	4b3a      	ldr	r3, [pc, #232]	; (8001584 <MX_TIM4_Init+0x128>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1000 - 1;
 80014a0:	4b38      	ldr	r3, [pc, #224]	; (8001584 <MX_TIM4_Init+0x128>)
 80014a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014a6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	4b36      	ldr	r3, [pc, #216]	; (8001584 <MX_TIM4_Init+0x128>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ae:	4b35      	ldr	r3, [pc, #212]	; (8001584 <MX_TIM4_Init+0x128>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80014b4:	4833      	ldr	r0, [pc, #204]	; (8001584 <MX_TIM4_Init+0x128>)
 80014b6:	f003 ff7b 	bl	80053b0 <HAL_TIM_Base_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM4_Init+0x68>
		Error_Handler();
 80014c0:	f000 fb36 	bl	8001b30 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80014ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ce:	4619      	mov	r1, r3
 80014d0:	482c      	ldr	r0, [pc, #176]	; (8001584 <MX_TIM4_Init+0x128>)
 80014d2:	f004 fc6f 	bl	8005db4 <HAL_TIM_ConfigClockSource>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM4_Init+0x84>
		Error_Handler();
 80014dc:	f000 fb28 	bl	8001b30 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80014e0:	4828      	ldr	r0, [pc, #160]	; (8001584 <MX_TIM4_Init+0x128>)
 80014e2:	f003 ffb4 	bl	800544e <HAL_TIM_PWM_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM4_Init+0x94>
		Error_Handler();
 80014ec:	f000 fb20 	bl	8001b30 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80014f8:	f107 0320 	add.w	r3, r7, #32
 80014fc:	4619      	mov	r1, r3
 80014fe:	4821      	ldr	r0, [pc, #132]	; (8001584 <MX_TIM4_Init+0x128>)
 8001500:	f005 f936 	bl	8006770 <HAL_TIMEx_MasterConfigSynchronization>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM4_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800150a:	f000 fb11 	bl	8001b30 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150e:	2360      	movs	r3, #96	; 0x60
 8001510:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	4619      	mov	r1, r3
 8001524:	4817      	ldr	r0, [pc, #92]	; (8001584 <MX_TIM4_Init+0x128>)
 8001526:	f004 fb87 	bl	8005c38 <HAL_TIM_PWM_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM4_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8001530:	f000 fafe 	bl	8001b30 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2204      	movs	r2, #4
 8001538:	4619      	mov	r1, r3
 800153a:	4812      	ldr	r0, [pc, #72]	; (8001584 <MX_TIM4_Init+0x128>)
 800153c:	f004 fb7c 	bl	8005c38 <HAL_TIM_PWM_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM4_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8001546:	f000 faf3 	bl	8001b30 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2208      	movs	r2, #8
 800154e:	4619      	mov	r1, r3
 8001550:	480c      	ldr	r0, [pc, #48]	; (8001584 <MX_TIM4_Init+0x128>)
 8001552:	f004 fb71 	bl	8005c38 <HAL_TIM_PWM_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM4_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 800155c:	f000 fae8 	bl	8001b30 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	220c      	movs	r2, #12
 8001564:	4619      	mov	r1, r3
 8001566:	4807      	ldr	r0, [pc, #28]	; (8001584 <MX_TIM4_Init+0x128>)
 8001568:	f004 fb66 	bl	8005c38 <HAL_TIM_PWM_ConfigChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM4_Init+0x11a>
			!= HAL_OK) {
		Error_Handler();
 8001572:	f000 fadd 	bl	8001b30 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8001576:	4803      	ldr	r0, [pc, #12]	; (8001584 <MX_TIM4_Init+0x128>)
 8001578:	f000 fbec 	bl	8001d54 <HAL_TIM_MspPostInit>

}
 800157c:	bf00      	nop
 800157e:	3738      	adds	r7, #56	; 0x38
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	2000044c 	.word	0x2000044c
 8001588:	40000800 	.word	0x40000800

0800158c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015a0:	4b3b      	ldr	r3, [pc, #236]	; (8001690 <MX_GPIO_Init+0x104>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a3a      	ldr	r2, [pc, #232]	; (8001690 <MX_GPIO_Init+0x104>)
 80015a6:	f043 0310 	orr.w	r3, r3, #16
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b38      	ldr	r3, [pc, #224]	; (8001690 <MX_GPIO_Init+0x104>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0310 	and.w	r3, r3, #16
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80015b8:	4b35      	ldr	r3, [pc, #212]	; (8001690 <MX_GPIO_Init+0x104>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a34      	ldr	r2, [pc, #208]	; (8001690 <MX_GPIO_Init+0x104>)
 80015be:	f043 0320 	orr.w	r3, r3, #32
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <MX_GPIO_Init+0x104>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0320 	and.w	r3, r3, #32
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <MX_GPIO_Init+0x104>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a2e      	ldr	r2, [pc, #184]	; (8001690 <MX_GPIO_Init+0x104>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <MX_GPIO_Init+0x104>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <MX_GPIO_Init+0x104>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a28      	ldr	r2, [pc, #160]	; (8001690 <MX_GPIO_Init+0x104>)
 80015ee:	f043 0308 	orr.w	r3, r3, #8
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <MX_GPIO_Init+0x104>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001606:	4823      	ldr	r0, [pc, #140]	; (8001694 <MX_GPIO_Init+0x108>)
 8001608:	f001 fd59 	bl	80030be <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, B13_RED_PITCH_LED_Pin | B14_GREEN_PITCH_LED_Pin,
 800160c:	2200      	movs	r2, #0
 800160e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001612:	4821      	ldr	r0, [pc, #132]	; (8001698 <MX_GPIO_Init+0x10c>)
 8001614:	f001 fd53 	bl	80030be <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2302      	movs	r3, #2
 8001628:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	4619      	mov	r1, r3
 8001630:	4818      	ldr	r0, [pc, #96]	; (8001694 <MX_GPIO_Init+0x108>)
 8001632:	f001 fba9 	bl	8002d88 <HAL_GPIO_Init>

	/*Configure GPIO pin : B12_SWITCH_Pin */
	GPIO_InitStruct.Pin = B12_SWITCH_Pin;
 8001636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001640:	2301      	movs	r3, #1
 8001642:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B12_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	4619      	mov	r1, r3
 800164a:	4813      	ldr	r0, [pc, #76]	; (8001698 <MX_GPIO_Init+0x10c>)
 800164c:	f001 fb9c 	bl	8002d88 <HAL_GPIO_Init>

	/*Configure GPIO pins : B13_RED_PITCH_LED_Pin B14_GREEN_PITCH_LED_Pin */
	GPIO_InitStruct.Pin = B13_RED_PITCH_LED_Pin | B14_GREEN_PITCH_LED_Pin;
 8001650:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001654:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2302      	movs	r3, #2
 8001660:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	4619      	mov	r1, r3
 8001668:	480b      	ldr	r0, [pc, #44]	; (8001698 <MX_GPIO_Init+0x10c>)
 800166a:	f001 fb8d 	bl	8002d88 <HAL_GPIO_Init>

	/*Configure GPIO pin : TIM1_CH1_PA9_INPUT_CAPTURE_Pin */
	GPIO_InitStruct.Pin = TIM1_CH1_PA9_INPUT_CAPTURE_Pin;
 800166e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001672:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(TIM1_CH1_PA9_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	4619      	mov	r1, r3
 8001682:	4806      	ldr	r0, [pc, #24]	; (800169c <MX_GPIO_Init+0x110>)
 8001684:	f001 fb80 	bl	8002d88 <HAL_GPIO_Init>

}
 8001688:	bf00      	nop
 800168a:	3720      	adds	r7, #32
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40021000 	.word	0x40021000
 8001694:	40011000 	.word	0x40011000
 8001698:	40010c00 	.word	0x40010c00
 800169c:	40010800 	.word	0x40010800

080016a0 <calibrate_antenna>:

/* USER CODE BEGIN 4 */

void calibrate_antenna() {
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	if (is_in_range(PITCH_LOWEST_FREQUENCY - 50, PITCH_LOWEST_FREQUENCY + 50,
 80016a4:	f44f 63af 	mov.w	r3, #1400	; 0x578
 80016a8:	3b32      	subs	r3, #50	; 0x32
 80016aa:	461c      	mov	r4, r3
 80016ac:	f44f 63af 	mov.w	r3, #1400	; 0x578
 80016b0:	3332      	adds	r3, #50	; 0x32
 80016b2:	461d      	mov	r5, r3
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <calibrate_antenna+0x5c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fc43 	bl	8000f44 <__aeabi_f2iz>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	4629      	mov	r1, r5
 80016c4:	4620      	mov	r0, r4
 80016c6:	f000 f81d 	bl	8001704 <is_in_range>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d109      	bne.n	80016e4 <calibrate_antenna+0x44>
			frequency) == true) {
		HAL_GPIO_WritePin(GPIOB, B14_GREEN_PITCH_LED_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d6:	480a      	ldr	r0, [pc, #40]	; (8001700 <calibrate_antenna+0x60>)
 80016d8:	f001 fcf1 	bl	80030be <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80016dc:	200a      	movs	r0, #10
 80016de:	f001 fa21 	bl	8002b24 <HAL_Delay>
	} else {
		//Turn OFF GREEN LED, turn ON RED LED for PITCH
		HAL_GPIO_WritePin(GPIOB, B14_GREEN_PITCH_LED_Pin, GPIO_PIN_SET);
		HAL_Delay(10);
	}
}
 80016e2:	e008      	b.n	80016f6 <calibrate_antenna+0x56>
		HAL_GPIO_WritePin(GPIOB, B14_GREEN_PITCH_LED_Pin, GPIO_PIN_SET);
 80016e4:	2201      	movs	r2, #1
 80016e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <calibrate_antenna+0x60>)
 80016ec:	f001 fce7 	bl	80030be <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80016f0:	200a      	movs	r0, #10
 80016f2:	f001 fa17 	bl	8002b24 <HAL_Delay>
}
 80016f6:	bf00      	nop
 80016f8:	bdb0      	pop	{r4, r5, r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200004a4 	.word	0x200004a4
 8001700:	40010c00 	.word	0x40010c00

08001704 <is_in_range>:
bool is_in_range(int lower_limit, int upper_limit, int number) {
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
	return (lower_limit <= number && number <= upper_limit);
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	dc05      	bgt.n	8001724 <is_in_range+0x20>
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	429a      	cmp	r2, r3
 800171e:	dc01      	bgt.n	8001724 <is_in_range+0x20>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <is_in_range+0x22>
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <play_note>:

void play_note(uint32_t note_to_play_index) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	//HAL_TIM_IC_Stop_IT(&htim1, TIM_CHANNEL_1);
	//HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
	//is_first_captured = 0;

	htim3.Instance->CCR1 = all_notes[note_to_play_index].holes_to_play[0];
 8001738:	492d      	ldr	r1, [pc, #180]	; (80017f0 <play_note+0xc0>)
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	3308      	adds	r3, #8
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <play_note+0xc4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = all_notes[note_to_play_index].holes_to_play[1];
 8001750:	4927      	ldr	r1, [pc, #156]	; (80017f0 <play_note+0xc0>)
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	330c      	adds	r3, #12
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <play_note+0xc4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = all_notes[note_to_play_index].holes_to_play[2];
 8001768:	4921      	ldr	r1, [pc, #132]	; (80017f0 <play_note+0xc0>)
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	3310      	adds	r3, #16
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <play_note+0xc4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = all_notes[note_to_play_index].holes_to_play[3];
 8001780:	491b      	ldr	r1, [pc, #108]	; (80017f0 <play_note+0xc0>)
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4413      	add	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	3314      	adds	r3, #20
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <play_note+0xc4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	641a      	str	r2, [r3, #64]	; 0x40

	htim4.Instance->CCR1 = all_notes[note_to_play_index].holes_to_play[4];
 8001798:	4915      	ldr	r1, [pc, #84]	; (80017f0 <play_note+0xc0>)
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	3318      	adds	r3, #24
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <play_note+0xc8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = all_notes[note_to_play_index].holes_to_play[5];
 80017b0:	490f      	ldr	r1, [pc, #60]	; (80017f0 <play_note+0xc0>)
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4413      	add	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	331c      	adds	r3, #28
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <play_note+0xc8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = all_notes[note_to_play_index].holes_to_play[6];
 80017c8:	4909      	ldr	r1, [pc, #36]	; (80017f0 <play_note+0xc0>)
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	3320      	adds	r3, #32
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <play_note+0xc8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	63da      	str	r2, [r3, #60]	; 0x3c

	//SHORT DELAY
	HAL_Delay(200);
 80017e0:	20c8      	movs	r0, #200	; 0xc8
 80017e2:	f001 f99f 	bl	8002b24 <HAL_Delay>
	//HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	0800dad8 	.word	0x0800dad8
 80017f4:	20000404 	.word	0x20000404
 80017f8:	2000044c 	.word	0x2000044c

080017fc <play_music>:
	for (int i = 0; i < 7; i++) {
		play_note(i);
		HAL_Delay(2000);
	}
}
void play_music() {
 80017fc:	b5b0      	push	{r4, r5, r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
	const uint32_t DWN = 50;
 8001802:	2332      	movs	r3, #50	; 0x32
 8001804:	607b      	str	r3, [r7, #4]
	const uint32_t UP = 50;
 8001806:	2332      	movs	r3, #50	; 0x32
 8001808:	603b      	str	r3, [r7, #0]

	/*if (frequency < (CTR_FREQ[0] - 500)) {
	 return;
	 }*/
	/*== NOTE C ==*/
	if (is_in_range(CTR_FREQ[0] - DWN, CTR_FREQ[0] + UP, frequency) == true) {
 800180a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	461c      	mov	r4, r3
 8001814:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	4413      	add	r3, r2
 800181c:	461d      	mov	r5, r3
 800181e:	4b6c      	ldr	r3, [pc, #432]	; (80019d0 <play_music+0x1d4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fb8e 	bl	8000f44 <__aeabi_f2iz>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	4629      	mov	r1, r5
 800182e:	4620      	mov	r0, r4
 8001830:	f7ff ff68 	bl	8001704 <is_in_range>
 8001834:	4603      	mov	r3, r0
 8001836:	2b01      	cmp	r3, #1
 8001838:	d106      	bne.n	8001848 <play_music+0x4c>
		current_note = NOTE_C;
 800183a:	4b66      	ldr	r3, [pc, #408]	; (80019d4 <play_music+0x1d8>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
		current_note_index = 0;
 8001840:	4b65      	ldr	r3, [pc, #404]	; (80019d8 <play_music+0x1dc>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e0ba      	b.n	80019be <play_music+0x1c2>
	}
	/*== NOTE D ==*/
	else if (is_in_range(CTR_FREQ[1] - DWN, CTR_FREQ[1] + UP, frequency) == true) {
 8001848:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	461c      	mov	r4, r3
 8001852:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	4413      	add	r3, r2
 800185a:	461d      	mov	r5, r3
 800185c:	4b5c      	ldr	r3, [pc, #368]	; (80019d0 <play_music+0x1d4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fb6f 	bl	8000f44 <__aeabi_f2iz>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	4629      	mov	r1, r5
 800186c:	4620      	mov	r0, r4
 800186e:	f7ff ff49 	bl	8001704 <is_in_range>
 8001872:	4603      	mov	r3, r0
 8001874:	2b01      	cmp	r3, #1
 8001876:	d106      	bne.n	8001886 <play_music+0x8a>
		current_note = NOTE_D;
 8001878:	4b56      	ldr	r3, [pc, #344]	; (80019d4 <play_music+0x1d8>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
		current_note_index = 1;
 800187e:	4b56      	ldr	r3, [pc, #344]	; (80019d8 <play_music+0x1dc>)
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	e09b      	b.n	80019be <play_music+0x1c2>
	}
	/*== NOTE E ==*/
	else if (is_in_range(CTR_FREQ[2] - DWN, CTR_FREQ[2] + UP, frequency) == true) {
 8001886:	f240 7262 	movw	r2, #1890	; 0x762
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	461c      	mov	r4, r3
 8001890:	f240 7262 	movw	r2, #1890	; 0x762
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	4413      	add	r3, r2
 8001898:	461d      	mov	r5, r3
 800189a:	4b4d      	ldr	r3, [pc, #308]	; (80019d0 <play_music+0x1d4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fb50 	bl	8000f44 <__aeabi_f2iz>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	4629      	mov	r1, r5
 80018aa:	4620      	mov	r0, r4
 80018ac:	f7ff ff2a 	bl	8001704 <is_in_range>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d106      	bne.n	80018c4 <play_music+0xc8>
		current_note = NOTE_E;
 80018b6:	4b47      	ldr	r3, [pc, #284]	; (80019d4 <play_music+0x1d8>)
 80018b8:	2202      	movs	r2, #2
 80018ba:	701a      	strb	r2, [r3, #0]
		current_note_index = 2;
 80018bc:	4b46      	ldr	r3, [pc, #280]	; (80019d8 <play_music+0x1dc>)
 80018be:	2202      	movs	r2, #2
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	e07c      	b.n	80019be <play_music+0x1c2>
	}
	/*== NOTE F ==*/
	else if (is_in_range(CTR_FREQ[3] - DWN, CTR_FREQ[3] + UP, frequency) == true) {
 80018c4:	f240 72b7 	movw	r2, #1975	; 0x7b7
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	461c      	mov	r4, r3
 80018ce:	f240 72b7 	movw	r2, #1975	; 0x7b7
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	4413      	add	r3, r2
 80018d6:	461d      	mov	r5, r3
 80018d8:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <play_music+0x1d4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fb31 	bl	8000f44 <__aeabi_f2iz>
 80018e2:	4603      	mov	r3, r0
 80018e4:	461a      	mov	r2, r3
 80018e6:	4629      	mov	r1, r5
 80018e8:	4620      	mov	r0, r4
 80018ea:	f7ff ff0b 	bl	8001704 <is_in_range>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d106      	bne.n	8001902 <play_music+0x106>
		current_note = NOTE_F;
 80018f4:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <play_music+0x1d8>)
 80018f6:	2203      	movs	r2, #3
 80018f8:	701a      	strb	r2, [r3, #0]
		current_note_index = 3;
 80018fa:	4b37      	ldr	r3, [pc, #220]	; (80019d8 <play_music+0x1dc>)
 80018fc:	2203      	movs	r2, #3
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	e05d      	b.n	80019be <play_music+0x1c2>
	}
	/*== NOTE G ==*/
	else if (is_in_range(CTR_FREQ[4] - DWN, CTR_FREQ[4] + UP, frequency) == true) {
 8001902:	f640 0234 	movw	r2, #2100	; 0x834
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	461c      	mov	r4, r3
 800190c:	f640 0234 	movw	r2, #2100	; 0x834
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	4413      	add	r3, r2
 8001914:	461d      	mov	r5, r3
 8001916:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <play_music+0x1d4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fb12 	bl	8000f44 <__aeabi_f2iz>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	4629      	mov	r1, r5
 8001926:	4620      	mov	r0, r4
 8001928:	f7ff feec 	bl	8001704 <is_in_range>
 800192c:	4603      	mov	r3, r0
 800192e:	2b01      	cmp	r3, #1
 8001930:	d106      	bne.n	8001940 <play_music+0x144>
		current_note = NOTE_G;
 8001932:	4b28      	ldr	r3, [pc, #160]	; (80019d4 <play_music+0x1d8>)
 8001934:	2204      	movs	r2, #4
 8001936:	701a      	strb	r2, [r3, #0]
		current_note_index = 4;
 8001938:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <play_music+0x1dc>)
 800193a:	2204      	movs	r2, #4
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e03e      	b.n	80019be <play_music+0x1c2>
	}
	/*== NOTE A ==*/
	else if (is_in_range(CTR_FREQ[5] - DWN, CTR_FREQ[5] + UP, frequency) == true) {
 8001940:	f640 02b1 	movw	r2, #2225	; 0x8b1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	461c      	mov	r4, r3
 800194a:	f640 02b1 	movw	r2, #2225	; 0x8b1
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	4413      	add	r3, r2
 8001952:	461d      	mov	r5, r3
 8001954:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <play_music+0x1d4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff faf3 	bl	8000f44 <__aeabi_f2iz>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	4629      	mov	r1, r5
 8001964:	4620      	mov	r0, r4
 8001966:	f7ff fecd 	bl	8001704 <is_in_range>
 800196a:	4603      	mov	r3, r0
 800196c:	2b01      	cmp	r3, #1
 800196e:	d106      	bne.n	800197e <play_music+0x182>
		current_note = NOTE_A;
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <play_music+0x1d8>)
 8001972:	2205      	movs	r2, #5
 8001974:	701a      	strb	r2, [r3, #0]
		current_note_index = 5;
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <play_music+0x1dc>)
 8001978:	2205      	movs	r2, #5
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	e01f      	b.n	80019be <play_music+0x1c2>
	}
	/*== NOTE BB ==*/
	else if (is_in_range(CTR_FREQ[6] - DWN, CTR_FREQ[6] + UP + 400, frequency) == true) {
 800197e:	f640 1215 	movw	r2, #2325	; 0x915
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	461c      	mov	r4, r3
 8001988:	f640 1215 	movw	r2, #2325	; 0x915
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4413      	add	r3, r2
 8001990:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001994:	461d      	mov	r5, r3
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <play_music+0x1d4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fad2 	bl	8000f44 <__aeabi_f2iz>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	4629      	mov	r1, r5
 80019a6:	4620      	mov	r0, r4
 80019a8:	f7ff feac 	bl	8001704 <is_in_range>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d105      	bne.n	80019be <play_music+0x1c2>
		current_note = NOTE_BB;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <play_music+0x1d8>)
 80019b4:	2207      	movs	r2, #7
 80019b6:	701a      	strb	r2, [r3, #0]
		current_note_index = 6;
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <play_music+0x1dc>)
 80019ba:	2206      	movs	r2, #6
 80019bc:	601a      	str	r2, [r3, #0]
	}

	play_note(current_note_index);
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <play_music+0x1dc>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff feb4 	bl	8001730 <play_note>

}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bdb0      	pop	{r4, r5, r7, pc}
 80019d0:	200004a4 	.word	0x200004a4
 80019d4:	200004aa 	.word	0x200004aa
 80019d8:	200004ac 	.word	0x200004ac

080019dc <print_to_com_port>:
void print_to_com_port() {
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b09d      	sub	sp, #116	; 0x74
 80019e0:	af02      	add	r7, sp, #8
	char buffer[100];
	sprintf(buffer, "%f;%lu;%s \r\n", frequency, period_ticks,
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <print_to_com_port+0x50>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fd1e 	bl	8000428 <__aeabi_f2d>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	490f      	ldr	r1, [pc, #60]	; (8001a30 <print_to_com_port+0x54>)
 80019f2:	6809      	ldr	r1, [r1, #0]
 80019f4:	480f      	ldr	r0, [pc, #60]	; (8001a34 <print_to_com_port+0x58>)
 80019f6:	7800      	ldrb	r0, [r0, #0]
 80019f8:	4604      	mov	r4, r0
 80019fa:	480f      	ldr	r0, [pc, #60]	; (8001a38 <print_to_com_port+0x5c>)
 80019fc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8001a00:	1d3c      	adds	r4, r7, #4
 8001a02:	9001      	str	r0, [sp, #4]
 8001a04:	9100      	str	r1, [sp, #0]
 8001a06:	490d      	ldr	r1, [pc, #52]	; (8001a3c <print_to_com_port+0x60>)
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f009 fd35 	bl	800b478 <siprintf>
			timers[current_timer]);
	CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fb9d 	bl	8000150 <strlen>
 8001a16:	4602      	mov	r2, r0
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fc33 	bl	8002288 <CDC_Transmit_FS>

}
 8001a22:	bf00      	nop
 8001a24:	376c      	adds	r7, #108	; 0x6c
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200004a4 	.word	0x200004a4
 8001a30:	2000049c 	.word	0x2000049c
 8001a34:	200004a9 	.word	0x200004a9
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	0800da30 	.word	0x0800da30

08001a40 <HAL_TIM_IC_CaptureCallback>:
void print_note_to_com_port() {
	char buffer[50];
	sprintf(buffer, "%%lu \r\n", all_notes[current_note]);
	CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a30      	ldr	r2, [pc, #192]	; (8001b0c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d158      	bne.n	8001b02 <HAL_TIM_IC_CaptureCallback+0xc2>
		current_timer = 1;
 8001a50:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
	} else {
		return;
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7f1b      	ldrb	r3, [r3, #28]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d152      	bne.n	8001b04 <HAL_TIM_IC_CaptureCallback+0xc4>

		if (is_first_captured == 0) // if the first rising edge is not captured
 8001a5e:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10d      	bne.n	8001a82 <HAL_TIM_IC_CaptureCallback+0x42>
				{
			finished_one_measurement = 0;
 8001a66:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
			IC_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f004 fa64 	bl	8005f3c <HAL_TIM_ReadCapturedValue>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4a29      	ldr	r2, [pc, #164]	; (8001b1c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001a78:	6013      	str	r3, [r2, #0]
			is_first_captured = 1;  // set the first captured as true
 8001a7a:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	e040      	b.n	8001b04 <HAL_TIM_IC_CaptureCallback+0xc4>

		}

		else // If the first rising edge is captured, now we will capture the second edge
		{
			IC_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8001a82:	2100      	movs	r1, #0
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f004 fa59 	bl	8005f3c <HAL_TIM_ReadCapturedValue>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4a24      	ldr	r2, [pc, #144]	; (8001b20 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001a8e:	6013      	str	r3, [r2, #0]

			if (IC_val2 > IC_val1) {
 8001a90:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d907      	bls.n	8001aac <HAL_TIM_IC_CaptureCallback+0x6c>
				period_ticks = IC_val2 - IC_val1;
 8001a9c:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e00f      	b.n	8001acc <HAL_TIM_IC_CaptureCallback+0x8c>
			}

			else if (IC_val1 > IC_val2) {
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d909      	bls.n	8001acc <HAL_TIM_IC_CaptureCallback+0x8c>
				period_ticks = (0xffff - IC_val1) + IC_val2; //0xffffffff = 4 294 967 295
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001ac6:	33ff      	adds	r3, #255	; 0xff
 8001ac8:	4a16      	ldr	r2, [pc, #88]	; (8001b24 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001aca:	6013      	str	r3, [r2, #0]
			}

			float refClock = TIMCLOCK / (PRESCALAR);
 8001acc:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001ace:	60fb      	str	r3, [r7, #12]

			frequency = refClock / period_ticks;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff f88d 	bl	8000bf4 <__aeabi_ui2f>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4619      	mov	r1, r3
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f7ff f994 	bl	8000e0c <__aeabi_fdiv>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <HAL_TIM_IC_CaptureCallback+0xec>)
 8001aea:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2200      	movs	r2, #0
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_captured = 0; // set it back to false
 8001af4:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]

			finished_one_measurement = 1;
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	e000      	b.n	8001b04 <HAL_TIM_IC_CaptureCallback+0xc4>
		return;
 8001b02:	bf00      	nop
		}
	}
}
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200003bc 	.word	0x200003bc
 8001b10:	200004a9 	.word	0x200004a9
 8001b14:	200004a0 	.word	0x200004a0
 8001b18:	200004a8 	.word	0x200004a8
 8001b1c:	20000494 	.word	0x20000494
 8001b20:	20000498 	.word	0x20000498
 8001b24:	2000049c 	.word	0x2000049c
 8001b28:	4c895440 	.word	0x4c895440
 8001b2c:	200004a4 	.word	0x200004a4

08001b30 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b34:	b672      	cpsid	i
}
 8001b36:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b38:	e7fe      	b.n	8001b38 <Error_Handler+0x8>
	...

08001b3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b42:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <HAL_MspInit+0x7c>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	4a1c      	ldr	r2, [pc, #112]	; (8001bb8 <HAL_MspInit+0x7c>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6193      	str	r3, [r2, #24]
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <HAL_MspInit+0x7c>)
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_MspInit+0x7c>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4a16      	ldr	r2, [pc, #88]	; (8001bb8 <HAL_MspInit+0x7c>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	61d3      	str	r3, [r2, #28]
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_MspInit+0x7c>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2005      	movs	r0, #5
 8001b78:	f001 f8cf 	bl	8002d1a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b7c:	2005      	movs	r0, #5
 8001b7e:	f001 f8e8 	bl	8002d52 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2005      	movs	r0, #5
 8001b88:	f001 f8c7 	bl	8002d1a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b8c:	2005      	movs	r0, #5
 8001b8e:	f001 f8e0 	bl	8002d52 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_MspInit+0x80>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_MspInit+0x80>)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010000 	.word	0x40010000

08001bc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0320 	add.w	r3, r7, #32
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a59      	ldr	r2, [pc, #356]	; (8001d40 <HAL_TIM_Base_MspInit+0x180>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d145      	bne.n	8001c6c <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001be0:	4b58      	ldr	r3, [pc, #352]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a57      	ldr	r2, [pc, #348]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001be6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b55      	ldr	r3, [pc, #340]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf8:	4b52      	ldr	r3, [pc, #328]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a51      	ldr	r2, [pc, #324]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b4f      	ldr	r3, [pc, #316]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = A8_TRIG_IN_Pin;
 8001c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(A8_TRIG_IN_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 0320 	add.w	r3, r7, #32
 8001c22:	4619      	mov	r1, r3
 8001c24:	4848      	ldr	r0, [pc, #288]	; (8001d48 <HAL_TIM_Base_MspInit+0x188>)
 8001c26:	f001 f8af 	bl	8002d88 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	2018      	movs	r0, #24
 8001c30:	f001 f873 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001c34:	2018      	movs	r0, #24
 8001c36:	f001 f88c 	bl	8002d52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	2019      	movs	r0, #25
 8001c40:	f001 f86b 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001c44:	2019      	movs	r0, #25
 8001c46:	f001 f884 	bl	8002d52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	201a      	movs	r0, #26
 8001c50:	f001 f863 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001c54:	201a      	movs	r0, #26
 8001c56:	f001 f87c 	bl	8002d52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	201b      	movs	r0, #27
 8001c60:	f001 f85b 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c64:	201b      	movs	r0, #27
 8001c66:	f001 f874 	bl	8002d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c6a:	e064      	b.n	8001d36 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c74:	d12c      	bne.n	8001cd0 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c76:	4b33      	ldr	r3, [pc, #204]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	4a32      	ldr	r2, [pc, #200]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	61d3      	str	r3, [r2, #28]
 8001c82:	4b30      	ldr	r3, [pc, #192]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	4a2c      	ldr	r2, [pc, #176]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	6193      	str	r3, [r2, #24]
 8001c9a:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 0320 	add.w	r3, r7, #32
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4823      	ldr	r0, [pc, #140]	; (8001d48 <HAL_TIM_Base_MspInit+0x188>)
 8001cba:	f001 f865 	bl	8002d88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	201c      	movs	r0, #28
 8001cc4:	f001 f829 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cc8:	201c      	movs	r0, #28
 8001cca:	f001 f842 	bl	8002d52 <HAL_NVIC_EnableIRQ>
}
 8001cce:	e032      	b.n	8001d36 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM3)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a1d      	ldr	r2, [pc, #116]	; (8001d4c <HAL_TIM_Base_MspInit+0x18c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d114      	bne.n	8001d04 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	61d3      	str	r3, [r2, #28]
 8001ce6:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	201d      	movs	r0, #29
 8001cf8:	f001 f80f 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cfc:	201d      	movs	r0, #29
 8001cfe:	f001 f828 	bl	8002d52 <HAL_NVIC_EnableIRQ>
}
 8001d02:	e018      	b.n	8001d36 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM4)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a11      	ldr	r2, [pc, #68]	; (8001d50 <HAL_TIM_Base_MspInit+0x190>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d113      	bne.n	8001d36 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	61d3      	str	r3, [r2, #28]
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_TIM_Base_MspInit+0x184>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	201e      	movs	r0, #30
 8001d2c:	f000 fff5 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d30:	201e      	movs	r0, #30
 8001d32:	f001 f80e 	bl	8002d52 <HAL_NVIC_EnableIRQ>
}
 8001d36:	bf00      	nop
 8001d38:	3730      	adds	r7, #48	; 0x30
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40012c00 	.word	0x40012c00
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40010800 	.word	0x40010800
 8001d4c:	40000400 	.word	0x40000400
 8001d50:	40000800 	.word	0x40000800

08001d54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0318 	add.w	r3, r7, #24
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a2b      	ldr	r2, [pc, #172]	; (8001e1c <HAL_TIM_MspPostInit+0xc8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d130      	bne.n	8001dd6 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d74:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <HAL_TIM_MspPostInit+0xcc>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a29      	ldr	r2, [pc, #164]	; (8001e20 <HAL_TIM_MspPostInit+0xcc>)
 8001d7a:	f043 0304 	orr.w	r3, r3, #4
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <HAL_TIM_MspPostInit+0xcc>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8c:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <HAL_TIM_MspPostInit+0xcc>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4a23      	ldr	r2, [pc, #140]	; (8001e20 <HAL_TIM_MspPostInit+0xcc>)
 8001d92:	f043 0308 	orr.w	r3, r3, #8
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <HAL_TIM_MspPostInit+0xcc>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001da4:	23c0      	movs	r3, #192	; 0xc0
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2302      	movs	r3, #2
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db0:	f107 0318 	add.w	r3, r7, #24
 8001db4:	4619      	mov	r1, r3
 8001db6:	481b      	ldr	r0, [pc, #108]	; (8001e24 <HAL_TIM_MspPostInit+0xd0>)
 8001db8:	f000 ffe6 	bl	8002d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc8:	f107 0318 	add.w	r3, r7, #24
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4816      	ldr	r0, [pc, #88]	; (8001e28 <HAL_TIM_MspPostInit+0xd4>)
 8001dd0:	f000 ffda 	bl	8002d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001dd4:	e01d      	b.n	8001e12 <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM4)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <HAL_TIM_MspPostInit+0xd8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d118      	bne.n	8001e12 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_TIM_MspPostInit+0xcc>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <HAL_TIM_MspPostInit+0xcc>)
 8001de6:	f043 0308 	orr.w	r3, r3, #8
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_TIM_MspPostInit+0xcc>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001df8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2302      	movs	r3, #2
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e06:	f107 0318 	add.w	r3, r7, #24
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4806      	ldr	r0, [pc, #24]	; (8001e28 <HAL_TIM_MspPostInit+0xd4>)
 8001e0e:	f000 ffbb 	bl	8002d88 <HAL_GPIO_Init>
}
 8001e12:	bf00      	nop
 8001e14:	3728      	adds	r7, #40	; 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40000400 	.word	0x40000400
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40010800 	.word	0x40010800
 8001e28:	40010c00 	.word	0x40010c00
 8001e2c:	40000800 	.word	0x40000800

08001e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <NMI_Handler+0x4>

08001e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <HardFault_Handler+0x4>

08001e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <MemManage_Handler+0x4>

08001e42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <BusFault_Handler+0x4>

08001e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <UsageFault_Handler+0x4>

08001e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e76:	f000 fe39 	bl	8002aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
	...

08001e8c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001e92:	f001 fa5d 	bl	8003350 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20001148 	.word	0x20001148

08001ea0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001ea6:	f001 fa53 	bl	8003350 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20001148 	.word	0x20001148

08001eb4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <TIM1_BRK_IRQHandler+0x10>)
 8001eba:	f003 fd21 	bl	8005900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000374 	.word	0x20000374

08001ec8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <TIM1_UP_IRQHandler+0x10>)
 8001ece:	f003 fd17 	bl	8005900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000374 	.word	0x20000374

08001edc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <TIM1_TRG_COM_IRQHandler+0x10>)
 8001ee2:	f003 fd0d 	bl	8005900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000374 	.word	0x20000374

08001ef0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <TIM1_CC_IRQHandler+0x10>)
 8001ef6:	f003 fd03 	bl	8005900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000374 	.word	0x20000374

08001f04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <TIM2_IRQHandler+0x10>)
 8001f0a:	f003 fcf9 	bl	8005900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200003bc 	.word	0x200003bc

08001f18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <TIM3_IRQHandler+0x10>)
 8001f1e:	f003 fcef 	bl	8005900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000404 	.word	0x20000404

08001f2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <TIM4_IRQHandler+0x10>)
 8001f32:	f003 fce5 	bl	8005900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	2000044c 	.word	0x2000044c

08001f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
	return 1;
 8001f44:	2301      	movs	r3, #1
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <_kill>:

int _kill(int pid, int sig)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f58:	f008 fdd0 	bl	800aafc <__errno>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2216      	movs	r2, #22
 8001f60:	601a      	str	r2, [r3, #0]
	return -1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <_exit>:

void _exit (int status)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f76:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffe7 	bl	8001f4e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f80:	e7fe      	b.n	8001f80 <_exit+0x12>

08001f82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	e00a      	b.n	8001faa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f94:	f3af 8000 	nop.w
 8001f98:	4601      	mov	r1, r0
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	60ba      	str	r2, [r7, #8]
 8001fa0:	b2ca      	uxtb	r2, r1
 8001fa2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	dbf0      	blt.n	8001f94 <_read+0x12>
	}

return len;
 8001fb2:	687b      	ldr	r3, [r7, #4]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	e009      	b.n	8001fe2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	60ba      	str	r2, [r7, #8]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	dbf1      	blt.n	8001fce <_write+0x12>
	}
	return len;
 8001fea:	687b      	ldr	r3, [r7, #4]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_close>:

int _close(int file)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	return -1;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800201a:	605a      	str	r2, [r3, #4]
	return 0;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <_isatty>:

int _isatty(int file)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	return 1;
 8002030:	2301      	movs	r3, #1
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
	return 0;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800205c:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <_sbrk+0x5c>)
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <_sbrk+0x60>)
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <_sbrk+0x64>)
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <_sbrk+0x68>)
 8002074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	429a      	cmp	r2, r3
 8002082:	d207      	bcs.n	8002094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002084:	f008 fd3a 	bl	800aafc <__errno>
 8002088:	4603      	mov	r3, r0
 800208a:	220c      	movs	r2, #12
 800208c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	e009      	b.n	80020a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <_sbrk+0x64>)
 80020a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20005000 	.word	0x20005000
 80020b4:	00000400 	.word	0x00000400
 80020b8:	200004b0 	.word	0x200004b0
 80020bc:	20001668 	.word	0x20001668

080020c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020c0:	480c      	ldr	r0, [pc, #48]	; (80020f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020c2:	490d      	ldr	r1, [pc, #52]	; (80020f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020c4:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c8:	e002      	b.n	80020d0 <LoopCopyDataInit>

080020ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ce:	3304      	adds	r3, #4

080020d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d4:	d3f9      	bcc.n	80020ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020d8:	4c0a      	ldr	r4, [pc, #40]	; (8002104 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020dc:	e001      	b.n	80020e2 <LoopFillZerobss>

080020de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e0:	3204      	adds	r2, #4

080020e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e4:	d3fb      	bcc.n	80020de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020e6:	f000 fcb5 	bl	8002a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ea:	f008 fd0d 	bl	800ab08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ee:	f7fe ff4f 	bl	8000f90 <main>
  bx lr
 80020f2:	4770      	bx	lr
  ldr r0, =_sdata
 80020f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f8:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 80020fc:	0800dfc4 	.word	0x0800dfc4
  ldr r2, =_sbss
 8002100:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8002104:	20001668 	.word	0x20001668

08002108 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002108:	e7fe      	b.n	8002108 <ADC1_2_IRQHandler>
	...

0800210c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8002110:	2200      	movs	r2, #0
 8002112:	4912      	ldr	r1, [pc, #72]	; (800215c <MX_USB_DEVICE_Init+0x50>)
 8002114:	4812      	ldr	r0, [pc, #72]	; (8002160 <MX_USB_DEVICE_Init+0x54>)
 8002116:	f007 fc3d 	bl	8009994 <USBD_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8002120:	f7ff fd06 	bl	8001b30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8002124:	490f      	ldr	r1, [pc, #60]	; (8002164 <MX_USB_DEVICE_Init+0x58>)
 8002126:	480e      	ldr	r0, [pc, #56]	; (8002160 <MX_USB_DEVICE_Init+0x54>)
 8002128:	f007 fc6c 	bl	8009a04 <USBD_RegisterClass>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8002132:	f7ff fcfd 	bl	8001b30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8002136:	490c      	ldr	r1, [pc, #48]	; (8002168 <MX_USB_DEVICE_Init+0x5c>)
 8002138:	4809      	ldr	r0, [pc, #36]	; (8002160 <MX_USB_DEVICE_Init+0x54>)
 800213a:	f007 fb8f 	bl	800985c <USBD_CDC_RegisterInterface>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8002144:	f7ff fcf4 	bl	8001b30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8002148:	4805      	ldr	r0, [pc, #20]	; (8002160 <MX_USB_DEVICE_Init+0x54>)
 800214a:	f007 fc81 	bl	8009a50 <USBD_Start>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8002154:	f7ff fcec 	bl	8001b30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	2000001c 	.word	0x2000001c
 8002160:	200004b4 	.word	0x200004b4
 8002164:	20000084 	.word	0x20000084
 8002168:	2000000c 	.word	0x2000000c

0800216c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8002170:	2200      	movs	r2, #0
 8002172:	4905      	ldr	r1, [pc, #20]	; (8002188 <CDC_Init_FS+0x1c>)
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <CDC_Init_FS+0x20>)
 8002176:	f007 fb87 	bl	8009888 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800217a:	4905      	ldr	r1, [pc, #20]	; (8002190 <CDC_Init_FS+0x24>)
 800217c:	4803      	ldr	r0, [pc, #12]	; (800218c <CDC_Init_FS+0x20>)
 800217e:	f007 fb9c 	bl	80098ba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8002182:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000b60 	.word	0x20000b60
 800218c:	200004b4 	.word	0x200004b4
 8002190:	20000778 	.word	0x20000778

08002194 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8002198:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
	...

080021a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	71fb      	strb	r3, [r7, #7]
 80021b0:	4613      	mov	r3, r2
 80021b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	2b23      	cmp	r3, #35	; 0x23
 80021b8:	d84a      	bhi.n	8002250 <CDC_Control_FS+0xac>
 80021ba:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <CDC_Control_FS+0x1c>)
 80021bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c0:	08002251 	.word	0x08002251
 80021c4:	08002251 	.word	0x08002251
 80021c8:	08002251 	.word	0x08002251
 80021cc:	08002251 	.word	0x08002251
 80021d0:	08002251 	.word	0x08002251
 80021d4:	08002251 	.word	0x08002251
 80021d8:	08002251 	.word	0x08002251
 80021dc:	08002251 	.word	0x08002251
 80021e0:	08002251 	.word	0x08002251
 80021e4:	08002251 	.word	0x08002251
 80021e8:	08002251 	.word	0x08002251
 80021ec:	08002251 	.word	0x08002251
 80021f0:	08002251 	.word	0x08002251
 80021f4:	08002251 	.word	0x08002251
 80021f8:	08002251 	.word	0x08002251
 80021fc:	08002251 	.word	0x08002251
 8002200:	08002251 	.word	0x08002251
 8002204:	08002251 	.word	0x08002251
 8002208:	08002251 	.word	0x08002251
 800220c:	08002251 	.word	0x08002251
 8002210:	08002251 	.word	0x08002251
 8002214:	08002251 	.word	0x08002251
 8002218:	08002251 	.word	0x08002251
 800221c:	08002251 	.word	0x08002251
 8002220:	08002251 	.word	0x08002251
 8002224:	08002251 	.word	0x08002251
 8002228:	08002251 	.word	0x08002251
 800222c:	08002251 	.word	0x08002251
 8002230:	08002251 	.word	0x08002251
 8002234:	08002251 	.word	0x08002251
 8002238:	08002251 	.word	0x08002251
 800223c:	08002251 	.word	0x08002251
 8002240:	08002251 	.word	0x08002251
 8002244:	08002251 	.word	0x08002251
 8002248:	08002251 	.word	0x08002251
 800224c:	08002251 	.word	0x08002251
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8002250:	bf00      	nop
  }

  return (USBD_OK);
 8002252:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop

08002260 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4805      	ldr	r0, [pc, #20]	; (8002284 <CDC_Receive_FS+0x24>)
 800226e:	f007 fb24 	bl	80098ba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8002272:	4804      	ldr	r0, [pc, #16]	; (8002284 <CDC_Receive_FS+0x24>)
 8002274:	f007 fb63 	bl	800993e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8002278:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200004b4 	.word	0x200004b4

08002288 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002298:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <CDC_Transmit_FS+0x48>)
 800229a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800229e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00b      	b.n	80022c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80022ae:	887b      	ldrh	r3, [r7, #2]
 80022b0:	461a      	mov	r2, r3
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4806      	ldr	r0, [pc, #24]	; (80022d0 <CDC_Transmit_FS+0x48>)
 80022b6:	f007 fae7 	bl	8009888 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80022ba:	4805      	ldr	r0, [pc, #20]	; (80022d0 <CDC_Transmit_FS+0x48>)
 80022bc:	f007 fb10 	bl	80098e0 <USBD_CDC_TransmitPacket>
 80022c0:	4603      	mov	r3, r0
 80022c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200004b4 	.word	0x200004b4

080022d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2212      	movs	r2, #18
 80022e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80022e6:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000038 	.word	0x20000038

080022f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	6039      	str	r1, [r7, #0]
 8002302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2204      	movs	r2, #4
 8002308:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800230a:	4b03      	ldr	r3, [pc, #12]	; (8002318 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	2000004c 	.word	0x2000004c

0800231c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d105      	bne.n	800233a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	4907      	ldr	r1, [pc, #28]	; (8002350 <USBD_FS_ProductStrDescriptor+0x34>)
 8002332:	4808      	ldr	r0, [pc, #32]	; (8002354 <USBD_FS_ProductStrDescriptor+0x38>)
 8002334:	f008 fb04 	bl	800a940 <USBD_GetString>
 8002338:	e004      	b.n	8002344 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	4904      	ldr	r1, [pc, #16]	; (8002350 <USBD_FS_ProductStrDescriptor+0x34>)
 800233e:	4805      	ldr	r0, [pc, #20]	; (8002354 <USBD_FS_ProductStrDescriptor+0x38>)
 8002340:	f008 fafe 	bl	800a940 <USBD_GetString>
  }
  return USBD_StrDesc;
 8002344:	4b02      	ldr	r3, [pc, #8]	; (8002350 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000f48 	.word	0x20000f48
 8002354:	0800da48 	.word	0x0800da48

08002358 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	4904      	ldr	r1, [pc, #16]	; (8002378 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8002368:	4804      	ldr	r0, [pc, #16]	; (800237c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800236a:	f008 fae9 	bl	800a940 <USBD_GetString>
  return USBD_StrDesc;
 800236e:	4b02      	ldr	r3, [pc, #8]	; (8002378 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000f48 	.word	0x20000f48
 800237c:	0800da60 	.word	0x0800da60

08002380 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	221a      	movs	r2, #26
 8002390:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8002392:	f000 f843 	bl	800241c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8002396:	4b02      	ldr	r3, [pc, #8]	; (80023a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000050 	.word	0x20000050

080023a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d105      	bne.n	80023c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	4907      	ldr	r1, [pc, #28]	; (80023d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80023ba:	4808      	ldr	r0, [pc, #32]	; (80023dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80023bc:	f008 fac0 	bl	800a940 <USBD_GetString>
 80023c0:	e004      	b.n	80023cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	4904      	ldr	r1, [pc, #16]	; (80023d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80023c8:	f008 faba 	bl	800a940 <USBD_GetString>
  }
  return USBD_StrDesc;
 80023cc:	4b02      	ldr	r3, [pc, #8]	; (80023d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000f48 	.word	0x20000f48
 80023dc:	0800da74 	.word	0x0800da74

080023e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d105      	bne.n	80023fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	4907      	ldr	r1, [pc, #28]	; (8002414 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80023f6:	4808      	ldr	r0, [pc, #32]	; (8002418 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80023f8:	f008 faa2 	bl	800a940 <USBD_GetString>
 80023fc:	e004      	b.n	8002408 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	4904      	ldr	r1, [pc, #16]	; (8002414 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8002402:	4805      	ldr	r0, [pc, #20]	; (8002418 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8002404:	f008 fa9c 	bl	800a940 <USBD_GetString>
  }
  return USBD_StrDesc;
 8002408:	4b02      	ldr	r3, [pc, #8]	; (8002414 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000f48 	.word	0x20000f48
 8002418:	0800da80 	.word	0x0800da80

0800241c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <Get_SerialNum+0x44>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002428:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <Get_SerialNum+0x48>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <Get_SerialNum+0x4c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8002442:	2208      	movs	r2, #8
 8002444:	4909      	ldr	r1, [pc, #36]	; (800246c <Get_SerialNum+0x50>)
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f814 	bl	8002474 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800244c:	2204      	movs	r2, #4
 800244e:	4908      	ldr	r1, [pc, #32]	; (8002470 <Get_SerialNum+0x54>)
 8002450:	68b8      	ldr	r0, [r7, #8]
 8002452:	f000 f80f 	bl	8002474 <IntToUnicode>
  }
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	1ffff7e8 	.word	0x1ffff7e8
 8002464:	1ffff7ec 	.word	0x1ffff7ec
 8002468:	1ffff7f0 	.word	0x1ffff7f0
 800246c:	20000052 	.word	0x20000052
 8002470:	20000062 	.word	0x20000062

08002474 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	4613      	mov	r3, r2
 8002480:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8002486:	2300      	movs	r3, #0
 8002488:	75fb      	strb	r3, [r7, #23]
 800248a:	e027      	b.n	80024dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	0f1b      	lsrs	r3, r3, #28
 8002490:	2b09      	cmp	r3, #9
 8002492:	d80b      	bhi.n	80024ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	0f1b      	lsrs	r3, r3, #28
 8002498:	b2da      	uxtb	r2, r3
 800249a:	7dfb      	ldrb	r3, [r7, #23]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4619      	mov	r1, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	440b      	add	r3, r1
 80024a4:	3230      	adds	r2, #48	; 0x30
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e00a      	b.n	80024c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	0f1b      	lsrs	r3, r3, #28
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4619      	mov	r1, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	440b      	add	r3, r1
 80024bc:	3237      	adds	r2, #55	; 0x37
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	3301      	adds	r3, #1
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	4413      	add	r3, r2
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
 80024d8:	3301      	adds	r3, #1
 80024da:	75fb      	strb	r3, [r7, #23]
 80024dc:	7dfa      	ldrb	r2, [r7, #23]
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d3d3      	bcc.n	800248c <IntToUnicode+0x18>
  }
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	371c      	adds	r7, #28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a11      	ldr	r2, [pc, #68]	; (8002544 <HAL_PCD_MspInit+0x54>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d11b      	bne.n	800253a <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <HAL_PCD_MspInit+0x58>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	4a10      	ldr	r2, [pc, #64]	; (8002548 <HAL_PCD_MspInit+0x58>)
 8002508:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800250c:	61d3      	str	r3, [r2, #28]
 800250e:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <HAL_PCD_MspInit+0x58>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	2013      	movs	r0, #19
 8002520:	f000 fbfb 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8002524:	2013      	movs	r0, #19
 8002526:	f000 fc14 	bl	8002d52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2100      	movs	r1, #0
 800252e:	2014      	movs	r0, #20
 8002530:	f000 fbf3 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002534:	2014      	movs	r0, #20
 8002536:	f000 fc0c 	bl	8002d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40005c00 	.word	0x40005c00
 8002548:	40021000 	.word	0x40021000

0800254c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002560:	4619      	mov	r1, r3
 8002562:	4610      	mov	r0, r2
 8002564:	f007 fabc 	bl	8009ae0 <USBD_LL_SetupStage>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8002582:	78fa      	ldrb	r2, [r7, #3]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	440b      	add	r3, r1
 8002590:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	4619      	mov	r1, r3
 800259a:	f007 faee 	bl	8009b7a <USBD_LL_DataOutStage>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	440b      	add	r3, r1
 80025c6:	333c      	adds	r3, #60	; 0x3c
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	4619      	mov	r1, r3
 80025ce:	f007 fb45 	bl	8009c5c <USBD_LL_DataInStage>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80025e8:	4618      	mov	r0, r3
 80025ea:	f007 fc55 	bl	8009e98 <USBD_LL_SOF>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d001      	beq.n	800260e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800260a:	f7ff fa91 	bl	8001b30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f007 fc05 	bl	8009e28 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8002624:	4618      	mov	r0, r3
 8002626:	f007 fbbe 	bl	8009da6 <USBD_LL_Reset>
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8002642:	4618      	mov	r0, r3
 8002644:	f007 fbff 	bl	8009e46 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <HAL_PCD_SuspendCallback+0x30>)
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	4a03      	ldr	r2, [pc, #12]	; (8002664 <HAL_PCD_SuspendCallback+0x30>)
 8002656:	f043 0306 	orr.w	r3, r3, #6
 800265a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8002676:	4618      	mov	r0, r3
 8002678:	f007 fbf9 	bl	8009e6e <USBD_LL_Resume>
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800268c:	4a28      	ldr	r2, [pc, #160]	; (8002730 <USBD_LL_Init+0xac>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a26      	ldr	r2, [pc, #152]	; (8002730 <USBD_LL_Init+0xac>)
 8002698:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800269c:	4b24      	ldr	r3, [pc, #144]	; (8002730 <USBD_LL_Init+0xac>)
 800269e:	4a25      	ldr	r2, [pc, #148]	; (8002734 <USBD_LL_Init+0xb0>)
 80026a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80026a2:	4b23      	ldr	r3, [pc, #140]	; (8002730 <USBD_LL_Init+0xac>)
 80026a4:	2208      	movs	r2, #8
 80026a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80026a8:	4b21      	ldr	r3, [pc, #132]	; (8002730 <USBD_LL_Init+0xac>)
 80026aa:	2202      	movs	r2, #2
 80026ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <USBD_LL_Init+0xac>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80026b4:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <USBD_LL_Init+0xac>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <USBD_LL_Init+0xac>)
 80026bc:	2200      	movs	r2, #0
 80026be:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80026c0:	481b      	ldr	r0, [pc, #108]	; (8002730 <USBD_LL_Init+0xac>)
 80026c2:	f000 fd14 	bl	80030ee <HAL_PCD_Init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80026cc:	f7ff fa30 	bl	8001b30 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80026d6:	2318      	movs	r3, #24
 80026d8:	2200      	movs	r2, #0
 80026da:	2100      	movs	r1, #0
 80026dc:	f002 f988 	bl	80049f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80026e6:	2358      	movs	r3, #88	; 0x58
 80026e8:	2200      	movs	r2, #0
 80026ea:	2180      	movs	r1, #128	; 0x80
 80026ec:	f002 f980 	bl	80049f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80026f6:	23c0      	movs	r3, #192	; 0xc0
 80026f8:	2200      	movs	r2, #0
 80026fa:	2181      	movs	r1, #129	; 0x81
 80026fc:	f002 f978 	bl	80049f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002706:	f44f 7388 	mov.w	r3, #272	; 0x110
 800270a:	2200      	movs	r2, #0
 800270c:	2101      	movs	r1, #1
 800270e:	f002 f96f 	bl	80049f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002718:	f44f 7380 	mov.w	r3, #256	; 0x100
 800271c:	2200      	movs	r2, #0
 800271e:	2182      	movs	r1, #130	; 0x82
 8002720:	f002 f966 	bl	80049f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20001148 	.word	0x20001148
 8002734:	40005c00 	.word	0x40005c00

08002738 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fdd8 	bl	8003304 <HAL_PCD_Start>
 8002754:	4603      	mov	r3, r0
 8002756:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f94e 	bl	80029fc <USBD_Get_USB_Status>
 8002760:	4603      	mov	r3, r0
 8002762:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002764:	7bbb      	ldrb	r3, [r7, #14]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	4608      	mov	r0, r1
 8002778:	4611      	mov	r1, r2
 800277a:	461a      	mov	r2, r3
 800277c:	4603      	mov	r3, r0
 800277e:	70fb      	strb	r3, [r7, #3]
 8002780:	460b      	mov	r3, r1
 8002782:	70bb      	strb	r3, [r7, #2]
 8002784:	4613      	mov	r3, r2
 8002786:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002796:	78bb      	ldrb	r3, [r7, #2]
 8002798:	883a      	ldrh	r2, [r7, #0]
 800279a:	78f9      	ldrb	r1, [r7, #3]
 800279c:	f000 ff50 	bl	8003640 <HAL_PCD_EP_Open>
 80027a0:	4603      	mov	r3, r0
 80027a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f928 	bl	80029fc <USBD_Get_USB_Status>
 80027ac:	4603      	mov	r3, r0
 80027ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80027b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 ff97 	bl	800370c <HAL_PCD_EP_Close>
 80027de:	4603      	mov	r3, r0
 80027e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 f909 	bl	80029fc <USBD_Get_USB_Status>
 80027ea:	4603      	mov	r3, r0
 80027ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80027ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f001 f857 	bl	80038ca <HAL_PCD_EP_SetStall>
 800281c:	4603      	mov	r3, r0
 800281e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f8ea 	bl	80029fc <USBD_Get_USB_Status>
 8002828:	4603      	mov	r3, r0
 800282a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800282c:	7bbb      	ldrb	r3, [r7, #14]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	460b      	mov	r3, r1
 8002840:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f001 f898 	bl	800398a <HAL_PCD_EP_ClrStall>
 800285a:	4603      	mov	r3, r0
 800285c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	4618      	mov	r0, r3
 8002862:	f000 f8cb 	bl	80029fc <USBD_Get_USB_Status>
 8002866:	4603      	mov	r3, r0
 8002868:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800286a:	7bbb      	ldrb	r3, [r7, #14]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002886:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8002888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800288c:	2b00      	cmp	r3, #0
 800288e:	da0c      	bge.n	80028aa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002896:	68f9      	ldr	r1, [r7, #12]
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	440b      	add	r3, r1
 80028a4:	3302      	adds	r3, #2
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	e00b      	b.n	80028c2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028b0:	68f9      	ldr	r1, [r7, #12]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	440b      	add	r3, r1
 80028bc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80028c0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fe83 	bl	80035f6 <HAL_PCD_SetAddress>
 80028f0:	4603      	mov	r3, r0
 80028f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f880 	bl	80029fc <USBD_Get_USB_Status>
 80028fc:	4603      	mov	r3, r0
 80028fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002900:	7bbb      	ldrb	r3, [r7, #14]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b086      	sub	sp, #24
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	461a      	mov	r2, r3
 8002916:	460b      	mov	r3, r1
 8002918:	72fb      	strb	r3, [r7, #11]
 800291a:	4613      	mov	r3, r2
 800291c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800292c:	893b      	ldrh	r3, [r7, #8]
 800292e:	7af9      	ldrb	r1, [r7, #11]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	f000 ff87 	bl	8003844 <HAL_PCD_EP_Transmit>
 8002936:	4603      	mov	r3, r0
 8002938:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800293a:	7dfb      	ldrb	r3, [r7, #23]
 800293c:	4618      	mov	r0, r3
 800293e:	f000 f85d 	bl	80029fc <USBD_Get_USB_Status>
 8002942:	4603      	mov	r3, r0
 8002944:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8002946:	7dbb      	ldrb	r3, [r7, #22]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	461a      	mov	r2, r3
 800295c:	460b      	mov	r3, r1
 800295e:	72fb      	strb	r3, [r7, #11]
 8002960:	4613      	mov	r3, r2
 8002962:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002972:	893b      	ldrh	r3, [r7, #8]
 8002974:	7af9      	ldrb	r1, [r7, #11]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	f000 ff10 	bl	800379c <HAL_PCD_EP_Receive>
 800297c:	4603      	mov	r3, r0
 800297e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002980:	7dfb      	ldrb	r3, [r7, #23]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f83a 	bl	80029fc <USBD_Get_USB_Status>
 8002988:	4603      	mov	r3, r0
 800298a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800298c:	7dbb      	ldrb	r3, [r7, #22]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 ff32 	bl	8003816 <HAL_PCD_EP_GetRxCount>
 80029b2:	4603      	mov	r3, r0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80029c4:	4b02      	ldr	r3, [pc, #8]	; (80029d0 <USBD_static_malloc+0x14>)
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	20001434 	.word	0x20001434

080029d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	460b      	mov	r3, r1
 80029f0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d817      	bhi.n	8002a40 <USBD_Get_USB_Status+0x44>
 8002a10:	a201      	add	r2, pc, #4	; (adr r2, 8002a18 <USBD_Get_USB_Status+0x1c>)
 8002a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a16:	bf00      	nop
 8002a18:	08002a29 	.word	0x08002a29
 8002a1c:	08002a2f 	.word	0x08002a2f
 8002a20:	08002a35 	.word	0x08002a35
 8002a24:	08002a3b 	.word	0x08002a3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8002a2c:	e00b      	b.n	8002a46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	73fb      	strb	r3, [r7, #15]
    break;
 8002a32:	e008      	b.n	8002a46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
    break;
 8002a38:	e005      	b.n	8002a46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	73fb      	strb	r3, [r7, #15]
    break;
 8002a3e:	e002      	b.n	8002a46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8002a40:	2302      	movs	r3, #2
 8002a42:	73fb      	strb	r3, [r7, #15]
    break;
 8002a44:	bf00      	nop
  }
  return usb_status;
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop

08002a54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_Init+0x28>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a07      	ldr	r2, [pc, #28]	; (8002a88 <HAL_Init+0x28>)
 8002a6a:	f043 0310 	orr.w	r3, r3, #16
 8002a6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a70:	2003      	movs	r0, #3
 8002a72:	f000 f947 	bl	8002d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a76:	200f      	movs	r0, #15
 8002a78:	f000 f808 	bl	8002a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a7c:	f7ff f85e 	bl	8001b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40022000 	.word	0x40022000

08002a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_InitTick+0x54>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_InitTick+0x58>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f95f 	bl	8002d6e <HAL_SYSTICK_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e00e      	b.n	8002ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b0f      	cmp	r3, #15
 8002abe:	d80a      	bhi.n	8002ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac8:	f000 f927 	bl	8002d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002acc:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <HAL_InitTick+0x5c>)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	2000006c 	.word	0x2000006c
 8002ae4:	20000074 	.word	0x20000074
 8002ae8:	20000070 	.word	0x20000070

08002aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_IncTick+0x1c>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_IncTick+0x20>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	4a03      	ldr	r2, [pc, #12]	; (8002b0c <HAL_IncTick+0x20>)
 8002afe:	6013      	str	r3, [r2, #0]
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	20000074 	.word	0x20000074
 8002b0c:	20001654 	.word	0x20001654

08002b10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return uwTick;
 8002b14:	4b02      	ldr	r3, [pc, #8]	; (8002b20 <HAL_GetTick+0x10>)
 8002b16:	681b      	ldr	r3, [r3, #0]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	20001654 	.word	0x20001654

08002b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b2c:	f7ff fff0 	bl	8002b10 <HAL_GetTick>
 8002b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d005      	beq.n	8002b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_Delay+0x44>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b4a:	bf00      	nop
 8002b4c:	f7ff ffe0 	bl	8002b10 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d8f7      	bhi.n	8002b4c <HAL_Delay+0x28>
  {
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000074 	.word	0x20000074

08002b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b9e:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	60d3      	str	r3, [r2, #12]
}
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <__NVIC_GetPriorityGrouping+0x18>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	f003 0307 	and.w	r3, r3, #7
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	db0b      	blt.n	8002bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	f003 021f 	and.w	r2, r3, #31
 8002be8:	4906      	ldr	r1, [pc, #24]	; (8002c04 <__NVIC_EnableIRQ+0x34>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	e000e100 	.word	0xe000e100

08002c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	6039      	str	r1, [r7, #0]
 8002c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	db0a      	blt.n	8002c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	490c      	ldr	r1, [pc, #48]	; (8002c54 <__NVIC_SetPriority+0x4c>)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	0112      	lsls	r2, r2, #4
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c30:	e00a      	b.n	8002c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	4908      	ldr	r1, [pc, #32]	; (8002c58 <__NVIC_SetPriority+0x50>)
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	3b04      	subs	r3, #4
 8002c40:	0112      	lsls	r2, r2, #4
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	440b      	add	r3, r1
 8002c46:	761a      	strb	r2, [r3, #24]
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000e100 	.word	0xe000e100
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b089      	sub	sp, #36	; 0x24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f1c3 0307 	rsb	r3, r3, #7
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	bf28      	it	cs
 8002c7a:	2304      	movcs	r3, #4
 8002c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3304      	adds	r3, #4
 8002c82:	2b06      	cmp	r3, #6
 8002c84:	d902      	bls.n	8002c8c <NVIC_EncodePriority+0x30>
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	3b03      	subs	r3, #3
 8002c8a:	e000      	b.n	8002c8e <NVIC_EncodePriority+0x32>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c90:	f04f 32ff 	mov.w	r2, #4294967295
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43da      	mvns	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cae:	43d9      	mvns	r1, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb4:	4313      	orrs	r3, r2
         );
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3724      	adds	r7, #36	; 0x24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cd0:	d301      	bcc.n	8002cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e00f      	b.n	8002cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <SysTick_Config+0x40>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cde:	210f      	movs	r1, #15
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce4:	f7ff ff90 	bl	8002c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <SysTick_Config+0x40>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <SysTick_Config+0x40>)
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	e000e010 	.word	0xe000e010

08002d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ff2d 	bl	8002b6c <__NVIC_SetPriorityGrouping>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d2c:	f7ff ff42 	bl	8002bb4 <__NVIC_GetPriorityGrouping>
 8002d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	6978      	ldr	r0, [r7, #20]
 8002d38:	f7ff ff90 	bl	8002c5c <NVIC_EncodePriority>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ff5f 	bl	8002c08 <__NVIC_SetPriority>
}
 8002d4a:	bf00      	nop
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4603      	mov	r3, r0
 8002d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff35 	bl	8002bd0 <__NVIC_EnableIRQ>
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff ffa2 	bl	8002cc0 <SysTick_Config>
 8002d7c:	4603      	mov	r3, r0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b08b      	sub	sp, #44	; 0x2c
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d92:	2300      	movs	r3, #0
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d96:	2300      	movs	r3, #0
 8002d98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d9a:	e169      	b.n	8003070 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	f040 8158 	bne.w	800306a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4a9a      	ldr	r2, [pc, #616]	; (8003028 <HAL_GPIO_Init+0x2a0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d05e      	beq.n	8002e82 <HAL_GPIO_Init+0xfa>
 8002dc4:	4a98      	ldr	r2, [pc, #608]	; (8003028 <HAL_GPIO_Init+0x2a0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d875      	bhi.n	8002eb6 <HAL_GPIO_Init+0x12e>
 8002dca:	4a98      	ldr	r2, [pc, #608]	; (800302c <HAL_GPIO_Init+0x2a4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d058      	beq.n	8002e82 <HAL_GPIO_Init+0xfa>
 8002dd0:	4a96      	ldr	r2, [pc, #600]	; (800302c <HAL_GPIO_Init+0x2a4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d86f      	bhi.n	8002eb6 <HAL_GPIO_Init+0x12e>
 8002dd6:	4a96      	ldr	r2, [pc, #600]	; (8003030 <HAL_GPIO_Init+0x2a8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d052      	beq.n	8002e82 <HAL_GPIO_Init+0xfa>
 8002ddc:	4a94      	ldr	r2, [pc, #592]	; (8003030 <HAL_GPIO_Init+0x2a8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d869      	bhi.n	8002eb6 <HAL_GPIO_Init+0x12e>
 8002de2:	4a94      	ldr	r2, [pc, #592]	; (8003034 <HAL_GPIO_Init+0x2ac>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d04c      	beq.n	8002e82 <HAL_GPIO_Init+0xfa>
 8002de8:	4a92      	ldr	r2, [pc, #584]	; (8003034 <HAL_GPIO_Init+0x2ac>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d863      	bhi.n	8002eb6 <HAL_GPIO_Init+0x12e>
 8002dee:	4a92      	ldr	r2, [pc, #584]	; (8003038 <HAL_GPIO_Init+0x2b0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d046      	beq.n	8002e82 <HAL_GPIO_Init+0xfa>
 8002df4:	4a90      	ldr	r2, [pc, #576]	; (8003038 <HAL_GPIO_Init+0x2b0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d85d      	bhi.n	8002eb6 <HAL_GPIO_Init+0x12e>
 8002dfa:	2b12      	cmp	r3, #18
 8002dfc:	d82a      	bhi.n	8002e54 <HAL_GPIO_Init+0xcc>
 8002dfe:	2b12      	cmp	r3, #18
 8002e00:	d859      	bhi.n	8002eb6 <HAL_GPIO_Init+0x12e>
 8002e02:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <HAL_GPIO_Init+0x80>)
 8002e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e08:	08002e83 	.word	0x08002e83
 8002e0c:	08002e5d 	.word	0x08002e5d
 8002e10:	08002e6f 	.word	0x08002e6f
 8002e14:	08002eb1 	.word	0x08002eb1
 8002e18:	08002eb7 	.word	0x08002eb7
 8002e1c:	08002eb7 	.word	0x08002eb7
 8002e20:	08002eb7 	.word	0x08002eb7
 8002e24:	08002eb7 	.word	0x08002eb7
 8002e28:	08002eb7 	.word	0x08002eb7
 8002e2c:	08002eb7 	.word	0x08002eb7
 8002e30:	08002eb7 	.word	0x08002eb7
 8002e34:	08002eb7 	.word	0x08002eb7
 8002e38:	08002eb7 	.word	0x08002eb7
 8002e3c:	08002eb7 	.word	0x08002eb7
 8002e40:	08002eb7 	.word	0x08002eb7
 8002e44:	08002eb7 	.word	0x08002eb7
 8002e48:	08002eb7 	.word	0x08002eb7
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e79 	.word	0x08002e79
 8002e54:	4a79      	ldr	r2, [pc, #484]	; (800303c <HAL_GPIO_Init+0x2b4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e5a:	e02c      	b.n	8002eb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	623b      	str	r3, [r7, #32]
          break;
 8002e62:	e029      	b.n	8002eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	623b      	str	r3, [r7, #32]
          break;
 8002e6c:	e024      	b.n	8002eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	3308      	adds	r3, #8
 8002e74:	623b      	str	r3, [r7, #32]
          break;
 8002e76:	e01f      	b.n	8002eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	330c      	adds	r3, #12
 8002e7e:	623b      	str	r3, [r7, #32]
          break;
 8002e80:	e01a      	b.n	8002eb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d102      	bne.n	8002e90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	623b      	str	r3, [r7, #32]
          break;
 8002e8e:	e013      	b.n	8002eb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d105      	bne.n	8002ea4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e98:	2308      	movs	r3, #8
 8002e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	611a      	str	r2, [r3, #16]
          break;
 8002ea2:	e009      	b.n	8002eb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	615a      	str	r2, [r3, #20]
          break;
 8002eae:	e003      	b.n	8002eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	623b      	str	r3, [r7, #32]
          break;
 8002eb4:	e000      	b.n	8002eb8 <HAL_GPIO_Init+0x130>
          break;
 8002eb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2bff      	cmp	r3, #255	; 0xff
 8002ebc:	d801      	bhi.n	8002ec2 <HAL_GPIO_Init+0x13a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	e001      	b.n	8002ec6 <HAL_GPIO_Init+0x13e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2bff      	cmp	r3, #255	; 0xff
 8002ecc:	d802      	bhi.n	8002ed4 <HAL_GPIO_Init+0x14c>
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	e002      	b.n	8002eda <HAL_GPIO_Init+0x152>
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	3b08      	subs	r3, #8
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	210f      	movs	r1, #15
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	401a      	ands	r2, r3
 8002eec:	6a39      	ldr	r1, [r7, #32]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80b1 	beq.w	800306a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f08:	4b4d      	ldr	r3, [pc, #308]	; (8003040 <HAL_GPIO_Init+0x2b8>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	4a4c      	ldr	r2, [pc, #304]	; (8003040 <HAL_GPIO_Init+0x2b8>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6193      	str	r3, [r2, #24]
 8002f14:	4b4a      	ldr	r3, [pc, #296]	; (8003040 <HAL_GPIO_Init+0x2b8>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f20:	4a48      	ldr	r2, [pc, #288]	; (8003044 <HAL_GPIO_Init+0x2bc>)
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	089b      	lsrs	r3, r3, #2
 8002f26:	3302      	adds	r3, #2
 8002f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	220f      	movs	r2, #15
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4013      	ands	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a40      	ldr	r2, [pc, #256]	; (8003048 <HAL_GPIO_Init+0x2c0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d013      	beq.n	8002f74 <HAL_GPIO_Init+0x1ec>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a3f      	ldr	r2, [pc, #252]	; (800304c <HAL_GPIO_Init+0x2c4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00d      	beq.n	8002f70 <HAL_GPIO_Init+0x1e8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a3e      	ldr	r2, [pc, #248]	; (8003050 <HAL_GPIO_Init+0x2c8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d007      	beq.n	8002f6c <HAL_GPIO_Init+0x1e4>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a3d      	ldr	r2, [pc, #244]	; (8003054 <HAL_GPIO_Init+0x2cc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d101      	bne.n	8002f68 <HAL_GPIO_Init+0x1e0>
 8002f64:	2303      	movs	r3, #3
 8002f66:	e006      	b.n	8002f76 <HAL_GPIO_Init+0x1ee>
 8002f68:	2304      	movs	r3, #4
 8002f6a:	e004      	b.n	8002f76 <HAL_GPIO_Init+0x1ee>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e002      	b.n	8002f76 <HAL_GPIO_Init+0x1ee>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <HAL_GPIO_Init+0x1ee>
 8002f74:	2300      	movs	r3, #0
 8002f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f78:	f002 0203 	and.w	r2, r2, #3
 8002f7c:	0092      	lsls	r2, r2, #2
 8002f7e:	4093      	lsls	r3, r2
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f86:	492f      	ldr	r1, [pc, #188]	; (8003044 <HAL_GPIO_Init+0x2bc>)
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d006      	beq.n	8002fae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <HAL_GPIO_Init+0x2d0>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	492c      	ldr	r1, [pc, #176]	; (8003058 <HAL_GPIO_Init+0x2d0>)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	600b      	str	r3, [r1, #0]
 8002fac:	e006      	b.n	8002fbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fae:	4b2a      	ldr	r3, [pc, #168]	; (8003058 <HAL_GPIO_Init+0x2d0>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	4928      	ldr	r1, [pc, #160]	; (8003058 <HAL_GPIO_Init+0x2d0>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d006      	beq.n	8002fd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fc8:	4b23      	ldr	r3, [pc, #140]	; (8003058 <HAL_GPIO_Init+0x2d0>)
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	4922      	ldr	r1, [pc, #136]	; (8003058 <HAL_GPIO_Init+0x2d0>)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	604b      	str	r3, [r1, #4]
 8002fd4:	e006      	b.n	8002fe4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fd6:	4b20      	ldr	r3, [pc, #128]	; (8003058 <HAL_GPIO_Init+0x2d0>)
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	491e      	ldr	r1, [pc, #120]	; (8003058 <HAL_GPIO_Init+0x2d0>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d006      	beq.n	8002ffe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ff0:	4b19      	ldr	r3, [pc, #100]	; (8003058 <HAL_GPIO_Init+0x2d0>)
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	4918      	ldr	r1, [pc, #96]	; (8003058 <HAL_GPIO_Init+0x2d0>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	608b      	str	r3, [r1, #8]
 8002ffc:	e006      	b.n	800300c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ffe:	4b16      	ldr	r3, [pc, #88]	; (8003058 <HAL_GPIO_Init+0x2d0>)
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	43db      	mvns	r3, r3
 8003006:	4914      	ldr	r1, [pc, #80]	; (8003058 <HAL_GPIO_Init+0x2d0>)
 8003008:	4013      	ands	r3, r2
 800300a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d021      	beq.n	800305c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <HAL_GPIO_Init+0x2d0>)
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	490e      	ldr	r1, [pc, #56]	; (8003058 <HAL_GPIO_Init+0x2d0>)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	60cb      	str	r3, [r1, #12]
 8003024:	e021      	b.n	800306a <HAL_GPIO_Init+0x2e2>
 8003026:	bf00      	nop
 8003028:	10320000 	.word	0x10320000
 800302c:	10310000 	.word	0x10310000
 8003030:	10220000 	.word	0x10220000
 8003034:	10210000 	.word	0x10210000
 8003038:	10120000 	.word	0x10120000
 800303c:	10110000 	.word	0x10110000
 8003040:	40021000 	.word	0x40021000
 8003044:	40010000 	.word	0x40010000
 8003048:	40010800 	.word	0x40010800
 800304c:	40010c00 	.word	0x40010c00
 8003050:	40011000 	.word	0x40011000
 8003054:	40011400 	.word	0x40011400
 8003058:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_GPIO_Init+0x304>)
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	43db      	mvns	r3, r3
 8003064:	4909      	ldr	r1, [pc, #36]	; (800308c <HAL_GPIO_Init+0x304>)
 8003066:	4013      	ands	r3, r2
 8003068:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	3301      	adds	r3, #1
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	fa22 f303 	lsr.w	r3, r2, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	f47f ae8e 	bne.w	8002d9c <HAL_GPIO_Init+0x14>
  }
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	372c      	adds	r7, #44	; 0x2c
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	40010400 	.word	0x40010400

08003090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	887b      	ldrh	r3, [r7, #2]
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030a8:	2301      	movs	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
 80030ac:	e001      	b.n	80030b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030ae:	2300      	movs	r3, #0
 80030b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	460b      	mov	r3, r1
 80030c8:	807b      	strh	r3, [r7, #2]
 80030ca:	4613      	mov	r3, r2
 80030cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030ce:	787b      	ldrb	r3, [r7, #1]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030d4:	887a      	ldrh	r2, [r7, #2]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030da:	e003      	b.n	80030e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030dc:	887b      	ldrh	r3, [r7, #2]
 80030de:	041a      	lsls	r2, r3, #16
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	611a      	str	r2, [r3, #16]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr

080030ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f0:	b08b      	sub	sp, #44	; 0x2c
 80030f2:	af06      	add	r7, sp, #24
 80030f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0fd      	b.n	80032fc <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d106      	bne.n	800311a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff f9eb 	bl	80024f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2203      	movs	r2, #3
 800311e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f003 fbb8 	bl	800689c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	603b      	str	r3, [r7, #0]
 8003132:	687e      	ldr	r6, [r7, #4]
 8003134:	466d      	mov	r5, sp
 8003136:	f106 0410 	add.w	r4, r6, #16
 800313a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800313c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	602b      	str	r3, [r5, #0]
 8003142:	1d33      	adds	r3, r6, #4
 8003144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003146:	6838      	ldr	r0, [r7, #0]
 8003148:	f003 fb82 	bl	8006850 <USB_CoreInit>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0ce      	b.n	80032fc <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f003 fbb3 	bl	80068d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]
 800316e:	e04c      	b.n	800320a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	440b      	add	r3, r1
 8003180:	3301      	adds	r3, #1
 8003182:	2201      	movs	r2, #1
 8003184:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	440b      	add	r3, r1
 8003196:	7bfa      	ldrb	r2, [r7, #15]
 8003198:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	b298      	uxth	r0, r3
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	440b      	add	r3, r1
 80031ac:	3336      	adds	r3, #54	; 0x36
 80031ae:	4602      	mov	r2, r0
 80031b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	3303      	adds	r3, #3
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031c8:	7bfa      	ldrb	r2, [r7, #15]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	440b      	add	r3, r1
 80031d6:	3338      	adds	r3, #56	; 0x38
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	440b      	add	r3, r1
 80031ea:	333c      	adds	r3, #60	; 0x3c
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	440b      	add	r3, r1
 80031fe:	3340      	adds	r3, #64	; 0x40
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	3301      	adds	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
 800320a:	7bfa      	ldrb	r2, [r7, #15]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	429a      	cmp	r2, r3
 8003212:	d3ad      	bcc.n	8003170 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003214:	2300      	movs	r3, #0
 8003216:	73fb      	strb	r3, [r7, #15]
 8003218:	e044      	b.n	80032a4 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800321a:	7bfa      	ldrb	r2, [r7, #15]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	440b      	add	r3, r1
 8003228:	f203 1369 	addw	r3, r3, #361	; 0x169
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003230:	7bfa      	ldrb	r2, [r7, #15]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	440b      	add	r3, r1
 800323e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003242:	7bfa      	ldrb	r2, [r7, #15]
 8003244:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003246:	7bfa      	ldrb	r2, [r7, #15]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	440b      	add	r3, r1
 8003254:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	440b      	add	r3, r1
 800326a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003272:	7bfa      	ldrb	r2, [r7, #15]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	440b      	add	r3, r1
 8003296:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	3301      	adds	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
 80032a4:	7bfa      	ldrb	r2, [r7, #15]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d3b5      	bcc.n	800321a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	687e      	ldr	r6, [r7, #4]
 80032b6:	466d      	mov	r5, sp
 80032b8:	f106 0410 	add.w	r4, r6, #16
 80032bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	602b      	str	r3, [r5, #0]
 80032c4:	1d33      	adds	r3, r6, #4
 80032c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032c8:	6838      	ldr	r0, [r7, #0]
 80032ca:	f003 fb0d 	bl	80068e8 <USB_DevInit>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e00d      	b.n	80032fc <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f005 ffbf 	bl	8009278 <USB_DevDisconnect>

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003304 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_PCD_Start+0x16>
 8003316:	2302      	movs	r3, #2
 8003318:	e016      	b.n	8003348 <HAL_PCD_Start+0x44>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f003 faa2 	bl	8006870 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800332c:	2101      	movs	r1, #1
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff fb59 	bl	80029e6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f005 ff93 	bl	8009264 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f005 ff95 	bl	800928c <USB_ReadInterrupts>
 8003362:	4603      	mov	r3, r0
 8003364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336c:	d102      	bne.n	8003374 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fb5f 	bl	8003a32 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f005 ff87 	bl	800928c <USB_ReadInterrupts>
 800337e:	4603      	mov	r3, r0
 8003380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003388:	d112      	bne.n	80033b0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003392:	b29a      	uxth	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339c:	b292      	uxth	r2, r2
 800339e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff f927 	bl	80025f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80033a8:	2100      	movs	r1, #0
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f923 	bl	80035f6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f005 ff69 	bl	800928c <USB_ReadInterrupts>
 80033ba:	4603      	mov	r3, r0
 80033bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c4:	d10b      	bne.n	80033de <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033d8:	b292      	uxth	r2, r2
 80033da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f005 ff52 	bl	800928c <USB_ReadInterrupts>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f2:	d10b      	bne.n	800340c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003406:	b292      	uxth	r2, r2
 8003408:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f005 ff3b 	bl	800928c <USB_ReadInterrupts>
 8003416:	4603      	mov	r3, r0
 8003418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800341c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003420:	d126      	bne.n	8003470 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800342a:	b29a      	uxth	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0204 	bic.w	r2, r2, #4
 8003434:	b292      	uxth	r2, r2
 8003436:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003442:	b29a      	uxth	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0208 	bic.w	r2, r2, #8
 800344c:	b292      	uxth	r2, r2
 800344e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff f908 	bl	8002668 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800346a:	b292      	uxth	r2, r2
 800346c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f005 ff09 	bl	800928c <USB_ReadInterrupts>
 800347a:	4603      	mov	r3, r0
 800347c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003484:	f040 8082 	bne.w	800358c <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003488:	2300      	movs	r3, #0
 800348a:	77fb      	strb	r3, [r7, #31]
 800348c:	e010      	b.n	80034b0 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	7ffb      	ldrb	r3, [r7, #31]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	441a      	add	r2, r3
 800349a:	7ffb      	ldrb	r3, [r7, #31]
 800349c:	8812      	ldrh	r2, [r2, #0]
 800349e:	b292      	uxth	r2, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	3320      	adds	r3, #32
 80034a4:	443b      	add	r3, r7
 80034a6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80034aa:	7ffb      	ldrb	r3, [r7, #31]
 80034ac:	3301      	adds	r3, #1
 80034ae:	77fb      	strb	r3, [r7, #31]
 80034b0:	7ffb      	ldrb	r3, [r7, #31]
 80034b2:	2b07      	cmp	r3, #7
 80034b4:	d9eb      	bls.n	800348e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034be:	b29a      	uxth	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0201 	orr.w	r2, r2, #1
 80034c8:	b292      	uxth	r2, r2
 80034ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0201 	bic.w	r2, r2, #1
 80034e0:	b292      	uxth	r2, r2
 80034e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80034e6:	bf00      	nop
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f6      	beq.n	80034e8 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003502:	b29a      	uxth	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350c:	b292      	uxth	r2, r2
 800350e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003512:	2300      	movs	r3, #0
 8003514:	77fb      	strb	r3, [r7, #31]
 8003516:	e00f      	b.n	8003538 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003518:	7ffb      	ldrb	r3, [r7, #31]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6812      	ldr	r2, [r2, #0]
 800351e:	4611      	mov	r1, r2
 8003520:	7ffa      	ldrb	r2, [r7, #31]
 8003522:	0092      	lsls	r2, r2, #2
 8003524:	440a      	add	r2, r1
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	3320      	adds	r3, #32
 800352a:	443b      	add	r3, r7
 800352c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003530:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003532:	7ffb      	ldrb	r3, [r7, #31]
 8003534:	3301      	adds	r3, #1
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	7ffb      	ldrb	r3, [r7, #31]
 800353a:	2b07      	cmp	r3, #7
 800353c:	d9ec      	bls.n	8003518 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003546:	b29a      	uxth	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0208 	orr.w	r2, r2, #8
 8003550:	b292      	uxth	r2, r2
 8003552:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800355e:	b29a      	uxth	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003568:	b292      	uxth	r2, r2
 800356a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003576:	b29a      	uxth	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0204 	orr.w	r2, r2, #4
 8003580:	b292      	uxth	r2, r2
 8003582:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff f854 	bl	8002634 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f005 fe7b 	bl	800928c <USB_ReadInterrupts>
 8003596:	4603      	mov	r3, r0
 8003598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a0:	d10e      	bne.n	80035c0 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035b4:	b292      	uxth	r2, r2
 80035b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff f80d 	bl	80025da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f005 fe61 	bl	800928c <USB_ReadInterrupts>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d4:	d10b      	bne.n	80035ee <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035de:	b29a      	uxth	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035e8:	b292      	uxth	r2, r2
 80035ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80035ee:	bf00      	nop
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	460b      	mov	r3, r1
 8003600:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_PCD_SetAddress+0x1a>
 800360c:	2302      	movs	r3, #2
 800360e:	e013      	b.n	8003638 <HAL_PCD_SetAddress+0x42>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	78fa      	ldrb	r2, [r7, #3]
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f005 fe08 	bl	800923e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	4608      	mov	r0, r1
 800364a:	4611      	mov	r1, r2
 800364c:	461a      	mov	r2, r3
 800364e:	4603      	mov	r3, r0
 8003650:	70fb      	strb	r3, [r7, #3]
 8003652:	460b      	mov	r3, r1
 8003654:	803b      	strh	r3, [r7, #0]
 8003656:	4613      	mov	r3, r2
 8003658:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800365e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003662:	2b00      	cmp	r3, #0
 8003664:	da0e      	bge.n	8003684 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003666:	78fb      	ldrb	r3, [r7, #3]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	4413      	add	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	705a      	strb	r2, [r3, #1]
 8003682:	e00e      	b.n	80036a2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	f003 0207 	and.w	r2, r3, #7
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036ae:	883a      	ldrh	r2, [r7, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	78ba      	ldrb	r2, [r7, #2]
 80036b8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	785b      	ldrb	r3, [r3, #1]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d004      	beq.n	80036cc <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036cc:	78bb      	ldrb	r3, [r7, #2]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d102      	bne.n	80036d8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_PCD_EP_Open+0xa6>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e00e      	b.n	8003704 <HAL_PCD_EP_Open+0xc4>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68f9      	ldr	r1, [r7, #12]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f003 f917 	bl	8006928 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003702:	7afb      	ldrb	r3, [r7, #11]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003718:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800371c:	2b00      	cmp	r3, #0
 800371e:	da0e      	bge.n	800373e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	4413      	add	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	705a      	strb	r2, [r3, #1]
 800373c:	e00e      	b.n	800375c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	f003 0207 	and.w	r2, r3, #7
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4413      	add	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	b2da      	uxtb	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_PCD_EP_Close+0x6a>
 8003772:	2302      	movs	r3, #2
 8003774:	e00e      	b.n	8003794 <HAL_PCD_EP_Close+0x88>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68f9      	ldr	r1, [r7, #12]
 8003784:	4618      	mov	r0, r3
 8003786:	f003 fc39 	bl	8006ffc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	460b      	mov	r3, r1
 80037aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ac:	7afb      	ldrb	r3, [r7, #11]
 80037ae:	f003 0207 	and.w	r2, r3, #7
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2200      	movs	r2, #0
 80037d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2200      	movs	r2, #0
 80037da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037dc:	7afb      	ldrb	r3, [r7, #11]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037e8:	7afb      	ldrb	r3, [r7, #11]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6979      	ldr	r1, [r7, #20]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f003 fdeb 	bl	80073d4 <USB_EPStartXfer>
 80037fe:	e005      	b.n	800380c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6979      	ldr	r1, [r7, #20]
 8003806:	4618      	mov	r0, r3
 8003808:	f003 fde4 	bl	80073d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	460b      	mov	r3, r1
 8003820:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	f003 0207 	and.w	r2, r3, #7
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	440b      	add	r3, r1
 8003834:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003838:	681b      	ldr	r3, [r3, #0]
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr

08003844 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	460b      	mov	r3, r1
 8003852:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003854:	7afb      	ldrb	r3, [r7, #11]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4413      	add	r3, r2
 8003868:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2200      	movs	r2, #0
 8003888:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2201      	movs	r2, #1
 800388e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003890:	7afb      	ldrb	r3, [r7, #11]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	b2da      	uxtb	r2, r3
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800389c:	7afb      	ldrb	r3, [r7, #11]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6979      	ldr	r1, [r7, #20]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f003 fd91 	bl	80073d4 <USB_EPStartXfer>
 80038b2:	e005      	b.n	80038c0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6979      	ldr	r1, [r7, #20]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f003 fd8a 	bl	80073d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	f003 0207 	and.w	r2, r3, #7
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d901      	bls.n	80038e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e04c      	b.n	8003982 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	da0e      	bge.n	800390e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	4413      	add	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	705a      	strb	r2, [r3, #1]
 800390c:	e00c      	b.n	8003928 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	4413      	add	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	b2da      	uxtb	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_PCD_EP_SetStall+0x7e>
 8003944:	2302      	movs	r3, #2
 8003946:	e01c      	b.n	8003982 <HAL_PCD_EP_SetStall+0xb8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68f9      	ldr	r1, [r7, #12]
 8003956:	4618      	mov	r0, r3
 8003958:	f005 fb74 	bl	8009044 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	2b00      	cmp	r3, #0
 8003964:	d108      	bne.n	8003978 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f005 fc99 	bl	80092aa <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	460b      	mov	r3, r1
 8003994:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003996:	78fb      	ldrb	r3, [r7, #3]
 8003998:	f003 020f 	and.w	r2, r3, #15
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d901      	bls.n	80039a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e040      	b.n	8003a2a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	da0e      	bge.n	80039ce <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	4413      	add	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	705a      	strb	r2, [r3, #1]
 80039cc:	e00e      	b.n	80039ec <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	f003 0207 	and.w	r2, r3, #7
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	4413      	add	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_PCD_EP_ClrStall+0x82>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e00e      	b.n	8003a2a <HAL_PCD_EP_ClrStall+0xa0>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68f9      	ldr	r1, [r7, #12]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f005 fb62 	bl	80090e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b08e      	sub	sp, #56	; 0x38
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a3a:	e2ec      	b.n	8004016 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a44:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003a46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003a52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f040 8161 	bne.w	8003d1e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003a5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d152      	bne.n	8003b0c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a76:	81fb      	strh	r3, [r7, #14]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	89fb      	ldrh	r3, [r7, #14]
 8003a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3328      	adds	r3, #40	; 0x28
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3302      	adds	r3, #2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	441a      	add	r2, r3
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003aca:	2100      	movs	r1, #0
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7fe fd6a 	bl	80025a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 829b 	beq.w	8004016 <PCD_EP_ISR_Handler+0x5e4>
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f040 8296 	bne.w	8004016 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	b292      	uxth	r2, r2
 8003afe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b0a:	e284      	b.n	8004016 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003b1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d034      	beq.n	8003b90 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	3306      	adds	r3, #6
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6812      	ldr	r2, [r2, #0]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	f005 fbf0 	bl	800934a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b76:	4013      	ands	r3, r2
 8003b78:	823b      	strh	r3, [r7, #16]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	8a3a      	ldrh	r2, [r7, #16]
 8003b80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b84:	b292      	uxth	r2, r2
 8003b86:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7fe fcdf 	bl	800254c <HAL_PCD_SetupStageCallback>
 8003b8e:	e242      	b.n	8004016 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b90:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f280 823e 	bge.w	8004016 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	83bb      	strh	r3, [r7, #28]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	8bba      	ldrh	r2, [r7, #28]
 8003bb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bb4:	b292      	uxth	r2, r2
 8003bb6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	3306      	adds	r3, #6
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d019      	beq.n	8003c20 <PCD_EP_ISR_Handler+0x1ee>
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d015      	beq.n	8003c20 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	6959      	ldr	r1, [r3, #20]
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	f005 fba0 	bl	800934a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	441a      	add	r2, r3
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003c18:	2100      	movs	r1, #0
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fe fca8 	bl	8002570 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f040 81f2 	bne.w	8004016 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	61bb      	str	r3, [r7, #24]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	461a      	mov	r2, r3
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	4413      	add	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d112      	bne.n	8003c80 <PCD_EP_ISR_Handler+0x24e>
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	801a      	strh	r2, [r3, #0]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	801a      	strh	r2, [r3, #0]
 8003c7e:	e02f      	b.n	8003ce0 <PCD_EP_ISR_Handler+0x2ae>
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2b3e      	cmp	r3, #62	; 0x3e
 8003c86:	d813      	bhi.n	8003cb0 <PCD_EP_ISR_Handler+0x27e>
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <PCD_EP_ISR_Handler+0x270>
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	029b      	lsls	r3, r3, #10
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	801a      	strh	r2, [r3, #0]
 8003cae:	e017      	b.n	8003ce0 <PCD_EP_ISR_Handler+0x2ae>
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	633b      	str	r3, [r7, #48]	; 0x30
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d102      	bne.n	8003cca <PCD_EP_ISR_Handler+0x298>
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	029b      	lsls	r3, r3, #10
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf0:	827b      	strh	r3, [r7, #18]
 8003cf2:	8a7b      	ldrh	r3, [r7, #18]
 8003cf4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003cf8:	827b      	strh	r3, [r7, #18]
 8003cfa:	8a7b      	ldrh	r3, [r7, #18]
 8003cfc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d00:	827b      	strh	r3, [r7, #18]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	8a7b      	ldrh	r3, [r7, #18]
 8003d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	8013      	strh	r3, [r2, #0]
 8003d1c:	e17b      	b.n	8004016 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d30:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f280 80ea 	bge.w	8003f0e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d50:	4013      	ands	r3, r2
 8003d52:	853b      	strh	r3, [r7, #40]	; 0x28
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003d64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d68:	b292      	uxth	r2, r2
 8003d6a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003d6c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	4413      	add	r3, r2
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	7b1b      	ldrb	r3, [r3, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d122      	bne.n	8003dd0 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	3306      	adds	r3, #6
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003db4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8087 	beq.w	8003eca <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	6959      	ldr	r1, [r3, #20]
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	88da      	ldrh	r2, [r3, #6]
 8003dc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dca:	f005 fabe 	bl	800934a <USB_ReadPMA>
 8003dce:	e07c      	b.n	8003eca <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	78db      	ldrb	r3, [r3, #3]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d108      	bne.n	8003dea <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003dd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dda:	461a      	mov	r2, r3
 8003ddc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f927 	bl	8004032 <HAL_PCD_EP_DB_Receive>
 8003de4:	4603      	mov	r3, r0
 8003de6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003de8:	e06f      	b.n	8003eca <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e04:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	441a      	add	r2, r3
 8003e14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d021      	beq.n	8003e88 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	3302      	adds	r3, #2
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6812      	ldr	r2, [r2, #0]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e6c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003e6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d02a      	beq.n	8003eca <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	6959      	ldr	r1, [r3, #20]
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	891a      	ldrh	r2, [r3, #8]
 8003e80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e82:	f005 fa62 	bl	800934a <USB_ReadPMA>
 8003e86:	e020      	b.n	8003eca <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3306      	adds	r3, #6
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eb0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003eb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	6959      	ldr	r1, [r3, #20]
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	895a      	ldrh	r2, [r3, #10]
 8003ec4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ec6:	f005 fa40 	bl	800934a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	69da      	ldr	r2, [r3, #28]
 8003ece:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ed0:	441a      	add	r2, r3
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003edc:	441a      	add	r2, r3
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d004      	beq.n	8003ef4 <PCD_EP_ISR_Handler+0x4c2>
 8003eea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d206      	bcs.n	8003f02 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fe fb38 	bl	8002570 <HAL_PCD_DataOutStageCallback>
 8003f00:	e005      	b.n	8003f0e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f003 fa63 	bl	80073d4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003f0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d07e      	beq.n	8004016 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003f18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f46:	843b      	strh	r3, [r7, #32]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	441a      	add	r2, r3
 8003f56:	8c3b      	ldrh	r3, [r7, #32]
 8003f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	78db      	ldrb	r3, [r3, #3]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d00c      	beq.n	8003f86 <PCD_EP_ISR_Handler+0x554>
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	78db      	ldrb	r3, [r3, #3]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d146      	bne.n	800400a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003f7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d141      	bne.n	800400a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	3302      	adds	r3, #2
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fae:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	699a      	ldr	r2, [r3, #24]
 8003fb4:	8bfb      	ldrh	r3, [r7, #30]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d906      	bls.n	8003fc8 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	8bfb      	ldrh	r3, [r7, #30]
 8003fc0:	1ad2      	subs	r2, r2, r3
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	619a      	str	r2, [r3, #24]
 8003fc6:	e002      	b.n	8003fce <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	2200      	movs	r2, #0
 8003fcc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7fe fae2 	bl	80025a6 <HAL_PCD_DataInStageCallback>
 8003fe2:	e018      	b.n	8004016 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	8bfb      	ldrh	r3, [r7, #30]
 8003fea:	441a      	add	r2, r3
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	69da      	ldr	r2, [r3, #28]
 8003ff4:	8bfb      	ldrh	r3, [r7, #30]
 8003ff6:	441a      	add	r2, r3
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004002:	4618      	mov	r0, r3
 8004004:	f003 f9e6 	bl	80073d4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004008:	e005      	b.n	8004016 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800400a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800400c:	461a      	mov	r2, r3
 800400e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f91b 	bl	800424c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800401e:	b29b      	uxth	r3, r3
 8004020:	b21b      	sxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	f6ff ad0a 	blt.w	8003a3c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3738      	adds	r7, #56	; 0x38
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b088      	sub	sp, #32
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	4613      	mov	r3, r2
 800403e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004040:	88fb      	ldrh	r3, [r7, #6]
 8004042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d07e      	beq.n	8004148 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004052:	b29b      	uxth	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4413      	add	r3, r2
 800405e:	3302      	adds	r3, #2
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004072:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	699a      	ldr	r2, [r3, #24]
 8004078:	8b7b      	ldrh	r3, [r7, #26]
 800407a:	429a      	cmp	r2, r3
 800407c:	d306      	bcc.n	800408c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	8b7b      	ldrh	r3, [r7, #26]
 8004084:	1ad2      	subs	r2, r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	619a      	str	r2, [r3, #24]
 800408a:	e002      	b.n	8004092 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2200      	movs	r2, #0
 8004090:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d123      	bne.n	80040e2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b4:	833b      	strh	r3, [r7, #24]
 80040b6:	8b3b      	ldrh	r3, [r7, #24]
 80040b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040bc:	833b      	strh	r3, [r7, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	441a      	add	r2, r3
 80040cc:	8b3b      	ldrh	r3, [r7, #24]
 80040ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040de:	b29b      	uxth	r3, r3
 80040e0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01f      	beq.n	800412c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004106:	82fb      	strh	r3, [r7, #22]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	441a      	add	r2, r3
 8004116:	8afb      	ldrh	r3, [r7, #22]
 8004118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800411c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004124:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004128:	b29b      	uxth	r3, r3
 800412a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800412c:	8b7b      	ldrh	r3, [r7, #26]
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 8087 	beq.w	8004242 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	6959      	ldr	r1, [r3, #20]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	891a      	ldrh	r2, [r3, #8]
 8004140:	8b7b      	ldrh	r3, [r7, #26]
 8004142:	f005 f902 	bl	800934a <USB_ReadPMA>
 8004146:	e07c      	b.n	8004242 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004150:	b29b      	uxth	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4413      	add	r3, r2
 800415c:	3306      	adds	r3, #6
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004170:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	8b7b      	ldrh	r3, [r7, #26]
 8004178:	429a      	cmp	r2, r3
 800417a:	d306      	bcc.n	800418a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	699a      	ldr	r2, [r3, #24]
 8004180:	8b7b      	ldrh	r3, [r7, #26]
 8004182:	1ad2      	subs	r2, r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	619a      	str	r2, [r3, #24]
 8004188:	e002      	b.n	8004190 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2200      	movs	r2, #0
 800418e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d123      	bne.n	80041e0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b2:	83fb      	strh	r3, [r7, #30]
 80041b4:	8bfb      	ldrh	r3, [r7, #30]
 80041b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041ba:	83fb      	strh	r3, [r7, #30]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	461a      	mov	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	441a      	add	r2, r3
 80041ca:	8bfb      	ldrh	r3, [r7, #30]
 80041cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041dc:	b29b      	uxth	r3, r3
 80041de:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d11f      	bne.n	800422a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004204:	83bb      	strh	r3, [r7, #28]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	441a      	add	r2, r3
 8004214:	8bbb      	ldrh	r3, [r7, #28]
 8004216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800421a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800421e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004222:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004226:	b29b      	uxth	r3, r3
 8004228:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800422a:	8b7b      	ldrh	r3, [r7, #26]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	6959      	ldr	r1, [r3, #20]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	895a      	ldrh	r2, [r3, #10]
 800423c:	8b7b      	ldrh	r3, [r7, #26]
 800423e:	f005 f884 	bl	800934a <USB_ReadPMA>
    }
  }

  return count;
 8004242:	8b7b      	ldrh	r3, [r7, #26]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3720      	adds	r7, #32
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b0a2      	sub	sp, #136	; 0x88
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	4613      	mov	r3, r2
 8004258:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 81c7 	beq.w	80045f4 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800426e:	b29b      	uxth	r3, r3
 8004270:	461a      	mov	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4413      	add	r3, r2
 800427a:	3302      	adds	r3, #2
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800428e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800429a:	429a      	cmp	r2, r3
 800429c:	d907      	bls.n	80042ae <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	699a      	ldr	r2, [r3, #24]
 80042a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042a6:	1ad2      	subs	r2, r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	619a      	str	r2, [r3, #24]
 80042ac:	e002      	b.n	80042b4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2200      	movs	r2, #0
 80042b2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f040 80b9 	bne.w	8004430 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	785b      	ldrb	r3, [r3, #1]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d126      	bne.n	8004314 <HAL_PCD_EP_DB_Transmit+0xc8>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	4413      	add	r3, r2
 80042dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	011a      	lsls	r2, r3, #4
 80042e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e6:	4413      	add	r3, r2
 80042e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	801a      	strh	r2, [r3, #0]
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800430c:	b29a      	uxth	r2, r3
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	e01a      	b.n	800434a <HAL_PCD_EP_DB_Transmit+0xfe>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	785b      	ldrb	r3, [r3, #1]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d116      	bne.n	800434a <HAL_PCD_EP_DB_Transmit+0xfe>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	633b      	str	r3, [r7, #48]	; 0x30
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800432a:	b29b      	uxth	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	4413      	add	r3, r2
 8004332:	633b      	str	r3, [r7, #48]	; 0x30
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	011a      	lsls	r2, r3, #4
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	4413      	add	r3, r2
 800433e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004346:	2200      	movs	r2, #0
 8004348:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	623b      	str	r3, [r7, #32]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	785b      	ldrb	r3, [r3, #1]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d126      	bne.n	80043a6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004366:	b29b      	uxth	r3, r3
 8004368:	461a      	mov	r2, r3
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	4413      	add	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	011a      	lsls	r2, r3, #4
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	4413      	add	r3, r2
 800437a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800438a:	b29a      	uxth	r2, r3
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	b29b      	uxth	r3, r3
 8004396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800439a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800439e:	b29a      	uxth	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	801a      	strh	r2, [r3, #0]
 80043a4:	e017      	b.n	80043d6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	785b      	ldrb	r3, [r3, #1]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d113      	bne.n	80043d6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	4413      	add	r3, r2
 80043be:	623b      	str	r3, [r7, #32]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	011a      	lsls	r2, r3, #4
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	4413      	add	r3, r2
 80043ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2200      	movs	r2, #0
 80043d4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	4619      	mov	r1, r3
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f7fe f8e2 	bl	80025a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 82d4 	beq.w	8004996 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004408:	827b      	strh	r3, [r7, #18]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	441a      	add	r2, r3
 8004418:	8a7b      	ldrh	r3, [r7, #18]
 800441a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800441e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004422:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800442a:	b29b      	uxth	r3, r3
 800442c:	8013      	strh	r3, [r2, #0]
 800442e:	e2b2      	b.n	8004996 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d021      	beq.n	800447e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	b29b      	uxth	r3, r3
 800444c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004454:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	441a      	add	r2, r3
 8004466:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800446a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800446e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004472:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800447a:	b29b      	uxth	r3, r3
 800447c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004484:	2b01      	cmp	r3, #1
 8004486:	f040 8286 	bne.w	8004996 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004492:	441a      	add	r2, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044a0:	441a      	add	r2, r3
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	6a1a      	ldr	r2, [r3, #32]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d309      	bcc.n	80044c6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	6a1a      	ldr	r2, [r3, #32]
 80044bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044be:	1ad2      	subs	r2, r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	621a      	str	r2, [r3, #32]
 80044c4:	e015      	b.n	80044f2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d107      	bne.n	80044de <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80044ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044d2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80044dc:	e009      	b.n	80044f2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2200      	movs	r2, #0
 80044f0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	785b      	ldrb	r3, [r3, #1]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d155      	bne.n	80045a6 <HAL_PCD_EP_DB_Transmit+0x35a>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004508:	b29b      	uxth	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	4413      	add	r3, r2
 8004510:	63bb      	str	r3, [r7, #56]	; 0x38
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	011a      	lsls	r2, r3, #4
 8004518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451a:	4413      	add	r3, r2
 800451c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004520:	637b      	str	r3, [r7, #52]	; 0x34
 8004522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004524:	2b00      	cmp	r3, #0
 8004526:	d112      	bne.n	800454e <HAL_PCD_EP_DB_Transmit+0x302>
 8004528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004532:	b29a      	uxth	r2, r3
 8004534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004536:	801a      	strh	r2, [r3, #0]
 8004538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004546:	b29a      	uxth	r2, r3
 8004548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454a:	801a      	strh	r2, [r3, #0]
 800454c:	e047      	b.n	80045de <HAL_PCD_EP_DB_Transmit+0x392>
 800454e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004550:	2b3e      	cmp	r3, #62	; 0x3e
 8004552:	d811      	bhi.n	8004578 <HAL_PCD_EP_DB_Transmit+0x32c>
 8004554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004556:	085b      	lsrs	r3, r3, #1
 8004558:	64bb      	str	r3, [r7, #72]	; 0x48
 800455a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <HAL_PCD_EP_DB_Transmit+0x31e>
 8004564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004566:	3301      	adds	r3, #1
 8004568:	64bb      	str	r3, [r7, #72]	; 0x48
 800456a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800456c:	b29b      	uxth	r3, r3
 800456e:	029b      	lsls	r3, r3, #10
 8004570:	b29a      	uxth	r2, r3
 8004572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004574:	801a      	strh	r2, [r3, #0]
 8004576:	e032      	b.n	80045de <HAL_PCD_EP_DB_Transmit+0x392>
 8004578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	64bb      	str	r3, [r7, #72]	; 0x48
 800457e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	2b00      	cmp	r3, #0
 8004586:	d102      	bne.n	800458e <HAL_PCD_EP_DB_Transmit+0x342>
 8004588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800458a:	3b01      	subs	r3, #1
 800458c:	64bb      	str	r3, [r7, #72]	; 0x48
 800458e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004590:	b29b      	uxth	r3, r3
 8004592:	029b      	lsls	r3, r3, #10
 8004594:	b29b      	uxth	r3, r3
 8004596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800459a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800459e:	b29a      	uxth	r2, r3
 80045a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a2:	801a      	strh	r2, [r3, #0]
 80045a4:	e01b      	b.n	80045de <HAL_PCD_EP_DB_Transmit+0x392>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	785b      	ldrb	r3, [r3, #1]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d117      	bne.n	80045de <HAL_PCD_EP_DB_Transmit+0x392>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	643b      	str	r3, [r7, #64]	; 0x40
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045bc:	b29b      	uxth	r3, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c2:	4413      	add	r3, r2
 80045c4:	643b      	str	r3, [r7, #64]	; 0x40
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	011a      	lsls	r2, r3, #4
 80045cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ce:	4413      	add	r3, r2
 80045d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d8:	b29a      	uxth	r2, r3
 80045da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045dc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	6959      	ldr	r1, [r3, #20]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	891a      	ldrh	r2, [r3, #8]
 80045ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	f004 fe67 	bl	80092c0 <USB_WritePMA>
 80045f2:	e1d0      	b.n	8004996 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	461a      	mov	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4413      	add	r3, r2
 8004608:	3306      	adds	r3, #6
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800461c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	699a      	ldr	r2, [r3, #24]
 8004624:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004628:	429a      	cmp	r2, r3
 800462a:	d307      	bcc.n	800463c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	699a      	ldr	r2, [r3, #24]
 8004630:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004634:	1ad2      	subs	r2, r2, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	619a      	str	r2, [r3, #24]
 800463a:	e002      	b.n	8004642 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2200      	movs	r2, #0
 8004640:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f040 80c4 	bne.w	80047d4 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	785b      	ldrb	r3, [r3, #1]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d126      	bne.n	80046a2 <HAL_PCD_EP_DB_Transmit+0x456>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	66fb      	str	r3, [r7, #108]	; 0x6c
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004662:	b29b      	uxth	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004668:	4413      	add	r3, r2
 800466a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	011a      	lsls	r2, r3, #4
 8004672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004674:	4413      	add	r3, r2
 8004676:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800467a:	66bb      	str	r3, [r7, #104]	; 0x68
 800467c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004686:	b29a      	uxth	r2, r3
 8004688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800468a:	801a      	strh	r2, [r3, #0]
 800468c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800469a:	b29a      	uxth	r2, r3
 800469c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800469e:	801a      	strh	r2, [r3, #0]
 80046a0:	e01a      	b.n	80046d8 <HAL_PCD_EP_DB_Transmit+0x48c>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	785b      	ldrb	r3, [r3, #1]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d116      	bne.n	80046d8 <HAL_PCD_EP_DB_Transmit+0x48c>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	677b      	str	r3, [r7, #116]	; 0x74
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046be:	4413      	add	r3, r2
 80046c0:	677b      	str	r3, [r7, #116]	; 0x74
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	011a      	lsls	r2, r3, #4
 80046c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ca:	4413      	add	r3, r2
 80046cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046d0:	673b      	str	r3, [r7, #112]	; 0x70
 80046d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046d4:	2200      	movs	r2, #0
 80046d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	785b      	ldrb	r3, [r3, #1]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d12f      	bne.n	8004746 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046fe:	4413      	add	r3, r2
 8004700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	011a      	lsls	r2, r3, #4
 800470a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800470e:	4413      	add	r3, r2
 8004710:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	b29b      	uxth	r3, r3
 8004720:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004724:	b29a      	uxth	r2, r3
 8004726:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800472a:	801a      	strh	r2, [r3, #0]
 800472c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b29b      	uxth	r3, r3
 8004734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800473c:	b29a      	uxth	r2, r3
 800473e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004742:	801a      	strh	r2, [r3, #0]
 8004744:	e017      	b.n	8004776 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	785b      	ldrb	r3, [r3, #1]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d113      	bne.n	8004776 <HAL_PCD_EP_DB_Transmit+0x52a>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004756:	b29b      	uxth	r3, r3
 8004758:	461a      	mov	r2, r3
 800475a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800475c:	4413      	add	r3, r2
 800475e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	011a      	lsls	r2, r3, #4
 8004766:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004768:	4413      	add	r3, r2
 800476a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800476e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004770:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004772:	2200      	movs	r2, #0
 8004774:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	4619      	mov	r1, r3
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7fd ff12 	bl	80025a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004788:	2b00      	cmp	r3, #0
 800478a:	f040 8104 	bne.w	8004996 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	441a      	add	r2, r3
 80047ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	8013      	strh	r3, [r2, #0]
 80047d2:	e0e0      	b.n	8004996 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d121      	bne.n	8004822 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	461a      	mov	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	441a      	add	r2, r3
 800480a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800480e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004812:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004816:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800481a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481e:	b29b      	uxth	r3, r3
 8004820:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004828:	2b01      	cmp	r3, #1
 800482a:	f040 80b4 	bne.w	8004996 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	695a      	ldr	r2, [r3, #20]
 8004832:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004836:	441a      	add	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004844:	441a      	add	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	6a1a      	ldr	r2, [r3, #32]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	429a      	cmp	r2, r3
 8004854:	d309      	bcc.n	800486a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	6a1a      	ldr	r2, [r3, #32]
 8004860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004862:	1ad2      	subs	r2, r2, r3
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	621a      	str	r2, [r3, #32]
 8004868:	e015      	b.n	8004896 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d107      	bne.n	8004882 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004872:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004876:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004880:	e009      	b.n	8004896 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2200      	movs	r2, #0
 800488c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	667b      	str	r3, [r7, #100]	; 0x64
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	785b      	ldrb	r3, [r3, #1]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d155      	bne.n	8004950 <HAL_PCD_EP_DB_Transmit+0x704>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	461a      	mov	r2, r3
 80048b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b8:	4413      	add	r3, r2
 80048ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	011a      	lsls	r2, r3, #4
 80048c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c4:	4413      	add	r3, r2
 80048c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80048cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d112      	bne.n	80048f8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80048d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048dc:	b29a      	uxth	r2, r3
 80048de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048e0:	801a      	strh	r2, [r3, #0]
 80048e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048f4:	801a      	strh	r2, [r3, #0]
 80048f6:	e044      	b.n	8004982 <HAL_PCD_EP_DB_Transmit+0x736>
 80048f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048fa:	2b3e      	cmp	r3, #62	; 0x3e
 80048fc:	d811      	bhi.n	8004922 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80048fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	657b      	str	r3, [r7, #84]	; 0x54
 8004904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800490e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004910:	3301      	adds	r3, #1
 8004912:	657b      	str	r3, [r7, #84]	; 0x54
 8004914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004916:	b29b      	uxth	r3, r3
 8004918:	029b      	lsls	r3, r3, #10
 800491a:	b29a      	uxth	r2, r3
 800491c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800491e:	801a      	strh	r2, [r3, #0]
 8004920:	e02f      	b.n	8004982 <HAL_PCD_EP_DB_Transmit+0x736>
 8004922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004924:	095b      	lsrs	r3, r3, #5
 8004926:	657b      	str	r3, [r7, #84]	; 0x54
 8004928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	2b00      	cmp	r3, #0
 8004930:	d102      	bne.n	8004938 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004934:	3b01      	subs	r3, #1
 8004936:	657b      	str	r3, [r7, #84]	; 0x54
 8004938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800493a:	b29b      	uxth	r3, r3
 800493c:	029b      	lsls	r3, r3, #10
 800493e:	b29b      	uxth	r3, r3
 8004940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004948:	b29a      	uxth	r2, r3
 800494a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800494c:	801a      	strh	r2, [r3, #0]
 800494e:	e018      	b.n	8004982 <HAL_PCD_EP_DB_Transmit+0x736>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	785b      	ldrb	r3, [r3, #1]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d114      	bne.n	8004982 <HAL_PCD_EP_DB_Transmit+0x736>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004960:	b29b      	uxth	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004966:	4413      	add	r3, r2
 8004968:	667b      	str	r3, [r7, #100]	; 0x64
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	011a      	lsls	r2, r3, #4
 8004970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004972:	4413      	add	r3, r2
 8004974:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004978:	663b      	str	r3, [r7, #96]	; 0x60
 800497a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800497c:	b29a      	uxth	r2, r3
 800497e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004980:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	6959      	ldr	r1, [r3, #20]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	895a      	ldrh	r2, [r3, #10]
 800498e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004990:	b29b      	uxth	r3, r3
 8004992:	f004 fc95 	bl	80092c0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b0:	823b      	strh	r3, [r7, #16]
 80049b2:	8a3b      	ldrh	r3, [r7, #16]
 80049b4:	f083 0310 	eor.w	r3, r3, #16
 80049b8:	823b      	strh	r3, [r7, #16]
 80049ba:	8a3b      	ldrh	r3, [r7, #16]
 80049bc:	f083 0320 	eor.w	r3, r3, #32
 80049c0:	823b      	strh	r3, [r7, #16]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	441a      	add	r2, r3
 80049d0:	8a3b      	ldrh	r3, [r7, #16]
 80049d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3788      	adds	r7, #136	; 0x88
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	607b      	str	r3, [r7, #4]
 80049fa:	460b      	mov	r3, r1
 80049fc:	817b      	strh	r3, [r7, #10]
 80049fe:	4613      	mov	r3, r2
 8004a00:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004a02:	897b      	ldrh	r3, [r7, #10]
 8004a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00b      	beq.n	8004a26 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a0e:	897b      	ldrh	r3, [r7, #10]
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4413      	add	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e009      	b.n	8004a3a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a26:	897a      	ldrh	r2, [r7, #10]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4413      	add	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004a3a:	893b      	ldrh	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d107      	bne.n	8004a50 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2200      	movs	r2, #0
 8004a44:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	80da      	strh	r2, [r3, #6]
 8004a4e:	e00b      	b.n	8004a68 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2201      	movs	r2, #1
 8004a54:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	0c1b      	lsrs	r3, r3, #16
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr

08004a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e272      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 8087 	beq.w	8004ba2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a94:	4b92      	ldr	r3, [pc, #584]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 030c 	and.w	r3, r3, #12
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d00c      	beq.n	8004aba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004aa0:	4b8f      	ldr	r3, [pc, #572]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d112      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x5e>
 8004aac:	4b8c      	ldr	r3, [pc, #560]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab8:	d10b      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aba:	4b89      	ldr	r3, [pc, #548]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d06c      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x12c>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d168      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e24c      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ada:	d106      	bne.n	8004aea <HAL_RCC_OscConfig+0x76>
 8004adc:	4b80      	ldr	r3, [pc, #512]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a7f      	ldr	r2, [pc, #508]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	e02e      	b.n	8004b48 <HAL_RCC_OscConfig+0xd4>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCC_OscConfig+0x98>
 8004af2:	4b7b      	ldr	r3, [pc, #492]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a7a      	ldr	r2, [pc, #488]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	4b78      	ldr	r3, [pc, #480]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a77      	ldr	r2, [pc, #476]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e01d      	b.n	8004b48 <HAL_RCC_OscConfig+0xd4>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b14:	d10c      	bne.n	8004b30 <HAL_RCC_OscConfig+0xbc>
 8004b16:	4b72      	ldr	r3, [pc, #456]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a71      	ldr	r2, [pc, #452]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	4b6f      	ldr	r3, [pc, #444]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a6e      	ldr	r2, [pc, #440]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e00b      	b.n	8004b48 <HAL_RCC_OscConfig+0xd4>
 8004b30:	4b6b      	ldr	r3, [pc, #428]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a6a      	ldr	r2, [pc, #424]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	4b68      	ldr	r3, [pc, #416]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a67      	ldr	r2, [pc, #412]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d013      	beq.n	8004b78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b50:	f7fd ffde 	bl	8002b10 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b58:	f7fd ffda 	bl	8002b10 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b64      	cmp	r3, #100	; 0x64
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e200      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6a:	4b5d      	ldr	r3, [pc, #372]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0f0      	beq.n	8004b58 <HAL_RCC_OscConfig+0xe4>
 8004b76:	e014      	b.n	8004ba2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b78:	f7fd ffca 	bl	8002b10 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b80:	f7fd ffc6 	bl	8002b10 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b64      	cmp	r3, #100	; 0x64
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e1ec      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b92:	4b53      	ldr	r3, [pc, #332]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <HAL_RCC_OscConfig+0x10c>
 8004b9e:	e000      	b.n	8004ba2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d063      	beq.n	8004c76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bae:	4b4c      	ldr	r3, [pc, #304]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00b      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004bba:	4b49      	ldr	r3, [pc, #292]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d11c      	bne.n	8004c00 <HAL_RCC_OscConfig+0x18c>
 8004bc6:	4b46      	ldr	r3, [pc, #280]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d116      	bne.n	8004c00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd2:	4b43      	ldr	r3, [pc, #268]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <HAL_RCC_OscConfig+0x176>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d001      	beq.n	8004bea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e1c0      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bea:	4b3d      	ldr	r3, [pc, #244]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4939      	ldr	r1, [pc, #228]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfe:	e03a      	b.n	8004c76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d020      	beq.n	8004c4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c08:	4b36      	ldr	r3, [pc, #216]	; (8004ce4 <HAL_RCC_OscConfig+0x270>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0e:	f7fd ff7f 	bl	8002b10 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c16:	f7fd ff7b 	bl	8002b10 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e1a1      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c28:	4b2d      	ldr	r3, [pc, #180]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0f0      	beq.n	8004c16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c34:	4b2a      	ldr	r3, [pc, #168]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	4927      	ldr	r1, [pc, #156]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	600b      	str	r3, [r1, #0]
 8004c48:	e015      	b.n	8004c76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c4a:	4b26      	ldr	r3, [pc, #152]	; (8004ce4 <HAL_RCC_OscConfig+0x270>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c50:	f7fd ff5e 	bl	8002b10 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c58:	f7fd ff5a 	bl	8002b10 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e180      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d03a      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d019      	beq.n	8004cbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c8a:	4b17      	ldr	r3, [pc, #92]	; (8004ce8 <HAL_RCC_OscConfig+0x274>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c90:	f7fd ff3e 	bl	8002b10 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c98:	f7fd ff3a 	bl	8002b10 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e160      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004caa:	4b0d      	ldr	r3, [pc, #52]	; (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004cb6:	2001      	movs	r0, #1
 8004cb8:	f000 faa6 	bl	8005208 <RCC_Delay>
 8004cbc:	e01c      	b.n	8004cf8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cbe:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <HAL_RCC_OscConfig+0x274>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc4:	f7fd ff24 	bl	8002b10 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cca:	e00f      	b.n	8004cec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ccc:	f7fd ff20 	bl	8002b10 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d908      	bls.n	8004cec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e146      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
 8004cde:	bf00      	nop
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	42420000 	.word	0x42420000
 8004ce8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cec:	4b92      	ldr	r3, [pc, #584]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e9      	bne.n	8004ccc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80a6 	beq.w	8004e52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d06:	2300      	movs	r3, #0
 8004d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d0a:	4b8b      	ldr	r3, [pc, #556]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10d      	bne.n	8004d32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d16:	4b88      	ldr	r3, [pc, #544]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	4a87      	ldr	r2, [pc, #540]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d20:	61d3      	str	r3, [r2, #28]
 8004d22:	4b85      	ldr	r3, [pc, #532]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	60bb      	str	r3, [r7, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d32:	4b82      	ldr	r3, [pc, #520]	; (8004f3c <HAL_RCC_OscConfig+0x4c8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d118      	bne.n	8004d70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d3e:	4b7f      	ldr	r3, [pc, #508]	; (8004f3c <HAL_RCC_OscConfig+0x4c8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a7e      	ldr	r2, [pc, #504]	; (8004f3c <HAL_RCC_OscConfig+0x4c8>)
 8004d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d4a:	f7fd fee1 	bl	8002b10 <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d52:	f7fd fedd 	bl	8002b10 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b64      	cmp	r3, #100	; 0x64
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e103      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d64:	4b75      	ldr	r3, [pc, #468]	; (8004f3c <HAL_RCC_OscConfig+0x4c8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0f0      	beq.n	8004d52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d106      	bne.n	8004d86 <HAL_RCC_OscConfig+0x312>
 8004d78:	4b6f      	ldr	r3, [pc, #444]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	4a6e      	ldr	r2, [pc, #440]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	6213      	str	r3, [r2, #32]
 8004d84:	e02d      	b.n	8004de2 <HAL_RCC_OscConfig+0x36e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCC_OscConfig+0x334>
 8004d8e:	4b6a      	ldr	r3, [pc, #424]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	4a69      	ldr	r2, [pc, #420]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d94:	f023 0301 	bic.w	r3, r3, #1
 8004d98:	6213      	str	r3, [r2, #32]
 8004d9a:	4b67      	ldr	r3, [pc, #412]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	4a66      	ldr	r2, [pc, #408]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004da0:	f023 0304 	bic.w	r3, r3, #4
 8004da4:	6213      	str	r3, [r2, #32]
 8004da6:	e01c      	b.n	8004de2 <HAL_RCC_OscConfig+0x36e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b05      	cmp	r3, #5
 8004dae:	d10c      	bne.n	8004dca <HAL_RCC_OscConfig+0x356>
 8004db0:	4b61      	ldr	r3, [pc, #388]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	4a60      	ldr	r2, [pc, #384]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004db6:	f043 0304 	orr.w	r3, r3, #4
 8004dba:	6213      	str	r3, [r2, #32]
 8004dbc:	4b5e      	ldr	r3, [pc, #376]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	4a5d      	ldr	r2, [pc, #372]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	6213      	str	r3, [r2, #32]
 8004dc8:	e00b      	b.n	8004de2 <HAL_RCC_OscConfig+0x36e>
 8004dca:	4b5b      	ldr	r3, [pc, #364]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	4a5a      	ldr	r2, [pc, #360]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004dd0:	f023 0301 	bic.w	r3, r3, #1
 8004dd4:	6213      	str	r3, [r2, #32]
 8004dd6:	4b58      	ldr	r3, [pc, #352]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	4a57      	ldr	r2, [pc, #348]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004ddc:	f023 0304 	bic.w	r3, r3, #4
 8004de0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d015      	beq.n	8004e16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dea:	f7fd fe91 	bl	8002b10 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df0:	e00a      	b.n	8004e08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df2:	f7fd fe8d 	bl	8002b10 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e0b1      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e08:	4b4b      	ldr	r3, [pc, #300]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0ee      	beq.n	8004df2 <HAL_RCC_OscConfig+0x37e>
 8004e14:	e014      	b.n	8004e40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e16:	f7fd fe7b 	bl	8002b10 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e1c:	e00a      	b.n	8004e34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1e:	f7fd fe77 	bl	8002b10 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e09b      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e34:	4b40      	ldr	r3, [pc, #256]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1ee      	bne.n	8004e1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d105      	bne.n	8004e52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e46:	4b3c      	ldr	r3, [pc, #240]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	4a3b      	ldr	r2, [pc, #236]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 8087 	beq.w	8004f6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e5c:	4b36      	ldr	r3, [pc, #216]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 030c 	and.w	r3, r3, #12
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d061      	beq.n	8004f2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d146      	bne.n	8004efe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e70:	4b33      	ldr	r3, [pc, #204]	; (8004f40 <HAL_RCC_OscConfig+0x4cc>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e76:	f7fd fe4b 	bl	8002b10 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7e:	f7fd fe47 	bl	8002b10 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e06d      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e90:	4b29      	ldr	r3, [pc, #164]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f0      	bne.n	8004e7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea4:	d108      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ea6:	4b24      	ldr	r3, [pc, #144]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	4921      	ldr	r1, [pc, #132]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eb8:	4b1f      	ldr	r3, [pc, #124]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a19      	ldr	r1, [r3, #32]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	491b      	ldr	r1, [pc, #108]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed0:	4b1b      	ldr	r3, [pc, #108]	; (8004f40 <HAL_RCC_OscConfig+0x4cc>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed6:	f7fd fe1b 	bl	8002b10 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ede:	f7fd fe17 	bl	8002b10 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e03d      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ef0:	4b11      	ldr	r3, [pc, #68]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <HAL_RCC_OscConfig+0x46a>
 8004efc:	e035      	b.n	8004f6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004efe:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <HAL_RCC_OscConfig+0x4cc>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f04:	f7fd fe04 	bl	8002b10 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0c:	f7fd fe00 	bl	8002b10 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e026      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f1e:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0x498>
 8004f2a:	e01e      	b.n	8004f6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d107      	bne.n	8004f44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e019      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40007000 	.word	0x40007000
 8004f40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f44:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <HAL_RCC_OscConfig+0x500>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d106      	bne.n	8004f66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d001      	beq.n	8004f6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40021000 	.word	0x40021000

08004f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e0d0      	b.n	800512e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f8c:	4b6a      	ldr	r3, [pc, #424]	; (8005138 <HAL_RCC_ClockConfig+0x1c0>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d910      	bls.n	8004fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f9a:	4b67      	ldr	r3, [pc, #412]	; (8005138 <HAL_RCC_ClockConfig+0x1c0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f023 0207 	bic.w	r2, r3, #7
 8004fa2:	4965      	ldr	r1, [pc, #404]	; (8005138 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004faa:	4b63      	ldr	r3, [pc, #396]	; (8005138 <HAL_RCC_ClockConfig+0x1c0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d001      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e0b8      	b.n	800512e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d020      	beq.n	800500a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fd4:	4b59      	ldr	r3, [pc, #356]	; (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4a58      	ldr	r2, [pc, #352]	; (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8004fda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004fde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fec:	4b53      	ldr	r3, [pc, #332]	; (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	4a52      	ldr	r2, [pc, #328]	; (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8004ff2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ff6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ff8:	4b50      	ldr	r3, [pc, #320]	; (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	494d      	ldr	r1, [pc, #308]	; (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8005006:	4313      	orrs	r3, r2
 8005008:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d040      	beq.n	8005098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d107      	bne.n	800502e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800501e:	4b47      	ldr	r3, [pc, #284]	; (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d115      	bne.n	8005056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e07f      	b.n	800512e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d107      	bne.n	8005046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005036:	4b41      	ldr	r3, [pc, #260]	; (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d109      	bne.n	8005056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e073      	b.n	800512e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005046:	4b3d      	ldr	r3, [pc, #244]	; (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e06b      	b.n	800512e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005056:	4b39      	ldr	r3, [pc, #228]	; (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f023 0203 	bic.w	r2, r3, #3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	4936      	ldr	r1, [pc, #216]	; (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8005064:	4313      	orrs	r3, r2
 8005066:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005068:	f7fd fd52 	bl	8002b10 <HAL_GetTick>
 800506c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506e:	e00a      	b.n	8005086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005070:	f7fd fd4e 	bl	8002b10 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	; 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e053      	b.n	800512e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005086:	4b2d      	ldr	r3, [pc, #180]	; (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f003 020c 	and.w	r2, r3, #12
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	429a      	cmp	r2, r3
 8005096:	d1eb      	bne.n	8005070 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005098:	4b27      	ldr	r3, [pc, #156]	; (8005138 <HAL_RCC_ClockConfig+0x1c0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d210      	bcs.n	80050c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a6:	4b24      	ldr	r3, [pc, #144]	; (8005138 <HAL_RCC_ClockConfig+0x1c0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 0207 	bic.w	r2, r3, #7
 80050ae:	4922      	ldr	r1, [pc, #136]	; (8005138 <HAL_RCC_ClockConfig+0x1c0>)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b6:	4b20      	ldr	r3, [pc, #128]	; (8005138 <HAL_RCC_ClockConfig+0x1c0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d001      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e032      	b.n	800512e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050d4:	4b19      	ldr	r3, [pc, #100]	; (800513c <HAL_RCC_ClockConfig+0x1c4>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	4916      	ldr	r1, [pc, #88]	; (800513c <HAL_RCC_ClockConfig+0x1c4>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d009      	beq.n	8005106 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050f2:	4b12      	ldr	r3, [pc, #72]	; (800513c <HAL_RCC_ClockConfig+0x1c4>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	490e      	ldr	r1, [pc, #56]	; (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8005102:	4313      	orrs	r3, r2
 8005104:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005106:	f000 f821 	bl	800514c <HAL_RCC_GetSysClockFreq>
 800510a:	4602      	mov	r2, r0
 800510c:	4b0b      	ldr	r3, [pc, #44]	; (800513c <HAL_RCC_ClockConfig+0x1c4>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	091b      	lsrs	r3, r3, #4
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	490a      	ldr	r1, [pc, #40]	; (8005140 <HAL_RCC_ClockConfig+0x1c8>)
 8005118:	5ccb      	ldrb	r3, [r1, r3]
 800511a:	fa22 f303 	lsr.w	r3, r2, r3
 800511e:	4a09      	ldr	r2, [pc, #36]	; (8005144 <HAL_RCC_ClockConfig+0x1cc>)
 8005120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005122:	4b09      	ldr	r3, [pc, #36]	; (8005148 <HAL_RCC_ClockConfig+0x1d0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f7fd fcb0 	bl	8002a8c <HAL_InitTick>

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	40022000 	.word	0x40022000
 800513c:	40021000 	.word	0x40021000
 8005140:	0800dbd4 	.word	0x0800dbd4
 8005144:	2000006c 	.word	0x2000006c
 8005148:	20000070 	.word	0x20000070

0800514c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800514c:	b490      	push	{r4, r7}
 800514e:	b08a      	sub	sp, #40	; 0x28
 8005150:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005152:	4b29      	ldr	r3, [pc, #164]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xac>)
 8005154:	1d3c      	adds	r4, r7, #4
 8005156:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005158:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800515c:	f240 2301 	movw	r3, #513	; 0x201
 8005160:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	61fb      	str	r3, [r7, #28]
 8005166:	2300      	movs	r3, #0
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	2300      	movs	r3, #0
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005176:	4b21      	ldr	r3, [pc, #132]	; (80051fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f003 030c 	and.w	r3, r3, #12
 8005182:	2b04      	cmp	r3, #4
 8005184:	d002      	beq.n	800518c <HAL_RCC_GetSysClockFreq+0x40>
 8005186:	2b08      	cmp	r3, #8
 8005188:	d003      	beq.n	8005192 <HAL_RCC_GetSysClockFreq+0x46>
 800518a:	e02b      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800518c:	4b1c      	ldr	r3, [pc, #112]	; (8005200 <HAL_RCC_GetSysClockFreq+0xb4>)
 800518e:	623b      	str	r3, [r7, #32]
      break;
 8005190:	e02b      	b.n	80051ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	0c9b      	lsrs	r3, r3, #18
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	3328      	adds	r3, #40	; 0x28
 800519c:	443b      	add	r3, r7
 800519e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80051a2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d012      	beq.n	80051d4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051ae:	4b13      	ldr	r3, [pc, #76]	; (80051fc <HAL_RCC_GetSysClockFreq+0xb0>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	0c5b      	lsrs	r3, r3, #17
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	3328      	adds	r3, #40	; 0x28
 80051ba:	443b      	add	r3, r7
 80051bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80051c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	4a0e      	ldr	r2, [pc, #56]	; (8005200 <HAL_RCC_GetSysClockFreq+0xb4>)
 80051c6:	fb03 f202 	mul.w	r2, r3, r2
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
 80051d2:	e004      	b.n	80051de <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	4a0b      	ldr	r2, [pc, #44]	; (8005204 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051d8:	fb02 f303 	mul.w	r3, r2, r3
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	623b      	str	r3, [r7, #32]
      break;
 80051e2:	e002      	b.n	80051ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051e4:	4b06      	ldr	r3, [pc, #24]	; (8005200 <HAL_RCC_GetSysClockFreq+0xb4>)
 80051e6:	623b      	str	r3, [r7, #32]
      break;
 80051e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ea:	6a3b      	ldr	r3, [r7, #32]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3728      	adds	r7, #40	; 0x28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc90      	pop	{r4, r7}
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	0800da90 	.word	0x0800da90
 80051fc:	40021000 	.word	0x40021000
 8005200:	007a1200 	.word	0x007a1200
 8005204:	003d0900 	.word	0x003d0900

08005208 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005210:	4b0a      	ldr	r3, [pc, #40]	; (800523c <RCC_Delay+0x34>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a0a      	ldr	r2, [pc, #40]	; (8005240 <RCC_Delay+0x38>)
 8005216:	fba2 2303 	umull	r2, r3, r2, r3
 800521a:	0a5b      	lsrs	r3, r3, #9
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	fb02 f303 	mul.w	r3, r2, r3
 8005222:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005224:	bf00      	nop
  }
  while (Delay --);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1e5a      	subs	r2, r3, #1
 800522a:	60fa      	str	r2, [r7, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1f9      	bne.n	8005224 <RCC_Delay+0x1c>
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr
 800523c:	2000006c 	.word	0x2000006c
 8005240:	10624dd3 	.word	0x10624dd3

08005244 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d07d      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005260:	2300      	movs	r3, #0
 8005262:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005264:	4b4f      	ldr	r3, [pc, #316]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10d      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005270:	4b4c      	ldr	r3, [pc, #304]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	4a4b      	ldr	r2, [pc, #300]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527a:	61d3      	str	r3, [r2, #28]
 800527c:	4b49      	ldr	r3, [pc, #292]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005288:	2301      	movs	r3, #1
 800528a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528c:	4b46      	ldr	r3, [pc, #280]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d118      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005298:	4b43      	ldr	r3, [pc, #268]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a42      	ldr	r2, [pc, #264]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800529e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a4:	f7fd fc34 	bl	8002b10 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052aa:	e008      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ac:	f7fd fc30 	bl	8002b10 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b64      	cmp	r3, #100	; 0x64
 80052b8:	d901      	bls.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e06d      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052be:	4b3a      	ldr	r3, [pc, #232]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0f0      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052ca:	4b36      	ldr	r3, [pc, #216]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d02e      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d027      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052e8:	4b2e      	ldr	r3, [pc, #184]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052f2:	4b2e      	ldr	r3, [pc, #184]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052f8:	4b2c      	ldr	r3, [pc, #176]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052fe:	4a29      	ldr	r2, [pc, #164]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d014      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530e:	f7fd fbff 	bl	8002b10 <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005314:	e00a      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005316:	f7fd fbfb 	bl	8002b10 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	f241 3288 	movw	r2, #5000	; 0x1388
 8005324:	4293      	cmp	r3, r2
 8005326:	d901      	bls.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e036      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532c:	4b1d      	ldr	r3, [pc, #116]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0ee      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005338:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	4917      	ldr	r1, [pc, #92]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005346:	4313      	orrs	r3, r2
 8005348:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800534a:	7dfb      	ldrb	r3, [r7, #23]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d105      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005350:	4b14      	ldr	r3, [pc, #80]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	4a13      	ldr	r2, [pc, #76]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800535a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005368:	4b0e      	ldr	r3, [pc, #56]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	490b      	ldr	r1, [pc, #44]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005376:	4313      	orrs	r3, r2
 8005378:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0310 	and.w	r3, r3, #16
 8005382:	2b00      	cmp	r3, #0
 8005384:	d008      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005386:	4b07      	ldr	r3, [pc, #28]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	4904      	ldr	r1, [pc, #16]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005394:	4313      	orrs	r3, r2
 8005396:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40021000 	.word	0x40021000
 80053a8:	40007000 	.word	0x40007000
 80053ac:	42420440 	.word	0x42420440

080053b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e041      	b.n	8005446 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fc fbf2 	bl	8001bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3304      	adds	r3, #4
 80053ec:	4619      	mov	r1, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	f000 fe0c 	bl	800600c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b082      	sub	sp, #8
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e041      	b.n	80054e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d106      	bne.n	800547a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f839 	bl	80054ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3304      	adds	r3, #4
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f000 fdbd 	bl	800600c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr
	...

08005500 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d109      	bne.n	8005524 <HAL_TIM_PWM_Start+0x24>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	bf14      	ite	ne
 800551c:	2301      	movne	r3, #1
 800551e:	2300      	moveq	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	e022      	b.n	800556a <HAL_TIM_PWM_Start+0x6a>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b04      	cmp	r3, #4
 8005528:	d109      	bne.n	800553e <HAL_TIM_PWM_Start+0x3e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	bf14      	ite	ne
 8005536:	2301      	movne	r3, #1
 8005538:	2300      	moveq	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	e015      	b.n	800556a <HAL_TIM_PWM_Start+0x6a>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b08      	cmp	r3, #8
 8005542:	d109      	bne.n	8005558 <HAL_TIM_PWM_Start+0x58>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b01      	cmp	r3, #1
 800554e:	bf14      	ite	ne
 8005550:	2301      	movne	r3, #1
 8005552:	2300      	moveq	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	e008      	b.n	800556a <HAL_TIM_PWM_Start+0x6a>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	bf14      	ite	ne
 8005564:	2301      	movne	r3, #1
 8005566:	2300      	moveq	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e05e      	b.n	8005630 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <HAL_TIM_PWM_Start+0x82>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005580:	e013      	b.n	80055aa <HAL_TIM_PWM_Start+0xaa>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b04      	cmp	r3, #4
 8005586:	d104      	bne.n	8005592 <HAL_TIM_PWM_Start+0x92>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005590:	e00b      	b.n	80055aa <HAL_TIM_PWM_Start+0xaa>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d104      	bne.n	80055a2 <HAL_TIM_PWM_Start+0xa2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055a0:	e003      	b.n	80055aa <HAL_TIM_PWM_Start+0xaa>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2202      	movs	r2, #2
 80055a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2201      	movs	r2, #1
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 f8b7 	bl	8006726 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a1e      	ldr	r2, [pc, #120]	; (8005638 <HAL_TIM_PWM_Start+0x138>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d107      	bne.n	80055d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a18      	ldr	r2, [pc, #96]	; (8005638 <HAL_TIM_PWM_Start+0x138>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00e      	beq.n	80055fa <HAL_TIM_PWM_Start+0xfa>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e4:	d009      	beq.n	80055fa <HAL_TIM_PWM_Start+0xfa>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a14      	ldr	r2, [pc, #80]	; (800563c <HAL_TIM_PWM_Start+0x13c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d004      	beq.n	80055fa <HAL_TIM_PWM_Start+0xfa>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a12      	ldr	r2, [pc, #72]	; (8005640 <HAL_TIM_PWM_Start+0x140>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d111      	bne.n	800561e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b06      	cmp	r3, #6
 800560a:	d010      	beq.n	800562e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0201 	orr.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800561c:	e007      	b.n	800562e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f042 0201 	orr.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40012c00 	.word	0x40012c00
 800563c:	40000400 	.word	0x40000400
 8005640:	40000800 	.word	0x40000800

08005644 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e041      	b.n	80056da <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d106      	bne.n	8005670 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f839 	bl	80056e2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3304      	adds	r3, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f000 fcc2 	bl	800600c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr

080056f4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <HAL_TIM_IC_Start_IT+0x1a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800570a:	b2db      	uxtb	r3, r3
 800570c:	e013      	b.n	8005736 <HAL_TIM_IC_Start_IT+0x42>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b04      	cmp	r3, #4
 8005712:	d104      	bne.n	800571e <HAL_TIM_IC_Start_IT+0x2a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800571a:	b2db      	uxtb	r3, r3
 800571c:	e00b      	b.n	8005736 <HAL_TIM_IC_Start_IT+0x42>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b08      	cmp	r3, #8
 8005722:	d104      	bne.n	800572e <HAL_TIM_IC_Start_IT+0x3a>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800572a:	b2db      	uxtb	r3, r3
 800572c:	e003      	b.n	8005736 <HAL_TIM_IC_Start_IT+0x42>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005734:	b2db      	uxtb	r3, r3
 8005736:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d104      	bne.n	8005748 <HAL_TIM_IC_Start_IT+0x54>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005744:	b2db      	uxtb	r3, r3
 8005746:	e013      	b.n	8005770 <HAL_TIM_IC_Start_IT+0x7c>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b04      	cmp	r3, #4
 800574c:	d104      	bne.n	8005758 <HAL_TIM_IC_Start_IT+0x64>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005754:	b2db      	uxtb	r3, r3
 8005756:	e00b      	b.n	8005770 <HAL_TIM_IC_Start_IT+0x7c>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b08      	cmp	r3, #8
 800575c:	d104      	bne.n	8005768 <HAL_TIM_IC_Start_IT+0x74>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005764:	b2db      	uxtb	r3, r3
 8005766:	e003      	b.n	8005770 <HAL_TIM_IC_Start_IT+0x7c>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800576e:	b2db      	uxtb	r3, r3
 8005770:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005772:	7bfb      	ldrb	r3, [r7, #15]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d102      	bne.n	800577e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005778:	7bbb      	ldrb	r3, [r7, #14]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d001      	beq.n	8005782 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e0b3      	b.n	80058ea <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d104      	bne.n	8005792 <HAL_TIM_IC_Start_IT+0x9e>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005790:	e013      	b.n	80057ba <HAL_TIM_IC_Start_IT+0xc6>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b04      	cmp	r3, #4
 8005796:	d104      	bne.n	80057a2 <HAL_TIM_IC_Start_IT+0xae>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057a0:	e00b      	b.n	80057ba <HAL_TIM_IC_Start_IT+0xc6>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d104      	bne.n	80057b2 <HAL_TIM_IC_Start_IT+0xbe>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057b0:	e003      	b.n	80057ba <HAL_TIM_IC_Start_IT+0xc6>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2202      	movs	r2, #2
 80057b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d104      	bne.n	80057ca <HAL_TIM_IC_Start_IT+0xd6>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057c8:	e013      	b.n	80057f2 <HAL_TIM_IC_Start_IT+0xfe>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d104      	bne.n	80057da <HAL_TIM_IC_Start_IT+0xe6>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057d8:	e00b      	b.n	80057f2 <HAL_TIM_IC_Start_IT+0xfe>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d104      	bne.n	80057ea <HAL_TIM_IC_Start_IT+0xf6>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057e8:	e003      	b.n	80057f2 <HAL_TIM_IC_Start_IT+0xfe>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2202      	movs	r2, #2
 80057ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b0c      	cmp	r3, #12
 80057f6:	d841      	bhi.n	800587c <HAL_TIM_IC_Start_IT+0x188>
 80057f8:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <HAL_TIM_IC_Start_IT+0x10c>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005835 	.word	0x08005835
 8005804:	0800587d 	.word	0x0800587d
 8005808:	0800587d 	.word	0x0800587d
 800580c:	0800587d 	.word	0x0800587d
 8005810:	08005847 	.word	0x08005847
 8005814:	0800587d 	.word	0x0800587d
 8005818:	0800587d 	.word	0x0800587d
 800581c:	0800587d 	.word	0x0800587d
 8005820:	08005859 	.word	0x08005859
 8005824:	0800587d 	.word	0x0800587d
 8005828:	0800587d 	.word	0x0800587d
 800582c:	0800587d 	.word	0x0800587d
 8005830:	0800586b 	.word	0x0800586b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0202 	orr.w	r2, r2, #2
 8005842:	60da      	str	r2, [r3, #12]
      break;
 8005844:	e01b      	b.n	800587e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f042 0204 	orr.w	r2, r2, #4
 8005854:	60da      	str	r2, [r3, #12]
      break;
 8005856:	e012      	b.n	800587e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0208 	orr.w	r2, r2, #8
 8005866:	60da      	str	r2, [r3, #12]
      break;
 8005868:	e009      	b.n	800587e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0210 	orr.w	r2, r2, #16
 8005878:	60da      	str	r2, [r3, #12]
      break;
 800587a:	e000      	b.n	800587e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800587c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2201      	movs	r2, #1
 8005884:	6839      	ldr	r1, [r7, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 ff4d 	bl	8006726 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a18      	ldr	r2, [pc, #96]	; (80058f4 <HAL_TIM_IC_Start_IT+0x200>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00e      	beq.n	80058b4 <HAL_TIM_IC_Start_IT+0x1c0>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589e:	d009      	beq.n	80058b4 <HAL_TIM_IC_Start_IT+0x1c0>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a14      	ldr	r2, [pc, #80]	; (80058f8 <HAL_TIM_IC_Start_IT+0x204>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d004      	beq.n	80058b4 <HAL_TIM_IC_Start_IT+0x1c0>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a13      	ldr	r2, [pc, #76]	; (80058fc <HAL_TIM_IC_Start_IT+0x208>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d111      	bne.n	80058d8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2b06      	cmp	r3, #6
 80058c4:	d010      	beq.n	80058e8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f042 0201 	orr.w	r2, r2, #1
 80058d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d6:	e007      	b.n	80058e8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40012c00 	.word	0x40012c00
 80058f8:	40000400 	.word	0x40000400
 80058fc:	40000800 	.word	0x40000800

08005900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b02      	cmp	r3, #2
 8005914:	d122      	bne.n	800595c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b02      	cmp	r3, #2
 8005922:	d11b      	bne.n	800595c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0202 	mvn.w	r2, #2
 800592c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fc f87c 	bl	8001a40 <HAL_TIM_IC_CaptureCallback>
 8005948:	e005      	b.n	8005956 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fb43 	bl	8005fd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fb49 	bl	8005fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	2b04      	cmp	r3, #4
 8005968:	d122      	bne.n	80059b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b04      	cmp	r3, #4
 8005976:	d11b      	bne.n	80059b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f06f 0204 	mvn.w	r2, #4
 8005980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2202      	movs	r2, #2
 8005986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fc f852 	bl	8001a40 <HAL_TIM_IC_CaptureCallback>
 800599c:	e005      	b.n	80059aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fb19 	bl	8005fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fb1f 	bl	8005fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d122      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d11b      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f06f 0208 	mvn.w	r2, #8
 80059d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2204      	movs	r2, #4
 80059da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fc f828 	bl	8001a40 <HAL_TIM_IC_CaptureCallback>
 80059f0:	e005      	b.n	80059fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 faef 	bl	8005fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 faf5 	bl	8005fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0310 	and.w	r3, r3, #16
 8005a0e:	2b10      	cmp	r3, #16
 8005a10:	d122      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	2b10      	cmp	r3, #16
 8005a1e:	d11b      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f06f 0210 	mvn.w	r2, #16
 8005a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2208      	movs	r2, #8
 8005a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fb fffe 	bl	8001a40 <HAL_TIM_IC_CaptureCallback>
 8005a44:	e005      	b.n	8005a52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fac5 	bl	8005fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 facb 	bl	8005fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d10e      	bne.n	8005a84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d107      	bne.n	8005a84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0201 	mvn.w	r2, #1
 8005a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 faa0 	bl	8005fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8e:	2b80      	cmp	r3, #128	; 0x80
 8005a90:	d10e      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9c:	2b80      	cmp	r3, #128	; 0x80
 8005a9e:	d107      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fec7 	bl	800683e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aba:	2b40      	cmp	r3, #64	; 0x40
 8005abc:	d10e      	bne.n	8005adc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac8:	2b40      	cmp	r3, #64	; 0x40
 8005aca:	d107      	bne.n	8005adc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fa8f 	bl	8005ffa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b20      	cmp	r3, #32
 8005ae8:	d10e      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d107      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0220 	mvn.w	r2, #32
 8005b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fe92 	bl	800682c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b08:	bf00      	nop
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <HAL_TIM_IC_ConfigChannel+0x1a>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e082      	b.n	8005c30 <HAL_TIM_IC_ConfigChannel+0x120>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d11b      	bne.n	8005b70 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6818      	ldr	r0, [r3, #0]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	6819      	ldr	r1, [r3, #0]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f000 fc4a 	bl	80063e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 020c 	bic.w	r2, r2, #12
 8005b5a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6999      	ldr	r1, [r3, #24]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	619a      	str	r2, [r3, #24]
 8005b6e:	e05a      	b.n	8005c26 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d11c      	bne.n	8005bb0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6819      	ldr	r1, [r3, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f000 fcb3 	bl	80064f0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	699a      	ldr	r2, [r3, #24]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b98:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6999      	ldr	r1, [r3, #24]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	021a      	lsls	r2, r3, #8
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	619a      	str	r2, [r3, #24]
 8005bae:	e03a      	b.n	8005c26 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d11b      	bne.n	8005bee <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6819      	ldr	r1, [r3, #0]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f000 fcfe 	bl	80065c6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 020c 	bic.w	r2, r2, #12
 8005bd8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69d9      	ldr	r1, [r3, #28]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	61da      	str	r2, [r3, #28]
 8005bec:	e01b      	b.n	8005c26 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	6819      	ldr	r1, [r3, #0]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f000 fd1d 	bl	800663c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69da      	ldr	r2, [r3, #28]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c10:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69d9      	ldr	r1, [r3, #28]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	021a      	lsls	r2, r3, #8
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d101      	bne.n	8005c52 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	e0ac      	b.n	8005dac <HAL_TIM_PWM_ConfigChannel+0x174>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b0c      	cmp	r3, #12
 8005c5e:	f200 809f 	bhi.w	8005da0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005c62:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005c9d 	.word	0x08005c9d
 8005c6c:	08005da1 	.word	0x08005da1
 8005c70:	08005da1 	.word	0x08005da1
 8005c74:	08005da1 	.word	0x08005da1
 8005c78:	08005cdd 	.word	0x08005cdd
 8005c7c:	08005da1 	.word	0x08005da1
 8005c80:	08005da1 	.word	0x08005da1
 8005c84:	08005da1 	.word	0x08005da1
 8005c88:	08005d1f 	.word	0x08005d1f
 8005c8c:	08005da1 	.word	0x08005da1
 8005c90:	08005da1 	.word	0x08005da1
 8005c94:	08005da1 	.word	0x08005da1
 8005c98:	08005d5f 	.word	0x08005d5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fa14 	bl	80060d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0208 	orr.w	r2, r2, #8
 8005cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0204 	bic.w	r2, r2, #4
 8005cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6999      	ldr	r1, [r3, #24]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	619a      	str	r2, [r3, #24]
      break;
 8005cda:	e062      	b.n	8005da2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fa5a 	bl	800619c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6999      	ldr	r1, [r3, #24]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	021a      	lsls	r2, r3, #8
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	619a      	str	r2, [r3, #24]
      break;
 8005d1c:	e041      	b.n	8005da2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68b9      	ldr	r1, [r7, #8]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 faa3 	bl	8006270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69da      	ldr	r2, [r3, #28]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f042 0208 	orr.w	r2, r2, #8
 8005d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0204 	bic.w	r2, r2, #4
 8005d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69d9      	ldr	r1, [r3, #28]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	61da      	str	r2, [r3, #28]
      break;
 8005d5c:	e021      	b.n	8005da2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68b9      	ldr	r1, [r7, #8]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 faed 	bl	8006344 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69da      	ldr	r2, [r3, #28]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69da      	ldr	r2, [r3, #28]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69d9      	ldr	r1, [r3, #28]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	021a      	lsls	r2, r3, #8
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	61da      	str	r2, [r3, #28]
      break;
 8005d9e:	e000      	b.n	8005da2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005da0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_TIM_ConfigClockSource+0x18>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e0b3      	b.n	8005f34 <HAL_TIM_ConfigClockSource+0x180>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005dea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005df2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e04:	d03e      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0xd0>
 8005e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e0a:	f200 8087 	bhi.w	8005f1c <HAL_TIM_ConfigClockSource+0x168>
 8005e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e12:	f000 8085 	beq.w	8005f20 <HAL_TIM_ConfigClockSource+0x16c>
 8005e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e1a:	d87f      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x168>
 8005e1c:	2b70      	cmp	r3, #112	; 0x70
 8005e1e:	d01a      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0xa2>
 8005e20:	2b70      	cmp	r3, #112	; 0x70
 8005e22:	d87b      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x168>
 8005e24:	2b60      	cmp	r3, #96	; 0x60
 8005e26:	d050      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x116>
 8005e28:	2b60      	cmp	r3, #96	; 0x60
 8005e2a:	d877      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x168>
 8005e2c:	2b50      	cmp	r3, #80	; 0x50
 8005e2e:	d03c      	beq.n	8005eaa <HAL_TIM_ConfigClockSource+0xf6>
 8005e30:	2b50      	cmp	r3, #80	; 0x50
 8005e32:	d873      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x168>
 8005e34:	2b40      	cmp	r3, #64	; 0x40
 8005e36:	d058      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x136>
 8005e38:	2b40      	cmp	r3, #64	; 0x40
 8005e3a:	d86f      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x168>
 8005e3c:	2b30      	cmp	r3, #48	; 0x30
 8005e3e:	d064      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x156>
 8005e40:	2b30      	cmp	r3, #48	; 0x30
 8005e42:	d86b      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x168>
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d060      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x156>
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	d867      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x168>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d05c      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x156>
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d05a      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005e54:	e062      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	6899      	ldr	r1, [r3, #8]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f000 fc3f 	bl	80066e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e78:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	609a      	str	r2, [r3, #8]
      break;
 8005e82:	e04e      	b.n	8005f22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6818      	ldr	r0, [r3, #0]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	6899      	ldr	r1, [r3, #8]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f000 fc28 	bl	80066e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ea6:	609a      	str	r2, [r3, #8]
      break;
 8005ea8:	e03b      	b.n	8005f22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	6859      	ldr	r1, [r3, #4]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f000 faec 	bl	8006494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2150      	movs	r1, #80	; 0x50
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fbf6 	bl	80066b4 <TIM_ITRx_SetConfig>
      break;
 8005ec8:	e02b      	b.n	8005f22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6859      	ldr	r1, [r3, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f000 fb46 	bl	8006568 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2160      	movs	r1, #96	; 0x60
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fbe6 	bl	80066b4 <TIM_ITRx_SetConfig>
      break;
 8005ee8:	e01b      	b.n	8005f22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6859      	ldr	r1, [r3, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f000 facc 	bl	8006494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2140      	movs	r1, #64	; 0x40
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fbd6 	bl	80066b4 <TIM_ITRx_SetConfig>
      break;
 8005f08:	e00b      	b.n	8005f22 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f000 fbcd 	bl	80066b4 <TIM_ITRx_SetConfig>
        break;
 8005f1a:	e002      	b.n	8005f22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005f1c:	bf00      	nop
 8005f1e:	e000      	b.n	8005f22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005f20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b0c      	cmp	r3, #12
 8005f4e:	d831      	bhi.n	8005fb4 <HAL_TIM_ReadCapturedValue+0x78>
 8005f50:	a201      	add	r2, pc, #4	; (adr r2, 8005f58 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f56:	bf00      	nop
 8005f58:	08005f8d 	.word	0x08005f8d
 8005f5c:	08005fb5 	.word	0x08005fb5
 8005f60:	08005fb5 	.word	0x08005fb5
 8005f64:	08005fb5 	.word	0x08005fb5
 8005f68:	08005f97 	.word	0x08005f97
 8005f6c:	08005fb5 	.word	0x08005fb5
 8005f70:	08005fb5 	.word	0x08005fb5
 8005f74:	08005fb5 	.word	0x08005fb5
 8005f78:	08005fa1 	.word	0x08005fa1
 8005f7c:	08005fb5 	.word	0x08005fb5
 8005f80:	08005fb5 	.word	0x08005fb5
 8005f84:	08005fb5 	.word	0x08005fb5
 8005f88:	08005fab 	.word	0x08005fab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f92:	60fb      	str	r3, [r7, #12]

      break;
 8005f94:	e00f      	b.n	8005fb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9c:	60fb      	str	r3, [r7, #12]

      break;
 8005f9e:	e00a      	b.n	8005fb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa6:	60fb      	str	r3, [r7, #12]

      break;
 8005fa8:	e005      	b.n	8005fb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	60fb      	str	r3, [r7, #12]

      break;
 8005fb2:	e000      	b.n	8005fb6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005fb4:	bf00      	nop
  }

  return tmpreg;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bc80      	pop	{r7}
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop

08005fc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bc80      	pop	{r7}
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bc80      	pop	{r7}
 8005ff8:	4770      	bx	lr

08005ffa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	bc80      	pop	{r7}
 800600a:	4770      	bx	lr

0800600c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a29      	ldr	r2, [pc, #164]	; (80060c4 <TIM_Base_SetConfig+0xb8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d00b      	beq.n	800603c <TIM_Base_SetConfig+0x30>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602a:	d007      	beq.n	800603c <TIM_Base_SetConfig+0x30>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a26      	ldr	r2, [pc, #152]	; (80060c8 <TIM_Base_SetConfig+0xbc>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d003      	beq.n	800603c <TIM_Base_SetConfig+0x30>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a25      	ldr	r2, [pc, #148]	; (80060cc <TIM_Base_SetConfig+0xc0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d108      	bne.n	800604e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a1c      	ldr	r2, [pc, #112]	; (80060c4 <TIM_Base_SetConfig+0xb8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00b      	beq.n	800606e <TIM_Base_SetConfig+0x62>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605c:	d007      	beq.n	800606e <TIM_Base_SetConfig+0x62>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a19      	ldr	r2, [pc, #100]	; (80060c8 <TIM_Base_SetConfig+0xbc>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d003      	beq.n	800606e <TIM_Base_SetConfig+0x62>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a18      	ldr	r2, [pc, #96]	; (80060cc <TIM_Base_SetConfig+0xc0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d108      	bne.n	8006080 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4313      	orrs	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a07      	ldr	r2, [pc, #28]	; (80060c4 <TIM_Base_SetConfig+0xb8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d103      	bne.n	80060b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	615a      	str	r2, [r3, #20]
}
 80060ba:	bf00      	nop
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr
 80060c4:	40012c00 	.word	0x40012c00
 80060c8:	40000400 	.word	0x40000400
 80060cc:	40000800 	.word	0x40000800

080060d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	f023 0201 	bic.w	r2, r3, #1
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0303 	bic.w	r3, r3, #3
 8006106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f023 0302 	bic.w	r3, r3, #2
 8006118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	4313      	orrs	r3, r2
 8006122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a1c      	ldr	r2, [pc, #112]	; (8006198 <TIM_OC1_SetConfig+0xc8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d10c      	bne.n	8006146 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f023 0308 	bic.w	r3, r3, #8
 8006132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f023 0304 	bic.w	r3, r3, #4
 8006144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a13      	ldr	r2, [pc, #76]	; (8006198 <TIM_OC1_SetConfig+0xc8>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d111      	bne.n	8006172 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800615c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	621a      	str	r2, [r3, #32]
}
 800618c:	bf00      	nop
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	bc80      	pop	{r7}
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	40012c00 	.word	0x40012c00

0800619c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f023 0210 	bic.w	r2, r3, #16
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	021b      	lsls	r3, r3, #8
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	4313      	orrs	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f023 0320 	bic.w	r3, r3, #32
 80061e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a1d      	ldr	r2, [pc, #116]	; (800626c <TIM_OC2_SetConfig+0xd0>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d10d      	bne.n	8006218 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	011b      	lsls	r3, r3, #4
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006216:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a14      	ldr	r2, [pc, #80]	; (800626c <TIM_OC2_SetConfig+0xd0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d113      	bne.n	8006248 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006226:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800622e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	621a      	str	r2, [r3, #32]
}
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr
 800626c:	40012c00 	.word	0x40012c00

08006270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0303 	bic.w	r3, r3, #3
 80062a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	021b      	lsls	r3, r3, #8
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a1d      	ldr	r2, [pc, #116]	; (8006340 <TIM_OC3_SetConfig+0xd0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d10d      	bne.n	80062ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a14      	ldr	r2, [pc, #80]	; (8006340 <TIM_OC3_SetConfig+0xd0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d113      	bne.n	800631a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	011b      	lsls	r3, r3, #4
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	4313      	orrs	r3, r2
 8006318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	621a      	str	r2, [r3, #32]
}
 8006334:	bf00      	nop
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	bc80      	pop	{r7}
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40012c00 	.word	0x40012c00

08006344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800637a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	021b      	lsls	r3, r3, #8
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800638e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	031b      	lsls	r3, r3, #12
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a0f      	ldr	r2, [pc, #60]	; (80063dc <TIM_OC4_SetConfig+0x98>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d109      	bne.n	80063b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	019b      	lsls	r3, r3, #6
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	621a      	str	r2, [r3, #32]
}
 80063d2:	bf00      	nop
 80063d4:	371c      	adds	r7, #28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr
 80063dc:	40012c00 	.word	0x40012c00

080063e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	f023 0201 	bic.w	r2, r3, #1
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4a1f      	ldr	r2, [pc, #124]	; (8006488 <TIM_TI1_SetConfig+0xa8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00b      	beq.n	8006426 <TIM_TI1_SetConfig+0x46>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006414:	d007      	beq.n	8006426 <TIM_TI1_SetConfig+0x46>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4a1c      	ldr	r2, [pc, #112]	; (800648c <TIM_TI1_SetConfig+0xac>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d003      	beq.n	8006426 <TIM_TI1_SetConfig+0x46>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4a1b      	ldr	r2, [pc, #108]	; (8006490 <TIM_TI1_SetConfig+0xb0>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d101      	bne.n	800642a <TIM_TI1_SetConfig+0x4a>
 8006426:	2301      	movs	r3, #1
 8006428:	e000      	b.n	800642c <TIM_TI1_SetConfig+0x4c>
 800642a:	2300      	movs	r3, #0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d008      	beq.n	8006442 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f023 0303 	bic.w	r3, r3, #3
 8006436:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4313      	orrs	r3, r2
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	e003      	b.n	800644a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f043 0301 	orr.w	r3, r3, #1
 8006448:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	b2db      	uxtb	r3, r3
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	4313      	orrs	r3, r2
 800645c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f023 030a 	bic.w	r3, r3, #10
 8006464:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f003 030a 	and.w	r3, r3, #10
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	bc80      	pop	{r7}
 8006486:	4770      	bx	lr
 8006488:	40012c00 	.word	0x40012c00
 800648c:	40000400 	.word	0x40000400
 8006490:	40000800 	.word	0x40000800

08006494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f023 0201 	bic.w	r2, r3, #1
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f023 030a 	bic.w	r3, r3, #10
 80064d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bc80      	pop	{r7}
 80064ee:	4770      	bx	lr

080064f0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
 80064fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f023 0210 	bic.w	r2, r3, #16
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	021b      	lsls	r3, r3, #8
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800652e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	031b      	lsls	r3, r3, #12
 8006534:	b29b      	uxth	r3, r3
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006542:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	011b      	lsls	r3, r3, #4
 8006548:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4313      	orrs	r3, r2
 8006550:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr

08006568 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	f023 0210 	bic.w	r2, r3, #16
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006592:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	031b      	lsls	r3, r3, #12
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	621a      	str	r2, [r3, #32]
}
 80065bc:	bf00      	nop
 80065be:	371c      	adds	r7, #28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bc80      	pop	{r7}
 80065c4:	4770      	bx	lr

080065c6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b087      	sub	sp, #28
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	607a      	str	r2, [r7, #4]
 80065d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f023 0303 	bic.w	r3, r3, #3
 80065f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006602:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	b2db      	uxtb	r3, r3
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006616:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4313      	orrs	r3, r2
 8006624:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	621a      	str	r2, [r3, #32]
}
 8006632:	bf00      	nop
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr

0800663c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006668:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800667a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	031b      	lsls	r3, r3, #12
 8006680:	b29b      	uxth	r3, r3
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800668e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	031b      	lsls	r3, r3, #12
 8006694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	4313      	orrs	r3, r2
 800669c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	621a      	str	r2, [r3, #32]
}
 80066aa:	bf00      	nop
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr

080066b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	f043 0307 	orr.w	r3, r3, #7
 80066d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	609a      	str	r2, [r3, #8]
}
 80066de:	bf00      	nop
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bc80      	pop	{r7}
 80066e6:	4770      	bx	lr

080066e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	021a      	lsls	r2, r3, #8
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	431a      	orrs	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4313      	orrs	r3, r2
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	609a      	str	r2, [r3, #8]
}
 800671c:	bf00      	nop
 800671e:	371c      	adds	r7, #28
 8006720:	46bd      	mov	sp, r7
 8006722:	bc80      	pop	{r7}
 8006724:	4770      	bx	lr

08006726 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006726:	b480      	push	{r7}
 8006728:	b087      	sub	sp, #28
 800672a:	af00      	add	r7, sp, #0
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f003 031f 	and.w	r3, r3, #31
 8006738:	2201      	movs	r2, #1
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6a1a      	ldr	r2, [r3, #32]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	43db      	mvns	r3, r3
 8006748:	401a      	ands	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6a1a      	ldr	r2, [r3, #32]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f003 031f 	and.w	r3, r3, #31
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	fa01 f303 	lsl.w	r3, r1, r3
 800675e:	431a      	orrs	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	621a      	str	r2, [r3, #32]
}
 8006764:	bf00      	nop
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr
	...

08006770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006784:	2302      	movs	r3, #2
 8006786:	e046      	b.n	8006816 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a16      	ldr	r2, [pc, #88]	; (8006820 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d00e      	beq.n	80067ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d4:	d009      	beq.n	80067ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a12      	ldr	r2, [pc, #72]	; (8006824 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d004      	beq.n	80067ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a10      	ldr	r2, [pc, #64]	; (8006828 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d10c      	bne.n	8006804 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr
 8006820:	40012c00 	.word	0x40012c00
 8006824:	40000400 	.word	0x40000400
 8006828:	40000800 	.word	0x40000800

0800682c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	bc80      	pop	{r7}
 800683c:	4770      	bx	lr

0800683e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800683e:	b480      	push	{r7}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	bc80      	pop	{r7}
 800684e:	4770      	bx	lr

08006850 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006850:	b084      	sub	sp, #16
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	f107 0014 	add.w	r0, r7, #20
 800685e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	bc80      	pop	{r7}
 800686c:	b004      	add	sp, #16
 800686e:	4770      	bx	lr

08006870 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006880:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006884:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	b29a      	uxth	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	bc80      	pop	{r7}
 800689a:	4770      	bx	lr

0800689c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80068a4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80068a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	43db      	mvns	r3, r3
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	4013      	ands	r3, r2
 80068bc:	b29a      	uxth	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bc80      	pop	{r7}
 80068ce:	4770      	bx	lr

080068d0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bc80      	pop	{r7}
 80068e6:	4770      	bx	lr

080068e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80068e8:	b084      	sub	sp, #16
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	f107 0014 	add.w	r0, r7, #20
 80068f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	bc80      	pop	{r7}
 8006924:	b004      	add	sp, #16
 8006926:	4770      	bx	lr

08006928 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006928:	b480      	push	{r7}
 800692a:	b09b      	sub	sp, #108	; 0x6c
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800694a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	78db      	ldrb	r3, [r3, #3]
 8006956:	2b03      	cmp	r3, #3
 8006958:	d81f      	bhi.n	800699a <USB_ActivateEndpoint+0x72>
 800695a:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <USB_ActivateEndpoint+0x38>)
 800695c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006960:	08006971 	.word	0x08006971
 8006964:	0800698d 	.word	0x0800698d
 8006968:	080069a3 	.word	0x080069a3
 800696c:	0800697f 	.word	0x0800697f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006970:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006974:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006978:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800697c:	e012      	b.n	80069a4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800697e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006982:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006986:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800698a:	e00b      	b.n	80069a4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800698c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006990:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006994:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006998:	e004      	b.n	80069a4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80069a0:	e000      	b.n	80069a4 <USB_ActivateEndpoint+0x7c>
      break;
 80069a2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	441a      	add	r2, r3
 80069ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80069b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069dc:	b29a      	uxth	r2, r3
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	4313      	orrs	r3, r2
 80069e6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	441a      	add	r2, r3
 80069f4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80069f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	7b1b      	ldrb	r3, [r3, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f040 8149 	bne.w	8006ca8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	785b      	ldrb	r3, [r3, #1]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 8084 	beq.w	8006b28 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	4413      	add	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	011a      	lsls	r2, r3, #4
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a42:	613b      	str	r3, [r7, #16]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	88db      	ldrh	r3, [r3, #6]
 8006a48:	085b      	lsrs	r3, r3, #1
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	81fb      	strh	r3, [r7, #14]
 8006a62:	89fb      	ldrh	r3, [r7, #14]
 8006a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01b      	beq.n	8006aa4 <USB_ActivateEndpoint+0x17c>
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a82:	81bb      	strh	r3, [r7, #12]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	441a      	add	r2, r3
 8006a8e:	89bb      	ldrh	r3, [r7, #12]
 8006a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	78db      	ldrb	r3, [r3, #3]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d020      	beq.n	8006aee <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac2:	813b      	strh	r3, [r7, #8]
 8006ac4:	893b      	ldrh	r3, [r7, #8]
 8006ac6:	f083 0320 	eor.w	r3, r3, #32
 8006aca:	813b      	strh	r3, [r7, #8]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	441a      	add	r2, r3
 8006ad6:	893b      	ldrh	r3, [r7, #8]
 8006ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	8013      	strh	r3, [r2, #0]
 8006aec:	e27f      	b.n	8006fee <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b04:	817b      	strh	r3, [r7, #10]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	441a      	add	r2, r3
 8006b10:	897b      	ldrh	r3, [r7, #10]
 8006b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	8013      	strh	r3, [r2, #0]
 8006b26:	e262      	b.n	8006fee <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	461a      	mov	r2, r3
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	4413      	add	r3, r2
 8006b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	011a      	lsls	r2, r3, #4
 8006b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	88db      	ldrh	r3, [r3, #6]
 8006b50:	085b      	lsrs	r3, r3, #1
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	4413      	add	r3, r2
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	011a      	lsls	r2, r3, #4
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	4413      	add	r3, r2
 8006b7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b7e:	623b      	str	r3, [r7, #32]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d112      	bne.n	8006bae <USB_ActivateEndpoint+0x286>
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	801a      	strh	r2, [r3, #0]
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	881b      	ldrh	r3, [r3, #0]
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	801a      	strh	r2, [r3, #0]
 8006bac:	e02f      	b.n	8006c0e <USB_ActivateEndpoint+0x2e6>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	2b3e      	cmp	r3, #62	; 0x3e
 8006bb4:	d813      	bhi.n	8006bde <USB_ActivateEndpoint+0x2b6>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	085b      	lsrs	r3, r3, #1
 8006bbc:	663b      	str	r3, [r7, #96]	; 0x60
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <USB_ActivateEndpoint+0x2a8>
 8006bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bcc:	3301      	adds	r3, #1
 8006bce:	663b      	str	r3, [r7, #96]	; 0x60
 8006bd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	029b      	lsls	r3, r3, #10
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	801a      	strh	r2, [r3, #0]
 8006bdc:	e017      	b.n	8006c0e <USB_ActivateEndpoint+0x2e6>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	095b      	lsrs	r3, r3, #5
 8006be4:	663b      	str	r3, [r7, #96]	; 0x60
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	f003 031f 	and.w	r3, r3, #31
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d102      	bne.n	8006bf8 <USB_ActivateEndpoint+0x2d0>
 8006bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	663b      	str	r3, [r7, #96]	; 0x60
 8006bf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	029b      	lsls	r3, r3, #10
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	83fb      	strh	r3, [r7, #30]
 8006c1c:	8bfb      	ldrh	r3, [r7, #30]
 8006c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d01b      	beq.n	8006c5e <USB_ActivateEndpoint+0x336>
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3c:	83bb      	strh	r3, [r7, #28]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	441a      	add	r2, r3
 8006c48:	8bbb      	ldrh	r3, [r7, #28]
 8006c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c74:	837b      	strh	r3, [r7, #26]
 8006c76:	8b7b      	ldrh	r3, [r7, #26]
 8006c78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c7c:	837b      	strh	r3, [r7, #26]
 8006c7e:	8b7b      	ldrh	r3, [r7, #26]
 8006c80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c84:	837b      	strh	r3, [r7, #26]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	441a      	add	r2, r3
 8006c90:	8b7b      	ldrh	r3, [r7, #26]
 8006c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	8013      	strh	r3, [r2, #0]
 8006ca6:	e1a2      	b.n	8006fee <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cbe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	441a      	add	r2, r3
 8006ccc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cd8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cf4:	4413      	add	r3, r2
 8006cf6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	011a      	lsls	r2, r3, #4
 8006cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d06:	657b      	str	r3, [r7, #84]	; 0x54
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	891b      	ldrh	r3, [r3, #8]
 8006d0c:	085b      	lsrs	r3, r3, #1
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d16:	801a      	strh	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	653b      	str	r3, [r7, #80]	; 0x50
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	461a      	mov	r2, r3
 8006d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d28:	4413      	add	r3, r2
 8006d2a:	653b      	str	r3, [r7, #80]	; 0x50
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	011a      	lsls	r2, r3, #4
 8006d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	895b      	ldrh	r3, [r3, #10]
 8006d40:	085b      	lsrs	r3, r3, #1
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d4a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	785b      	ldrb	r3, [r3, #1]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f040 8091 	bne.w	8006e78 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006d64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d01b      	beq.n	8006da6 <USB_ActivateEndpoint+0x47e>
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d84:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	441a      	add	r2, r3
 8006d90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	873b      	strh	r3, [r7, #56]	; 0x38
 8006db4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d01b      	beq.n	8006df6 <USB_ActivateEndpoint+0x4ce>
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	441a      	add	r2, r3
 8006de0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006e0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e14:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006e16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e1c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	441a      	add	r2, r3
 8006e28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e54:	867b      	strh	r3, [r7, #50]	; 0x32
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	441a      	add	r2, r3
 8006e60:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	8013      	strh	r3, [r2, #0]
 8006e76:	e0ba      	b.n	8006fee <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006e88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01d      	beq.n	8006ed0 <USB_ActivateEndpoint+0x5a8>
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eaa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	441a      	add	r2, r3
 8006eb8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006ee0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01d      	beq.n	8006f28 <USB_ActivateEndpoint+0x600>
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	441a      	add	r2, r3
 8006f10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	78db      	ldrb	r3, [r3, #3]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d024      	beq.n	8006f7a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006f4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006f4e:	f083 0320 	eor.w	r3, r3, #32
 8006f52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	441a      	add	r2, r3
 8006f60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	8013      	strh	r3, [r2, #0]
 8006f78:	e01d      	b.n	8006fb6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	441a      	add	r2, r3
 8006f9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fcc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	441a      	add	r2, r3
 8006fd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006fee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	376c      	adds	r7, #108	; 0x6c
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bc80      	pop	{r7}
 8006ffa:	4770      	bx	lr

08006ffc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b08d      	sub	sp, #52	; 0x34
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	7b1b      	ldrb	r3, [r3, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	f040 808e 	bne.w	800712c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	785b      	ldrb	r3, [r3, #1]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d044      	beq.n	80070a2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	81bb      	strh	r3, [r7, #12]
 8007026:	89bb      	ldrh	r3, [r7, #12]
 8007028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702c:	2b00      	cmp	r3, #0
 800702e:	d01b      	beq.n	8007068 <USB_DeactivateEndpoint+0x6c>
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	b29b      	uxth	r3, r3
 800703e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007046:	817b      	strh	r3, [r7, #10]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	441a      	add	r2, r3
 8007052:	897b      	ldrh	r3, [r7, #10]
 8007054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800705c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007060:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007064:	b29b      	uxth	r3, r3
 8007066:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800707e:	813b      	strh	r3, [r7, #8]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	441a      	add	r2, r3
 800708a:	893b      	ldrh	r3, [r7, #8]
 800708c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800709c:	b29b      	uxth	r3, r3
 800709e:	8013      	strh	r3, [r2, #0]
 80070a0:	e192      	b.n	80073c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	827b      	strh	r3, [r7, #18]
 80070b0:	8a7b      	ldrh	r3, [r7, #18]
 80070b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d01b      	beq.n	80070f2 <USB_DeactivateEndpoint+0xf6>
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d0:	823b      	strh	r3, [r7, #16]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	441a      	add	r2, r3
 80070dc:	8a3b      	ldrh	r3, [r7, #16]
 80070de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007108:	81fb      	strh	r3, [r7, #14]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	441a      	add	r2, r3
 8007114:	89fb      	ldrh	r3, [r7, #14]
 8007116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800711a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800711e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007126:	b29b      	uxth	r3, r3
 8007128:	8013      	strh	r3, [r2, #0]
 800712a:	e14d      	b.n	80073c8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	785b      	ldrb	r3, [r3, #1]
 8007130:	2b00      	cmp	r3, #0
 8007132:	f040 80a5 	bne.w	8007280 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	843b      	strh	r3, [r7, #32]
 8007144:	8c3b      	ldrh	r3, [r7, #32]
 8007146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d01b      	beq.n	8007186 <USB_DeactivateEndpoint+0x18a>
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007164:	83fb      	strh	r3, [r7, #30]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	441a      	add	r2, r3
 8007170:	8bfb      	ldrh	r3, [r7, #30]
 8007172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800717a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800717e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007182:	b29b      	uxth	r3, r3
 8007184:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	83bb      	strh	r3, [r7, #28]
 8007194:	8bbb      	ldrh	r3, [r7, #28]
 8007196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719a:	2b00      	cmp	r3, #0
 800719c:	d01b      	beq.n	80071d6 <USB_DeactivateEndpoint+0x1da>
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b4:	837b      	strh	r3, [r7, #26]
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	441a      	add	r2, r3
 80071c0:	8b7b      	ldrh	r3, [r7, #26]
 80071c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ec:	833b      	strh	r3, [r7, #24]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	441a      	add	r2, r3
 80071f8:	8b3b      	ldrh	r3, [r7, #24]
 80071fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007206:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800720a:	b29b      	uxth	r3, r3
 800720c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007224:	82fb      	strh	r3, [r7, #22]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	441a      	add	r2, r3
 8007230:	8afb      	ldrh	r3, [r7, #22]
 8007232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800723a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800723e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007242:	b29b      	uxth	r3, r3
 8007244:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800725c:	82bb      	strh	r3, [r7, #20]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	441a      	add	r2, r3
 8007268:	8abb      	ldrh	r3, [r7, #20]
 800726a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727a:	b29b      	uxth	r3, r3
 800727c:	8013      	strh	r3, [r2, #0]
 800727e:	e0a3      	b.n	80073c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800728e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01b      	beq.n	80072d0 <USB_DeactivateEndpoint+0x2d4>
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	441a      	add	r2, r3
 80072ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80072bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80072de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80072e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d01b      	beq.n	8007320 <USB_DeactivateEndpoint+0x324>
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fe:	853b      	strh	r3, [r7, #40]	; 0x28
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	441a      	add	r2, r3
 800730a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800730c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007318:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800731c:	b29b      	uxth	r3, r3
 800731e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b29b      	uxth	r3, r3
 800732e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007336:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	441a      	add	r2, r3
 8007342:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800734c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007354:	b29b      	uxth	r3, r3
 8007356:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	b29b      	uxth	r3, r3
 8007366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800736a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800736e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	441a      	add	r2, r3
 800737a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800737c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800738c:	b29b      	uxth	r3, r3
 800738e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	b29b      	uxth	r3, r3
 800739e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	441a      	add	r2, r3
 80073b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3734      	adds	r7, #52	; 0x34
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bc80      	pop	{r7}
 80073d2:	4770      	bx	lr

080073d4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b0cc      	sub	sp, #304	; 0x130
 80073d8:	af00      	add	r7, sp, #0
 80073da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073e2:	6018      	str	r0, [r3, #0]
 80073e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ec:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	785b      	ldrb	r3, [r3, #1]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	f041 817d 	bne.w	80086fa <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007404:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	699a      	ldr	r2, [r3, #24]
 800740c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	429a      	cmp	r2, r3
 800741a:	d908      	bls.n	800742e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800741c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800742c:	e007      	b.n	800743e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800742e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800743e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	7b1b      	ldrb	r3, [r3, #12]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d152      	bne.n	80074f4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800744e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6959      	ldr	r1, [r3, #20]
 800745a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	88da      	ldrh	r2, [r3, #6]
 8007466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800746a:	b29b      	uxth	r3, r3
 800746c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007470:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007474:	6800      	ldr	r0, [r0, #0]
 8007476:	f001 ff23 	bl	80092c0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800747a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007482:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007486:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800748a:	6812      	ldr	r2, [r2, #0]
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007492:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800749c:	b29b      	uxth	r3, r3
 800749e:	4619      	mov	r1, r3
 80074a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80074a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074ac:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80074b0:	6812      	ldr	r2, [r2, #0]
 80074b2:	440a      	add	r2, r1
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	011a      	lsls	r2, r3, #4
 80074c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4413      	add	r3, r2
 80074d0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80074d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	801a      	strh	r2, [r3, #0]
 80074f0:	f001 b8b5 	b.w	800865e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80074f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	78db      	ldrb	r3, [r3, #3]
 8007500:	2b02      	cmp	r3, #2
 8007502:	f040 84c6 	bne.w	8007e92 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6a1a      	ldr	r2, [r3, #32]
 8007512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	429a      	cmp	r2, r3
 8007520:	f240 8443 	bls.w	8007daa <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	b29b      	uxth	r3, r3
 8007542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800754e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007552:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800755c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	441a      	add	r2, r3
 8007568:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800756c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007570:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007574:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800757c:	b29b      	uxth	r3, r3
 800757e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6a1a      	ldr	r2, [r3, #32]
 800758c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007590:	1ad2      	subs	r2, r2, r3
 8007592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800759e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 823e 	beq.w	8007a42 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80075c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80075ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075d2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80075d6:	6812      	ldr	r2, [r2, #0]
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	785b      	ldrb	r3, [r3, #1]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f040 809a 	bne.w	8007720 <USB_EPStartXfer+0x34c>
 80075ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075f8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80075fc:	6812      	ldr	r2, [r2, #0]
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007604:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800760e:	b29b      	uxth	r3, r3
 8007610:	4619      	mov	r1, r3
 8007612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800761a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800761e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007622:	6812      	ldr	r2, [r2, #0]
 8007624:	440a      	add	r2, r1
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	011a      	lsls	r2, r3, #4
 8007636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4413      	add	r3, r2
 8007642:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800764e:	601a      	str	r2, [r3, #0]
 8007650:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007654:	2b00      	cmp	r3, #0
 8007656:	d122      	bne.n	800769e <USB_EPStartXfer+0x2ca>
 8007658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800766a:	b29a      	uxth	r2, r3
 800766c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007670:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	801a      	strh	r2, [r3, #0]
 8007678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800767c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800768a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800768e:	b29a      	uxth	r2, r3
 8007690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007694:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	801a      	strh	r2, [r3, #0]
 800769c:	e079      	b.n	8007792 <USB_EPStartXfer+0x3be>
 800769e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a2:	2b3e      	cmp	r3, #62	; 0x3e
 80076a4:	d81b      	bhi.n	80076de <USB_EPStartXfer+0x30a>
 80076a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076aa:	085b      	lsrs	r3, r3, #1
 80076ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80076b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d004      	beq.n	80076c6 <USB_EPStartXfer+0x2f2>
 80076bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076c0:	3301      	adds	r3, #1
 80076c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80076c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	029b      	lsls	r3, r3, #10
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	801a      	strh	r2, [r3, #0]
 80076dc:	e059      	b.n	8007792 <USB_EPStartXfer+0x3be>
 80076de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e2:	095b      	lsrs	r3, r3, #5
 80076e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80076e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ec:	f003 031f 	and.w	r3, r3, #31
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d104      	bne.n	80076fe <USB_EPStartXfer+0x32a>
 80076f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076f8:	3b01      	subs	r3, #1
 80076fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80076fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007702:	b29b      	uxth	r3, r3
 8007704:	029b      	lsls	r3, r3, #10
 8007706:	b29b      	uxth	r3, r3
 8007708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800770c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007710:	b29a      	uxth	r2, r3
 8007712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007716:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	801a      	strh	r2, [r3, #0]
 800771e:	e038      	b.n	8007792 <USB_EPStartXfer+0x3be>
 8007720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007724:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	785b      	ldrb	r3, [r3, #1]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d130      	bne.n	8007792 <USB_EPStartXfer+0x3be>
 8007730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007734:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800773e:	b29b      	uxth	r3, r3
 8007740:	4619      	mov	r1, r3
 8007742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007746:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800774a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800774e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007752:	6812      	ldr	r2, [r2, #0]
 8007754:	440a      	add	r2, r1
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	011a      	lsls	r2, r3, #4
 8007766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4413      	add	r3, r2
 8007772:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007784:	b29a      	uxth	r2, r3
 8007786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	895b      	ldrh	r3, [r3, #10]
 800779e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6959      	ldr	r1, [r3, #20]
 80077ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077b8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80077bc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80077c0:	6800      	ldr	r0, [r0, #0]
 80077c2:	f001 fd7d 	bl	80092c0 <USB_WritePMA>
            ep->xfer_buff += len;
 80077c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	695a      	ldr	r2, [r3, #20]
 80077d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077d6:	441a      	add	r2, r3
 80077d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6a1a      	ldr	r2, [r3, #32]
 80077f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d90f      	bls.n	8007820 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8007800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6a1a      	ldr	r2, [r3, #32]
 800780c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007810:	1ad2      	subs	r2, r2, r3
 8007812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	621a      	str	r2, [r3, #32]
 800781e:	e00e      	b.n	800783e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007824:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	6a1b      	ldr	r3, [r3, #32]
 800782c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2200      	movs	r2, #0
 800783c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800783e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	785b      	ldrb	r3, [r3, #1]
 800784a:	2b00      	cmp	r3, #0
 800784c:	f040 809a 	bne.w	8007984 <USB_EPStartXfer+0x5b0>
 8007850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007854:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007858:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800785c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007860:	6812      	ldr	r2, [r2, #0]
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007868:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007872:	b29b      	uxth	r3, r3
 8007874:	4619      	mov	r1, r3
 8007876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800787a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800787e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007882:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007886:	6812      	ldr	r2, [r2, #0]
 8007888:	440a      	add	r2, r1
 800788a:	601a      	str	r2, [r3, #0]
 800788c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007890:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	011a      	lsls	r2, r3, #4
 800789a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800789e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4413      	add	r3, r2
 80078a6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80078aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d122      	bne.n	8007902 <USB_EPStartXfer+0x52e>
 80078bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	801a      	strh	r2, [r3, #0]
 80078dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	801a      	strh	r2, [r3, #0]
 8007900:	e083      	b.n	8007a0a <USB_EPStartXfer+0x636>
 8007902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007906:	2b3e      	cmp	r3, #62	; 0x3e
 8007908:	d81b      	bhi.n	8007942 <USB_EPStartXfer+0x56e>
 800790a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800790e:	085b      	lsrs	r3, r3, #1
 8007910:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	d004      	beq.n	800792a <USB_EPStartXfer+0x556>
 8007920:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007924:	3301      	adds	r3, #1
 8007926:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800792a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800792e:	b29b      	uxth	r3, r3
 8007930:	029b      	lsls	r3, r3, #10
 8007932:	b29a      	uxth	r2, r3
 8007934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007938:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	801a      	strh	r2, [r3, #0]
 8007940:	e063      	b.n	8007a0a <USB_EPStartXfer+0x636>
 8007942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007946:	095b      	lsrs	r3, r3, #5
 8007948:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800794c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007950:	f003 031f 	and.w	r3, r3, #31
 8007954:	2b00      	cmp	r3, #0
 8007956:	d104      	bne.n	8007962 <USB_EPStartXfer+0x58e>
 8007958:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800795c:	3b01      	subs	r3, #1
 800795e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007962:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007966:	b29b      	uxth	r3, r3
 8007968:	029b      	lsls	r3, r3, #10
 800796a:	b29b      	uxth	r3, r3
 800796c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007974:	b29a      	uxth	r2, r3
 8007976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	801a      	strh	r2, [r3, #0]
 8007982:	e042      	b.n	8007a0a <USB_EPStartXfer+0x636>
 8007984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	785b      	ldrb	r3, [r3, #1]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d13a      	bne.n	8007a0a <USB_EPStartXfer+0x636>
 8007994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007998:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800799c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80079a0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80079a4:	6812      	ldr	r2, [r2, #0]
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	4619      	mov	r1, r3
 80079ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079be:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80079c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80079c6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80079ca:	6812      	ldr	r2, [r2, #0]
 80079cc:	440a      	add	r2, r1
 80079ce:	601a      	str	r2, [r3, #0]
 80079d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	011a      	lsls	r2, r3, #4
 80079de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4413      	add	r3, r2
 80079ea:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80079ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80079f6:	601a      	str	r2, [r3, #0]
 80079f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	891b      	ldrh	r3, [r3, #8]
 8007a16:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6959      	ldr	r1, [r3, #20]
 8007a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a30:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a34:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a38:	6800      	ldr	r0, [r0, #0]
 8007a3a:	f001 fc41 	bl	80092c0 <USB_WritePMA>
 8007a3e:	f000 be0e 	b.w	800865e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	785b      	ldrb	r3, [r3, #1]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d16d      	bne.n	8007b2e <USB_EPStartXfer+0x75a>
 8007a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	461a      	mov	r2, r3
 8007a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a72:	4413      	add	r3, r2
 8007a74:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	011a      	lsls	r2, r3, #4
 8007a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a86:	4413      	add	r3, r2
 8007a88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d112      	bne.n	8007abc <USB_EPStartXfer+0x6e8>
 8007a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aa4:	801a      	strh	r2, [r3, #0]
 8007aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ab8:	801a      	strh	r2, [r3, #0]
 8007aba:	e063      	b.n	8007b84 <USB_EPStartXfer+0x7b0>
 8007abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac0:	2b3e      	cmp	r3, #62	; 0x3e
 8007ac2:	d817      	bhi.n	8007af4 <USB_EPStartXfer+0x720>
 8007ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac8:	085b      	lsrs	r3, r3, #1
 8007aca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d004      	beq.n	8007ae4 <USB_EPStartXfer+0x710>
 8007ada:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007ade:	3301      	adds	r3, #1
 8007ae0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007ae4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	029b      	lsls	r3, r3, #10
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007af0:	801a      	strh	r2, [r3, #0]
 8007af2:	e047      	b.n	8007b84 <USB_EPStartXfer+0x7b0>
 8007af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af8:	095b      	lsrs	r3, r3, #5
 8007afa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b02:	f003 031f 	and.w	r3, r3, #31
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d104      	bne.n	8007b14 <USB_EPStartXfer+0x740>
 8007b0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007b14:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	029b      	lsls	r3, r3, #10
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b2a:	801a      	strh	r2, [r3, #0]
 8007b2c:	e02a      	b.n	8007b84 <USB_EPStartXfer+0x7b0>
 8007b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	785b      	ldrb	r3, [r3, #1]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d122      	bne.n	8007b84 <USB_EPStartXfer+0x7b0>
 8007b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	653b      	str	r3, [r7, #80]	; 0x50
 8007b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b5e:	4413      	add	r3, r2
 8007b60:	653b      	str	r3, [r7, #80]	; 0x50
 8007b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	011a      	lsls	r2, r3, #4
 8007b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b72:	4413      	add	r3, r2
 8007b74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b82:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	891b      	ldrh	r3, [r3, #8]
 8007b90:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6959      	ldr	r1, [r3, #20]
 8007ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007baa:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007bae:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007bb2:	6800      	ldr	r0, [r0, #0]
 8007bb4:	f001 fb84 	bl	80092c0 <USB_WritePMA>
            ep->xfer_buff += len;
 8007bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	695a      	ldr	r2, [r3, #20]
 8007bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc8:	441a      	add	r2, r3
 8007bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6a1a      	ldr	r2, [r3, #32]
 8007be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d90f      	bls.n	8007c12 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8007bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6a1a      	ldr	r2, [r3, #32]
 8007bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c02:	1ad2      	subs	r2, r2, r3
 8007c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	621a      	str	r2, [r3, #32]
 8007c10:	e00e      	b.n	8007c30 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8007c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	785b      	ldrb	r3, [r3, #1]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d16d      	bne.n	8007d28 <USB_EPStartXfer+0x954>
 8007c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	461a      	mov	r2, r3
 8007c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6c:	4413      	add	r3, r2
 8007c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	011a      	lsls	r2, r3, #4
 8007c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c80:	4413      	add	r3, r2
 8007c82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c86:	637b      	str	r3, [r7, #52]	; 0x34
 8007c88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d112      	bne.n	8007cb6 <USB_EPStartXfer+0x8e2>
 8007c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9e:	801a      	strh	r2, [r3, #0]
 8007ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb2:	801a      	strh	r2, [r3, #0]
 8007cb4:	e05d      	b.n	8007d72 <USB_EPStartXfer+0x99e>
 8007cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cba:	2b3e      	cmp	r3, #62	; 0x3e
 8007cbc:	d817      	bhi.n	8007cee <USB_EPStartXfer+0x91a>
 8007cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cc2:	085b      	lsrs	r3, r3, #1
 8007cc4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d004      	beq.n	8007cde <USB_EPStartXfer+0x90a>
 8007cd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007cd8:	3301      	adds	r3, #1
 8007cda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007cde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	029b      	lsls	r3, r3, #10
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cea:	801a      	strh	r2, [r3, #0]
 8007cec:	e041      	b.n	8007d72 <USB_EPStartXfer+0x99e>
 8007cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf2:	095b      	lsrs	r3, r3, #5
 8007cf4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cfc:	f003 031f 	and.w	r3, r3, #31
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d104      	bne.n	8007d0e <USB_EPStartXfer+0x93a>
 8007d04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007d0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	029b      	lsls	r3, r3, #10
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d24:	801a      	strh	r2, [r3, #0]
 8007d26:	e024      	b.n	8007d72 <USB_EPStartXfer+0x99e>
 8007d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	785b      	ldrb	r3, [r3, #1]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d11c      	bne.n	8007d72 <USB_EPStartXfer+0x99e>
 8007d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d4c:	4413      	add	r3, r2
 8007d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8007d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	011a      	lsls	r2, r3, #4
 8007d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d60:	4413      	add	r3, r2
 8007d62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	895b      	ldrh	r3, [r3, #10]
 8007d7e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6959      	ldr	r1, [r3, #20]
 8007d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d98:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007d9c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007da0:	6800      	ldr	r0, [r0, #0]
 8007da2:	f001 fa8d 	bl	80092c0 <USB_WritePMA>
 8007da6:	f000 bc5a 	b.w	800865e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	441a      	add	r2, r3
 8007dfe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	461a      	mov	r2, r3
 8007e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e36:	4413      	add	r3, r2
 8007e38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	011a      	lsls	r2, r3, #4
 8007e48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e50:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e5a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	891b      	ldrh	r3, [r3, #8]
 8007e68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6959      	ldr	r1, [r3, #20]
 8007e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e82:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007e86:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007e8a:	6800      	ldr	r0, [r0, #0]
 8007e8c:	f001 fa18 	bl	80092c0 <USB_WritePMA>
 8007e90:	e3e5      	b.n	800865e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	441a      	add	r2, r3
 8007ed6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ee2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6a1a      	ldr	r2, [r3, #32]
 8007efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007efe:	1ad2      	subs	r2, r2, r3
 8007f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 81bc 	beq.w	80082ac <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	785b      	ldrb	r3, [r3, #1]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d16d      	bne.n	800802e <USB_EPStartXfer+0xc5a>
 8007f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	461a      	mov	r2, r3
 8007f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f72:	4413      	add	r3, r2
 8007f74:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	011a      	lsls	r2, r3, #4
 8007f84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f86:	4413      	add	r3, r2
 8007f88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f8c:	677b      	str	r3, [r7, #116]	; 0x74
 8007f8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d112      	bne.n	8007fbc <USB_EPStartXfer+0xbe8>
 8007f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fa4:	801a      	strh	r2, [r3, #0]
 8007fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fa8:	881b      	ldrh	r3, [r3, #0]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fb8:	801a      	strh	r2, [r3, #0]
 8007fba:	e060      	b.n	800807e <USB_EPStartXfer+0xcaa>
 8007fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc0:	2b3e      	cmp	r3, #62	; 0x3e
 8007fc2:	d817      	bhi.n	8007ff4 <USB_EPStartXfer+0xc20>
 8007fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc8:	085b      	lsrs	r3, r3, #1
 8007fca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d004      	beq.n	8007fe4 <USB_EPStartXfer+0xc10>
 8007fda:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007fde:	3301      	adds	r3, #1
 8007fe0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007fe4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	029b      	lsls	r3, r3, #10
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ff0:	801a      	strh	r2, [r3, #0]
 8007ff2:	e044      	b.n	800807e <USB_EPStartXfer+0xcaa>
 8007ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff8:	095b      	lsrs	r3, r3, #5
 8007ffa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008002:	f003 031f 	and.w	r3, r3, #31
 8008006:	2b00      	cmp	r3, #0
 8008008:	d104      	bne.n	8008014 <USB_EPStartXfer+0xc40>
 800800a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800800e:	3b01      	subs	r3, #1
 8008010:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008014:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008018:	b29b      	uxth	r3, r3
 800801a:	029b      	lsls	r3, r3, #10
 800801c:	b29b      	uxth	r3, r3
 800801e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008026:	b29a      	uxth	r2, r3
 8008028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800802a:	801a      	strh	r2, [r3, #0]
 800802c:	e027      	b.n	800807e <USB_EPStartXfer+0xcaa>
 800802e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	785b      	ldrb	r3, [r3, #1]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d11f      	bne.n	800807e <USB_EPStartXfer+0xcaa>
 800803e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008042:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800804c:	b29b      	uxth	r3, r3
 800804e:	461a      	mov	r2, r3
 8008050:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008054:	4413      	add	r3, r2
 8008056:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800805a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	011a      	lsls	r2, r3, #4
 8008068:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800806c:	4413      	add	r3, r2
 800806e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008072:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008078:	b29a      	uxth	r2, r3
 800807a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800807c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800807e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	895b      	ldrh	r3, [r3, #10]
 800808a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800808e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6959      	ldr	r1, [r3, #20]
 800809a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800809e:	b29b      	uxth	r3, r3
 80080a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80080a4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80080a8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80080ac:	6800      	ldr	r0, [r0, #0]
 80080ae:	f001 f907 	bl	80092c0 <USB_WritePMA>
          ep->xfer_buff += len;
 80080b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	695a      	ldr	r2, [r3, #20]
 80080be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c2:	441a      	add	r2, r3
 80080c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80080d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6a1a      	ldr	r2, [r3, #32]
 80080dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d90f      	bls.n	800810c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80080ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6a1a      	ldr	r2, [r3, #32]
 80080f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080fc:	1ad2      	subs	r2, r2, r3
 80080fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	621a      	str	r2, [r3, #32]
 800810a:	e00e      	b.n	800812a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800810c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800811c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2200      	movs	r2, #0
 8008128:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800812a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 8295 	beq.w	800865e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	785b      	ldrb	r3, [r3, #1]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d16d      	bne.n	8008220 <USB_EPStartXfer+0xe4c>
 8008144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008148:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008154:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800815e:	b29b      	uxth	r3, r3
 8008160:	461a      	mov	r2, r3
 8008162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008164:	4413      	add	r3, r2
 8008166:	66bb      	str	r3, [r7, #104]	; 0x68
 8008168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	011a      	lsls	r2, r3, #4
 8008176:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008178:	4413      	add	r3, r2
 800817a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800817e:	667b      	str	r3, [r7, #100]	; 0x64
 8008180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008184:	2b00      	cmp	r3, #0
 8008186:	d112      	bne.n	80081ae <USB_EPStartXfer+0xdda>
 8008188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	b29b      	uxth	r3, r3
 800818e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008192:	b29a      	uxth	r2, r3
 8008194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008196:	801a      	strh	r2, [r3, #0]
 8008198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800819a:	881b      	ldrh	r3, [r3, #0]
 800819c:	b29b      	uxth	r3, r3
 800819e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081aa:	801a      	strh	r2, [r3, #0]
 80081ac:	e063      	b.n	8008276 <USB_EPStartXfer+0xea2>
 80081ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081b2:	2b3e      	cmp	r3, #62	; 0x3e
 80081b4:	d817      	bhi.n	80081e6 <USB_EPStartXfer+0xe12>
 80081b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ba:	085b      	lsrs	r3, r3, #1
 80081bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80081c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <USB_EPStartXfer+0xe02>
 80081cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d0:	3301      	adds	r3, #1
 80081d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80081d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081da:	b29b      	uxth	r3, r3
 80081dc:	029b      	lsls	r3, r3, #10
 80081de:	b29a      	uxth	r2, r3
 80081e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081e2:	801a      	strh	r2, [r3, #0]
 80081e4:	e047      	b.n	8008276 <USB_EPStartXfer+0xea2>
 80081e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ea:	095b      	lsrs	r3, r3, #5
 80081ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80081f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081f4:	f003 031f 	and.w	r3, r3, #31
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d104      	bne.n	8008206 <USB_EPStartXfer+0xe32>
 80081fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008200:	3b01      	subs	r3, #1
 8008202:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800820a:	b29b      	uxth	r3, r3
 800820c:	029b      	lsls	r3, r3, #10
 800820e:	b29b      	uxth	r3, r3
 8008210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008218:	b29a      	uxth	r2, r3
 800821a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800821c:	801a      	strh	r2, [r3, #0]
 800821e:	e02a      	b.n	8008276 <USB_EPStartXfer+0xea2>
 8008220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d122      	bne.n	8008276 <USB_EPStartXfer+0xea2>
 8008230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008234:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	673b      	str	r3, [r7, #112]	; 0x70
 800823c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008240:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800824a:	b29b      	uxth	r3, r3
 800824c:	461a      	mov	r2, r3
 800824e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008250:	4413      	add	r3, r2
 8008252:	673b      	str	r3, [r7, #112]	; 0x70
 8008254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	011a      	lsls	r2, r3, #4
 8008262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008264:	4413      	add	r3, r2
 8008266:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800826a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800826c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008270:	b29a      	uxth	r2, r3
 8008272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008274:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800827a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	891b      	ldrh	r3, [r3, #8]
 8008282:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800828a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6959      	ldr	r1, [r3, #20]
 8008292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008296:	b29b      	uxth	r3, r3
 8008298:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800829c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80082a0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80082a4:	6800      	ldr	r0, [r0, #0]
 80082a6:	f001 f80b 	bl	80092c0 <USB_WritePMA>
 80082aa:	e1d8      	b.n	800865e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	785b      	ldrb	r3, [r3, #1]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d178      	bne.n	80083ae <USB_EPStartXfer+0xfda>
 80082bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082d8:	b29b      	uxth	r3, r3
 80082da:	461a      	mov	r2, r3
 80082dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082e0:	4413      	add	r3, r2
 80082e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	011a      	lsls	r2, r3, #4
 80082f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082f8:	4413      	add	r3, r2
 80082fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008306:	2b00      	cmp	r3, #0
 8008308:	d116      	bne.n	8008338 <USB_EPStartXfer+0xf64>
 800830a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	b29b      	uxth	r3, r3
 8008312:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008316:	b29a      	uxth	r2, r3
 8008318:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800831c:	801a      	strh	r2, [r3, #0]
 800831e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008322:	881b      	ldrh	r3, [r3, #0]
 8008324:	b29b      	uxth	r3, r3
 8008326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800832a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800832e:	b29a      	uxth	r2, r3
 8008330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008334:	801a      	strh	r2, [r3, #0]
 8008336:	e06b      	b.n	8008410 <USB_EPStartXfer+0x103c>
 8008338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800833c:	2b3e      	cmp	r3, #62	; 0x3e
 800833e:	d818      	bhi.n	8008372 <USB_EPStartXfer+0xf9e>
 8008340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008344:	085b      	lsrs	r3, r3, #1
 8008346:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800834a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b00      	cmp	r3, #0
 8008354:	d004      	beq.n	8008360 <USB_EPStartXfer+0xf8c>
 8008356:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800835a:	3301      	adds	r3, #1
 800835c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008360:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008364:	b29b      	uxth	r3, r3
 8008366:	029b      	lsls	r3, r3, #10
 8008368:	b29a      	uxth	r2, r3
 800836a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800836e:	801a      	strh	r2, [r3, #0]
 8008370:	e04e      	b.n	8008410 <USB_EPStartXfer+0x103c>
 8008372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008376:	095b      	lsrs	r3, r3, #5
 8008378:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800837c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008380:	f003 031f 	and.w	r3, r3, #31
 8008384:	2b00      	cmp	r3, #0
 8008386:	d104      	bne.n	8008392 <USB_EPStartXfer+0xfbe>
 8008388:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800838c:	3b01      	subs	r3, #1
 800838e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008392:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008396:	b29b      	uxth	r3, r3
 8008398:	029b      	lsls	r3, r3, #10
 800839a:	b29b      	uxth	r3, r3
 800839c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083aa:	801a      	strh	r2, [r3, #0]
 80083ac:	e030      	b.n	8008410 <USB_EPStartXfer+0x103c>
 80083ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	785b      	ldrb	r3, [r3, #1]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d128      	bne.n	8008410 <USB_EPStartXfer+0x103c>
 80083be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80083cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083da:	b29b      	uxth	r3, r3
 80083dc:	461a      	mov	r2, r3
 80083de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80083e2:	4413      	add	r3, r2
 80083e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80083e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	011a      	lsls	r2, r3, #4
 80083f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80083fa:	4413      	add	r3, r2
 80083fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008400:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008408:	b29a      	uxth	r2, r3
 800840a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800840e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	891b      	ldrh	r3, [r3, #8]
 800841c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6959      	ldr	r1, [r3, #20]
 800842c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008430:	b29b      	uxth	r3, r3
 8008432:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008436:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800843a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800843e:	6800      	ldr	r0, [r0, #0]
 8008440:	f000 ff3e 	bl	80092c0 <USB_WritePMA>
          ep->xfer_buff += len;
 8008444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008448:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	695a      	ldr	r2, [r3, #20]
 8008450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008454:	441a      	add	r2, r3
 8008456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6a1a      	ldr	r2, [r3, #32]
 800846e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	429a      	cmp	r2, r3
 800847c:	d90f      	bls.n	800849e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800847e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008482:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6a1a      	ldr	r2, [r3, #32]
 800848a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800848e:	1ad2      	subs	r2, r2, r3
 8008490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	621a      	str	r2, [r3, #32]
 800849c:	e00e      	b.n	80084bc <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800849e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80084ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2200      	movs	r2, #0
 80084ba:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80084bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 80cc 	beq.w	800865e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80084c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	785b      	ldrb	r3, [r3, #1]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d178      	bne.n	80085d6 <USB_EPStartXfer+0x1202>
 80084e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80084f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008500:	b29b      	uxth	r3, r3
 8008502:	461a      	mov	r2, r3
 8008504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008508:	4413      	add	r3, r2
 800850a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800850e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008512:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	011a      	lsls	r2, r3, #4
 800851c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008520:	4413      	add	r3, r2
 8008522:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008526:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800852a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800852e:	2b00      	cmp	r3, #0
 8008530:	d116      	bne.n	8008560 <USB_EPStartXfer+0x118c>
 8008532:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008536:	881b      	ldrh	r3, [r3, #0]
 8008538:	b29b      	uxth	r3, r3
 800853a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800853e:	b29a      	uxth	r2, r3
 8008540:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008544:	801a      	strh	r2, [r3, #0]
 8008546:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	b29b      	uxth	r3, r3
 800854e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008556:	b29a      	uxth	r2, r3
 8008558:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800855c:	801a      	strh	r2, [r3, #0]
 800855e:	e064      	b.n	800862a <USB_EPStartXfer+0x1256>
 8008560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008564:	2b3e      	cmp	r3, #62	; 0x3e
 8008566:	d818      	bhi.n	800859a <USB_EPStartXfer+0x11c6>
 8008568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800856c:	085b      	lsrs	r3, r3, #1
 800856e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d004      	beq.n	8008588 <USB_EPStartXfer+0x11b4>
 800857e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008582:	3301      	adds	r3, #1
 8008584:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800858c:	b29b      	uxth	r3, r3
 800858e:	029b      	lsls	r3, r3, #10
 8008590:	b29a      	uxth	r2, r3
 8008592:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008596:	801a      	strh	r2, [r3, #0]
 8008598:	e047      	b.n	800862a <USB_EPStartXfer+0x1256>
 800859a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800859e:	095b      	lsrs	r3, r3, #5
 80085a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80085a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085a8:	f003 031f 	and.w	r3, r3, #31
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d104      	bne.n	80085ba <USB_EPStartXfer+0x11e6>
 80085b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085b4:	3b01      	subs	r3, #1
 80085b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80085ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085be:	b29b      	uxth	r3, r3
 80085c0:	029b      	lsls	r3, r3, #10
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085d2:	801a      	strh	r2, [r3, #0]
 80085d4:	e029      	b.n	800862a <USB_EPStartXfer+0x1256>
 80085d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	785b      	ldrb	r3, [r3, #1]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d121      	bne.n	800862a <USB_EPStartXfer+0x1256>
 80085e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	461a      	mov	r2, r3
 80085f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085fc:	4413      	add	r3, r2
 80085fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	011a      	lsls	r2, r3, #4
 8008610:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008614:	4413      	add	r3, r2
 8008616:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800861a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800861e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008622:	b29a      	uxth	r2, r3
 8008624:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008628:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800862a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800862e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	895b      	ldrh	r3, [r3, #10]
 8008636:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800863a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6959      	ldr	r1, [r3, #20]
 8008646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800864a:	b29b      	uxth	r3, r3
 800864c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008650:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008654:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008658:	6800      	ldr	r0, [r0, #0]
 800865a:	f000 fe31 	bl	80092c0 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800865e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008662:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800866c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	b29b      	uxth	r3, r3
 800867c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008680:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800868c:	8013      	strh	r3, [r2, #0]
 800868e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008692:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008696:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800869a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800869e:	8812      	ldrh	r2, [r2, #0]
 80086a0:	f082 0210 	eor.w	r2, r2, #16
 80086a4:	801a      	strh	r2, [r3, #0]
 80086a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086aa:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80086ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086b2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80086b6:	8812      	ldrh	r2, [r2, #0]
 80086b8:	f082 0220 	eor.w	r2, r2, #32
 80086bc:	801a      	strh	r2, [r3, #0]
 80086be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	441a      	add	r2, r3
 80086d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086dc:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	8013      	strh	r3, [r2, #0]
 80086f6:	f000 bc9f 	b.w	8009038 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80086fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	7b1b      	ldrb	r3, [r3, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	f040 80ae 	bne.w	8008868 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800870c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	699a      	ldr	r2, [r3, #24]
 8008718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800871c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	429a      	cmp	r2, r3
 8008726:	d917      	bls.n	8008758 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8008728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800872c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800873c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699a      	ldr	r2, [r3, #24]
 8008744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008748:	1ad2      	subs	r2, r2, r3
 800874a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800874e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	619a      	str	r2, [r3, #24]
 8008756:	e00e      	b.n	8008776 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800875c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800876c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2200      	movs	r2, #0
 8008774:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800877a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008788:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008792:	b29b      	uxth	r3, r3
 8008794:	461a      	mov	r2, r3
 8008796:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800879a:	4413      	add	r3, r2
 800879c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	011a      	lsls	r2, r3, #4
 80087ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80087b2:	4413      	add	r3, r2
 80087b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d116      	bne.n	80087f2 <USB_EPStartXfer+0x141e>
 80087c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087d6:	801a      	strh	r2, [r3, #0]
 80087d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087ee:	801a      	strh	r2, [r3, #0]
 80087f0:	e3e8      	b.n	8008fc4 <USB_EPStartXfer+0x1bf0>
 80087f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087f6:	2b3e      	cmp	r3, #62	; 0x3e
 80087f8:	d818      	bhi.n	800882c <USB_EPStartXfer+0x1458>
 80087fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087fe:	085b      	lsrs	r3, r3, #1
 8008800:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	2b00      	cmp	r3, #0
 800880e:	d004      	beq.n	800881a <USB_EPStartXfer+0x1446>
 8008810:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008814:	3301      	adds	r3, #1
 8008816:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800881a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800881e:	b29b      	uxth	r3, r3
 8008820:	029b      	lsls	r3, r3, #10
 8008822:	b29a      	uxth	r2, r3
 8008824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008828:	801a      	strh	r2, [r3, #0]
 800882a:	e3cb      	b.n	8008fc4 <USB_EPStartXfer+0x1bf0>
 800882c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008830:	095b      	lsrs	r3, r3, #5
 8008832:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800883a:	f003 031f 	and.w	r3, r3, #31
 800883e:	2b00      	cmp	r3, #0
 8008840:	d104      	bne.n	800884c <USB_EPStartXfer+0x1478>
 8008842:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008846:	3b01      	subs	r3, #1
 8008848:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800884c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008850:	b29b      	uxth	r3, r3
 8008852:	029b      	lsls	r3, r3, #10
 8008854:	b29b      	uxth	r3, r3
 8008856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800885a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800885e:	b29a      	uxth	r2, r3
 8008860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008864:	801a      	strh	r2, [r3, #0]
 8008866:	e3ad      	b.n	8008fc4 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800886c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	78db      	ldrb	r3, [r3, #3]
 8008874:	2b02      	cmp	r3, #2
 8008876:	f040 8200 	bne.w	8008c7a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800887a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800887e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	785b      	ldrb	r3, [r3, #1]
 8008886:	2b00      	cmp	r3, #0
 8008888:	f040 8091 	bne.w	80089ae <USB_EPStartXfer+0x15da>
 800888c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008890:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800889a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800889e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	461a      	mov	r2, r3
 80088ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80088b0:	4413      	add	r3, r2
 80088b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80088b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	011a      	lsls	r2, r3, #4
 80088c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80088c8:	4413      	add	r3, r2
 80088ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d116      	bne.n	8008910 <USB_EPStartXfer+0x153c>
 80088e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088e6:	881b      	ldrh	r3, [r3, #0]
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088f4:	801a      	strh	r2, [r3, #0]
 80088f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008906:	b29a      	uxth	r2, r3
 8008908:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800890c:	801a      	strh	r2, [r3, #0]
 800890e:	e083      	b.n	8008a18 <USB_EPStartXfer+0x1644>
 8008910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	2b3e      	cmp	r3, #62	; 0x3e
 800891e:	d820      	bhi.n	8008962 <USB_EPStartXfer+0x158e>
 8008920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008924:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	085b      	lsrs	r3, r3, #1
 800892e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d004      	beq.n	8008950 <USB_EPStartXfer+0x157c>
 8008946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800894a:	3301      	adds	r3, #1
 800894c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008954:	b29b      	uxth	r3, r3
 8008956:	029b      	lsls	r3, r3, #10
 8008958:	b29a      	uxth	r2, r3
 800895a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800895e:	801a      	strh	r2, [r3, #0]
 8008960:	e05a      	b.n	8008a18 <USB_EPStartXfer+0x1644>
 8008962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	095b      	lsrs	r3, r3, #5
 8008970:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	f003 031f 	and.w	r3, r3, #31
 8008984:	2b00      	cmp	r3, #0
 8008986:	d104      	bne.n	8008992 <USB_EPStartXfer+0x15be>
 8008988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800898c:	3b01      	subs	r3, #1
 800898e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008996:	b29b      	uxth	r3, r3
 8008998:	029b      	lsls	r3, r3, #10
 800899a:	b29b      	uxth	r3, r3
 800899c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089aa:	801a      	strh	r2, [r3, #0]
 80089ac:	e034      	b.n	8008a18 <USB_EPStartXfer+0x1644>
 80089ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	785b      	ldrb	r3, [r3, #1]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d12c      	bne.n	8008a18 <USB_EPStartXfer+0x1644>
 80089be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80089cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089da:	b29b      	uxth	r3, r3
 80089dc:	461a      	mov	r2, r3
 80089de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80089e2:	4413      	add	r3, r2
 80089e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80089e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	011a      	lsls	r2, r3, #4
 80089f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80089fa:	4413      	add	r3, r2
 80089fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008a16:	801a      	strh	r2, [r3, #0]
 8008a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	785b      	ldrb	r3, [r3, #1]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f040 8091 	bne.w	8008b5a <USB_EPStartXfer+0x1786>
 8008a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	461a      	mov	r2, r3
 8008a58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	011a      	lsls	r2, r3, #4
 8008a70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008a74:	4413      	add	r3, r2
 8008a76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d116      	bne.n	8008abc <USB_EPStartXfer+0x16e8>
 8008a8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008aa0:	801a      	strh	r2, [r3, #0]
 8008aa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ab8:	801a      	strh	r2, [r3, #0]
 8008aba:	e07c      	b.n	8008bb6 <USB_EPStartXfer+0x17e2>
 8008abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	2b3e      	cmp	r3, #62	; 0x3e
 8008aca:	d820      	bhi.n	8008b0e <USB_EPStartXfer+0x173a>
 8008acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ad0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	085b      	lsrs	r3, r3, #1
 8008ada:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ae2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d004      	beq.n	8008afc <USB_EPStartXfer+0x1728>
 8008af2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008af6:	3301      	adds	r3, #1
 8008af8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008afc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	029b      	lsls	r3, r3, #10
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b0a:	801a      	strh	r2, [r3, #0]
 8008b0c:	e053      	b.n	8008bb6 <USB_EPStartXfer+0x17e2>
 8008b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	095b      	lsrs	r3, r3, #5
 8008b1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	f003 031f 	and.w	r3, r3, #31
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d104      	bne.n	8008b3e <USB_EPStartXfer+0x176a>
 8008b34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	029b      	lsls	r3, r3, #10
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b56:	801a      	strh	r2, [r3, #0]
 8008b58:	e02d      	b.n	8008bb6 <USB_EPStartXfer+0x17e2>
 8008b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	785b      	ldrb	r3, [r3, #1]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d125      	bne.n	8008bb6 <USB_EPStartXfer+0x17e2>
 8008b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008b80:	4413      	add	r3, r2
 8008b82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	011a      	lsls	r2, r3, #4
 8008b94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008b98:	4413      	add	r3, r2
 8008b9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008bb4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 81fe 	beq.w	8008fc4 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008be8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d005      	beq.n	8008c00 <USB_EPStartXfer+0x182c>
 8008bf4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10d      	bne.n	8008c1c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c00:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f040 81db 	bne.w	8008fc4 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c0e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f040 81d4 	bne.w	8008fc4 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	881b      	ldrh	r3, [r3, #0]
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c42:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	441a      	add	r2, r3
 8008c60:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	8013      	strh	r3, [r2, #0]
 8008c78:	e1a4      	b.n	8008fc4 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	78db      	ldrb	r3, [r3, #3]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	f040 819a 	bne.w	8008fc0 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	699a      	ldr	r2, [r3, #24]
 8008c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d917      	bls.n	8008cd8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	699a      	ldr	r2, [r3, #24]
 8008cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cc8:	1ad2      	subs	r2, r2, r3
 8008cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	619a      	str	r2, [r3, #24]
 8008cd6:	e00e      	b.n	8008cf6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	785b      	ldrb	r3, [r3, #1]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d178      	bne.n	8008df8 <USB_EPStartXfer+0x1a24>
 8008d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	461a      	mov	r2, r3
 8008d26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	011a      	lsls	r2, r3, #4
 8008d3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d42:	4413      	add	r3, r2
 8008d44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d116      	bne.n	8008d82 <USB_EPStartXfer+0x19ae>
 8008d54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d58:	881b      	ldrh	r3, [r3, #0]
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d66:	801a      	strh	r2, [r3, #0]
 8008d68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d6c:	881b      	ldrh	r3, [r3, #0]
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d7e:	801a      	strh	r2, [r3, #0]
 8008d80:	e06b      	b.n	8008e5a <USB_EPStartXfer+0x1a86>
 8008d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d86:	2b3e      	cmp	r3, #62	; 0x3e
 8008d88:	d818      	bhi.n	8008dbc <USB_EPStartXfer+0x19e8>
 8008d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d8e:	085b      	lsrs	r3, r3, #1
 8008d90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d004      	beq.n	8008daa <USB_EPStartXfer+0x19d6>
 8008da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008da4:	3301      	adds	r3, #1
 8008da6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	029b      	lsls	r3, r3, #10
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008db8:	801a      	strh	r2, [r3, #0]
 8008dba:	e04e      	b.n	8008e5a <USB_EPStartXfer+0x1a86>
 8008dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dc0:	095b      	lsrs	r3, r3, #5
 8008dc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dca:	f003 031f 	and.w	r3, r3, #31
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d104      	bne.n	8008ddc <USB_EPStartXfer+0x1a08>
 8008dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	029b      	lsls	r3, r3, #10
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008df4:	801a      	strh	r2, [r3, #0]
 8008df6:	e030      	b.n	8008e5a <USB_EPStartXfer+0x1a86>
 8008df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	785b      	ldrb	r3, [r3, #1]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d128      	bne.n	8008e5a <USB_EPStartXfer+0x1a86>
 8008e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	461a      	mov	r2, r3
 8008e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	011a      	lsls	r2, r3, #4
 8008e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e44:	4413      	add	r3, r2
 8008e46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008e58:	801a      	strh	r2, [r3, #0]
 8008e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	785b      	ldrb	r3, [r3, #1]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d178      	bne.n	8008f6a <USB_EPStartXfer+0x1b96>
 8008e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	461a      	mov	r2, r3
 8008e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ea6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	011a      	lsls	r2, r3, #4
 8008eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008eba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d116      	bne.n	8008ef4 <USB_EPStartXfer+0x1b20>
 8008ec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008eca:	881b      	ldrh	r3, [r3, #0]
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ed8:	801a      	strh	r2, [r3, #0]
 8008eda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ede:	881b      	ldrh	r3, [r3, #0]
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ef0:	801a      	strh	r2, [r3, #0]
 8008ef2:	e067      	b.n	8008fc4 <USB_EPStartXfer+0x1bf0>
 8008ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ef8:	2b3e      	cmp	r3, #62	; 0x3e
 8008efa:	d818      	bhi.n	8008f2e <USB_EPStartXfer+0x1b5a>
 8008efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f00:	085b      	lsrs	r3, r3, #1
 8008f02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d004      	beq.n	8008f1c <USB_EPStartXfer+0x1b48>
 8008f12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f16:	3301      	adds	r3, #1
 8008f18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	029b      	lsls	r3, r3, #10
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f2a:	801a      	strh	r2, [r3, #0]
 8008f2c:	e04a      	b.n	8008fc4 <USB_EPStartXfer+0x1bf0>
 8008f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f32:	095b      	lsrs	r3, r3, #5
 8008f34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f3c:	f003 031f 	and.w	r3, r3, #31
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d104      	bne.n	8008f4e <USB_EPStartXfer+0x1b7a>
 8008f44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	029b      	lsls	r3, r3, #10
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f66:	801a      	strh	r2, [r3, #0]
 8008f68:	e02c      	b.n	8008fc4 <USB_EPStartXfer+0x1bf0>
 8008f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	785b      	ldrb	r3, [r3, #1]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d124      	bne.n	8008fc4 <USB_EPStartXfer+0x1bf0>
 8008f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f90:	4413      	add	r3, r2
 8008f92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	011a      	lsls	r2, r3, #4
 8008fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fa8:	4413      	add	r3, r2
 8008faa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008fae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fbc:	801a      	strh	r2, [r3, #0]
 8008fbe:	e001      	b.n	8008fc4 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e03a      	b.n	800903a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4413      	add	r3, r2
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008fee:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008ff2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ff6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008ffa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008ffe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009002:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800900a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	441a      	add	r2, r3
 8009020:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800902c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009034:	b29b      	uxth	r3, r3
 8009036:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	785b      	ldrb	r3, [r3, #1]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d020      	beq.n	8009098 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	4413      	add	r3, r2
 8009060:	881b      	ldrh	r3, [r3, #0]
 8009062:	b29b      	uxth	r3, r3
 8009064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800906c:	81bb      	strh	r3, [r7, #12]
 800906e:	89bb      	ldrh	r3, [r7, #12]
 8009070:	f083 0310 	eor.w	r3, r3, #16
 8009074:	81bb      	strh	r3, [r7, #12]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	441a      	add	r2, r3
 8009080:	89bb      	ldrh	r3, [r7, #12]
 8009082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800908a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800908e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009092:	b29b      	uxth	r3, r3
 8009094:	8013      	strh	r3, [r2, #0]
 8009096:	e01f      	b.n	80090d8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	881b      	ldrh	r3, [r3, #0]
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ae:	81fb      	strh	r3, [r7, #14]
 80090b0:	89fb      	ldrh	r3, [r7, #14]
 80090b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80090b6:	81fb      	strh	r3, [r7, #14]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	441a      	add	r2, r3
 80090c2:	89fb      	ldrh	r3, [r7, #14]
 80090c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	bc80      	pop	{r7}
 80090e2:	4770      	bx	lr

080090e4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b087      	sub	sp, #28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	7b1b      	ldrb	r3, [r3, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f040 809d 	bne.w	8009232 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	785b      	ldrb	r3, [r3, #1]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d04c      	beq.n	800919a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	823b      	strh	r3, [r7, #16]
 800910e:	8a3b      	ldrh	r3, [r7, #16]
 8009110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009114:	2b00      	cmp	r3, #0
 8009116:	d01b      	beq.n	8009150 <USB_EPClearStall+0x6c>
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	b29b      	uxth	r3, r3
 8009126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800912a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800912e:	81fb      	strh	r3, [r7, #14]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	441a      	add	r2, r3
 800913a:	89fb      	ldrh	r3, [r7, #14]
 800913c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009148:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800914c:	b29b      	uxth	r3, r3
 800914e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	78db      	ldrb	r3, [r3, #3]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d06c      	beq.n	8009232 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	b29b      	uxth	r3, r3
 8009166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800916a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800916e:	81bb      	strh	r3, [r7, #12]
 8009170:	89bb      	ldrh	r3, [r7, #12]
 8009172:	f083 0320 	eor.w	r3, r3, #32
 8009176:	81bb      	strh	r3, [r7, #12]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	441a      	add	r2, r3
 8009182:	89bb      	ldrh	r3, [r7, #12]
 8009184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800918c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009194:	b29b      	uxth	r3, r3
 8009196:	8013      	strh	r3, [r2, #0]
 8009198:	e04b      	b.n	8009232 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	881b      	ldrh	r3, [r3, #0]
 80091a6:	82fb      	strh	r3, [r7, #22]
 80091a8:	8afb      	ldrh	r3, [r7, #22]
 80091aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d01b      	beq.n	80091ea <USB_EPClearStall+0x106>
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	b29b      	uxth	r3, r3
 80091c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091c8:	82bb      	strh	r3, [r7, #20]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	441a      	add	r2, r3
 80091d4:	8abb      	ldrh	r3, [r7, #20]
 80091d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4413      	add	r3, r2
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009200:	827b      	strh	r3, [r7, #18]
 8009202:	8a7b      	ldrh	r3, [r7, #18]
 8009204:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009208:	827b      	strh	r3, [r7, #18]
 800920a:	8a7b      	ldrh	r3, [r7, #18]
 800920c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009210:	827b      	strh	r3, [r7, #18]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	441a      	add	r2, r3
 800921c:	8a7b      	ldrh	r3, [r7, #18]
 800921e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800922a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800922e:	b29b      	uxth	r3, r3
 8009230:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	371c      	adds	r7, #28
 8009238:	46bd      	mov	sp, r7
 800923a:	bc80      	pop	{r7}
 800923c:	4770      	bx	lr

0800923e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800923e:	b480      	push	{r7}
 8009240:	b083      	sub	sp, #12
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	460b      	mov	r3, r1
 8009248:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d103      	bne.n	8009258 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2280      	movs	r2, #128	; 0x80
 8009254:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	bc80      	pop	{r7}
 8009262:	4770      	bx	lr

08009264 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	bc80      	pop	{r7}
 8009276:	4770      	bx	lr

08009278 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	bc80      	pop	{r7}
 800928a:	4770      	bx	lr

0800928c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800929a:	b29b      	uxth	r3, r3
 800929c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800929e:	68fb      	ldr	r3, [r7, #12]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3714      	adds	r7, #20
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bc80      	pop	{r7}
 80092a8:	4770      	bx	lr

080092aa <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80092aa:	b480      	push	{r7}
 80092ac:	b083      	sub	sp, #12
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bc80      	pop	{r7}
 80092be:	4770      	bx	lr

080092c0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b08d      	sub	sp, #52	; 0x34
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	4611      	mov	r1, r2
 80092cc:	461a      	mov	r2, r3
 80092ce:	460b      	mov	r3, r1
 80092d0:	80fb      	strh	r3, [r7, #6]
 80092d2:	4613      	mov	r3, r2
 80092d4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80092d6:	88bb      	ldrh	r3, [r7, #4]
 80092d8:	3301      	adds	r3, #1
 80092da:	085b      	lsrs	r3, r3, #1
 80092dc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80092e6:	88fb      	ldrh	r3, [r7, #6]
 80092e8:	005a      	lsls	r2, r3, #1
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092f2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092f8:	e01e      	b.n	8009338 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	3301      	adds	r3, #1
 8009304:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	b29b      	uxth	r3, r3
 800930c:	021b      	lsls	r3, r3, #8
 800930e:	b29b      	uxth	r3, r3
 8009310:	461a      	mov	r2, r3
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	4313      	orrs	r3, r2
 8009316:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	b29a      	uxth	r2, r3
 800931c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009322:	3302      	adds	r3, #2
 8009324:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009328:	3302      	adds	r3, #2
 800932a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932e:	3301      	adds	r3, #1
 8009330:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009334:	3b01      	subs	r3, #1
 8009336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1dd      	bne.n	80092fa <USB_WritePMA+0x3a>
  }
}
 800933e:	bf00      	nop
 8009340:	bf00      	nop
 8009342:	3734      	adds	r7, #52	; 0x34
 8009344:	46bd      	mov	sp, r7
 8009346:	bc80      	pop	{r7}
 8009348:	4770      	bx	lr

0800934a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800934a:	b480      	push	{r7}
 800934c:	b08b      	sub	sp, #44	; 0x2c
 800934e:	af00      	add	r7, sp, #0
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	60b9      	str	r1, [r7, #8]
 8009354:	4611      	mov	r1, r2
 8009356:	461a      	mov	r2, r3
 8009358:	460b      	mov	r3, r1
 800935a:	80fb      	strh	r3, [r7, #6]
 800935c:	4613      	mov	r3, r2
 800935e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009360:	88bb      	ldrh	r3, [r7, #4]
 8009362:	085b      	lsrs	r3, r3, #1
 8009364:	b29b      	uxth	r3, r3
 8009366:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009370:	88fb      	ldrh	r3, [r7, #6]
 8009372:	005a      	lsls	r2, r3, #1
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800937c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	627b      	str	r3, [r7, #36]	; 0x24
 8009382:	e01b      	b.n	80093bc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	881b      	ldrh	r3, [r3, #0]
 8009388:	b29b      	uxth	r3, r3
 800938a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	3302      	adds	r3, #2
 8009390:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	b2da      	uxtb	r2, r3
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	3301      	adds	r3, #1
 800939e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	0a1b      	lsrs	r3, r3, #8
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	3301      	adds	r3, #1
 80093ae:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	3302      	adds	r3, #2
 80093b4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	3b01      	subs	r3, #1
 80093ba:	627b      	str	r3, [r7, #36]	; 0x24
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1e0      	bne.n	8009384 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80093c2:	88bb      	ldrh	r3, [r7, #4]
 80093c4:	f003 0301 	and.w	r3, r3, #1
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d007      	beq.n	80093de <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80093ce:	6a3b      	ldr	r3, [r7, #32]
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	701a      	strb	r2, [r3, #0]
  }
}
 80093de:	bf00      	nop
 80093e0:	372c      	adds	r7, #44	; 0x2c
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bc80      	pop	{r7}
 80093e6:	4770      	bx	lr

080093e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	460b      	mov	r3, r1
 80093f2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	7c1b      	ldrb	r3, [r3, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d115      	bne.n	800942c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009400:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009404:	2202      	movs	r2, #2
 8009406:	2181      	movs	r1, #129	; 0x81
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f7f9 f9b0 	bl	800276e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2201      	movs	r2, #1
 8009412:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009418:	2202      	movs	r2, #2
 800941a:	2101      	movs	r1, #1
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7f9 f9a6 	bl	800276e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800942a:	e012      	b.n	8009452 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800942c:	2340      	movs	r3, #64	; 0x40
 800942e:	2202      	movs	r2, #2
 8009430:	2181      	movs	r1, #129	; 0x81
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7f9 f99b 	bl	800276e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800943e:	2340      	movs	r3, #64	; 0x40
 8009440:	2202      	movs	r2, #2
 8009442:	2101      	movs	r1, #1
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7f9 f992 	bl	800276e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009452:	2308      	movs	r3, #8
 8009454:	2203      	movs	r2, #3
 8009456:	2182      	movs	r1, #130	; 0x82
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7f9 f988 	bl	800276e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009464:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009468:	f7f9 faa8 	bl	80029bc <USBD_static_malloc>
 800946c:	4602      	mov	r2, r0
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800947a:	2b00      	cmp	r3, #0
 800947c:	d102      	bne.n	8009484 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800947e:	2301      	movs	r3, #1
 8009480:	73fb      	strb	r3, [r7, #15]
 8009482:	e026      	b.n	80094d2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800948a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	2200      	movs	r2, #0
 800949a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	7c1b      	ldrb	r3, [r3, #16]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d109      	bne.n	80094c2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094b8:	2101      	movs	r1, #1
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7f9 fa48 	bl	8002950 <USBD_LL_PrepareReceive>
 80094c0:	e007      	b.n	80094d2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094c8:	2340      	movs	r3, #64	; 0x40
 80094ca:	2101      	movs	r1, #1
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7f9 fa3f 	bl	8002950 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80094e8:	2300      	movs	r3, #0
 80094ea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80094ec:	2181      	movs	r1, #129	; 0x81
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7f9 f963 	bl	80027ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80094fa:	2101      	movs	r1, #1
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f7f9 f95c 	bl	80027ba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800950a:	2182      	movs	r1, #130	; 0x82
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7f9 f954 	bl	80027ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00e      	beq.n	8009540 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009532:	4618      	mov	r0, r3
 8009534:	f7f9 fa4e 	bl	80029d4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009540:	7bfb      	ldrb	r3, [r7, #15]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b086      	sub	sp, #24
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800955a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800955c:	2300      	movs	r3, #0
 800955e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009560:	2300      	movs	r3, #0
 8009562:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009570:	2b00      	cmp	r3, #0
 8009572:	d039      	beq.n	80095e8 <USBD_CDC_Setup+0x9e>
 8009574:	2b20      	cmp	r3, #32
 8009576:	d17f      	bne.n	8009678 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	88db      	ldrh	r3, [r3, #6]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d029      	beq.n	80095d4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	b25b      	sxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	da11      	bge.n	80095ae <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009596:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009598:	683a      	ldr	r2, [r7, #0]
 800959a:	88d2      	ldrh	r2, [r2, #6]
 800959c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800959e:	6939      	ldr	r1, [r7, #16]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	88db      	ldrh	r3, [r3, #6]
 80095a4:	461a      	mov	r2, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f001 fa23 	bl	800a9f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80095ac:	e06b      	b.n	8009686 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	785a      	ldrb	r2, [r3, #1]
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	88db      	ldrh	r3, [r3, #6]
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80095c4:	6939      	ldr	r1, [r7, #16]
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	88db      	ldrh	r3, [r3, #6]
 80095ca:	461a      	mov	r2, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f001 fa3e 	bl	800aa4e <USBD_CtlPrepareRx>
      break;
 80095d2:	e058      	b.n	8009686 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	683a      	ldr	r2, [r7, #0]
 80095de:	7850      	ldrb	r0, [r2, #1]
 80095e0:	2200      	movs	r2, #0
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	4798      	blx	r3
      break;
 80095e6:	e04e      	b.n	8009686 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	785b      	ldrb	r3, [r3, #1]
 80095ec:	2b0b      	cmp	r3, #11
 80095ee:	d02e      	beq.n	800964e <USBD_CDC_Setup+0x104>
 80095f0:	2b0b      	cmp	r3, #11
 80095f2:	dc38      	bgt.n	8009666 <USBD_CDC_Setup+0x11c>
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <USBD_CDC_Setup+0xb4>
 80095f8:	2b0a      	cmp	r3, #10
 80095fa:	d014      	beq.n	8009626 <USBD_CDC_Setup+0xdc>
 80095fc:	e033      	b.n	8009666 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009604:	2b03      	cmp	r3, #3
 8009606:	d107      	bne.n	8009618 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009608:	f107 030c 	add.w	r3, r7, #12
 800960c:	2202      	movs	r2, #2
 800960e:	4619      	mov	r1, r3
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f001 f9ee 	bl	800a9f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009616:	e02e      	b.n	8009676 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009618:	6839      	ldr	r1, [r7, #0]
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f001 f97f 	bl	800a91e <USBD_CtlError>
            ret = USBD_FAIL;
 8009620:	2302      	movs	r3, #2
 8009622:	75fb      	strb	r3, [r7, #23]
          break;
 8009624:	e027      	b.n	8009676 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800962c:	2b03      	cmp	r3, #3
 800962e:	d107      	bne.n	8009640 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009630:	f107 030f 	add.w	r3, r7, #15
 8009634:	2201      	movs	r2, #1
 8009636:	4619      	mov	r1, r3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f001 f9da 	bl	800a9f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800963e:	e01a      	b.n	8009676 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009640:	6839      	ldr	r1, [r7, #0]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f001 f96b 	bl	800a91e <USBD_CtlError>
            ret = USBD_FAIL;
 8009648:	2302      	movs	r3, #2
 800964a:	75fb      	strb	r3, [r7, #23]
          break;
 800964c:	e013      	b.n	8009676 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009654:	2b03      	cmp	r3, #3
 8009656:	d00d      	beq.n	8009674 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f001 f95f 	bl	800a91e <USBD_CtlError>
            ret = USBD_FAIL;
 8009660:	2302      	movs	r3, #2
 8009662:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009664:	e006      	b.n	8009674 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f001 f958 	bl	800a91e <USBD_CtlError>
          ret = USBD_FAIL;
 800966e:	2302      	movs	r3, #2
 8009670:	75fb      	strb	r3, [r7, #23]
          break;
 8009672:	e000      	b.n	8009676 <USBD_CDC_Setup+0x12c>
          break;
 8009674:	bf00      	nop
      }
      break;
 8009676:	e006      	b.n	8009686 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f001 f94f 	bl	800a91e <USBD_CtlError>
      ret = USBD_FAIL;
 8009680:	2302      	movs	r3, #2
 8009682:	75fb      	strb	r3, [r7, #23]
      break;
 8009684:	bf00      	nop
  }

  return ret;
 8009686:	7dfb      	ldrb	r3, [r7, #23]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3718      	adds	r7, #24
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	460b      	mov	r3, r1
 800969a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096aa:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d03a      	beq.n	800972c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80096b6:	78fa      	ldrb	r2, [r7, #3]
 80096b8:	6879      	ldr	r1, [r7, #4]
 80096ba:	4613      	mov	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	440b      	add	r3, r1
 80096c4:	331c      	adds	r3, #28
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d029      	beq.n	8009720 <USBD_CDC_DataIn+0x90>
 80096cc:	78fa      	ldrb	r2, [r7, #3]
 80096ce:	6879      	ldr	r1, [r7, #4]
 80096d0:	4613      	mov	r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	4413      	add	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	440b      	add	r3, r1
 80096da:	331c      	adds	r3, #28
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	78f9      	ldrb	r1, [r7, #3]
 80096e0:	68b8      	ldr	r0, [r7, #8]
 80096e2:	460b      	mov	r3, r1
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	440b      	add	r3, r1
 80096e8:	00db      	lsls	r3, r3, #3
 80096ea:	4403      	add	r3, r0
 80096ec:	3338      	adds	r3, #56	; 0x38
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80096f4:	fb01 f303 	mul.w	r3, r1, r3
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d110      	bne.n	8009720 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80096fe:	78fa      	ldrb	r2, [r7, #3]
 8009700:	6879      	ldr	r1, [r7, #4]
 8009702:	4613      	mov	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4413      	add	r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	440b      	add	r3, r1
 800970c:	331c      	adds	r3, #28
 800970e:	2200      	movs	r2, #0
 8009710:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009712:	78f9      	ldrb	r1, [r7, #3]
 8009714:	2300      	movs	r3, #0
 8009716:	2200      	movs	r2, #0
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7f9 f8f6 	bl	800290a <USBD_LL_Transmit>
 800971e:	e003      	b.n	8009728 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	e000      	b.n	800972e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800972c:	2302      	movs	r3, #2
  }
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	460b      	mov	r3, r1
 8009740:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009748:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800974a:	78fb      	ldrb	r3, [r7, #3]
 800974c:	4619      	mov	r1, r3
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7f9 f921 	bl	8002996 <USBD_LL_GetRxDataSize>
 8009754:	4602      	mov	r2, r0
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00d      	beq.n	8009782 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800977a:	4611      	mov	r1, r2
 800977c:	4798      	blx	r3

    return USBD_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	e000      	b.n	8009784 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009782:	2302      	movs	r3, #2
  }
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800979a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d015      	beq.n	80097d2 <USBD_CDC_EP0_RxReady+0x46>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80097ac:	2bff      	cmp	r3, #255	; 0xff
 80097ae:	d010      	beq.n	80097d2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80097be:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80097c6:	b292      	uxth	r2, r2
 80097c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	22ff      	movs	r2, #255	; 0xff
 80097ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2243      	movs	r2, #67	; 0x43
 80097e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80097ea:	4b03      	ldr	r3, [pc, #12]	; (80097f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bc80      	pop	{r7}
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	20000100 	.word	0x20000100

080097fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2243      	movs	r2, #67	; 0x43
 8009808:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800980a:	4b03      	ldr	r3, [pc, #12]	; (8009818 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800980c:	4618      	mov	r0, r3
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	bc80      	pop	{r7}
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	200000bc 	.word	0x200000bc

0800981c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2243      	movs	r2, #67	; 0x43
 8009828:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800982a:	4b03      	ldr	r3, [pc, #12]	; (8009838 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	bc80      	pop	{r7}
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	20000144 	.word	0x20000144

0800983c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	220a      	movs	r2, #10
 8009848:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800984a:	4b03      	ldr	r3, [pc, #12]	; (8009858 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800984c:	4618      	mov	r0, r3
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	bc80      	pop	{r7}
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	20000078 	.word	0x20000078

0800985c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009866:	2302      	movs	r3, #2
 8009868:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d005      	beq.n	800987c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800987c:	7bfb      	ldrb	r3, [r7, #15]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3714      	adds	r7, #20
 8009882:	46bd      	mov	sp, r7
 8009884:	bc80      	pop	{r7}
 8009886:	4770      	bx	lr

08009888 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009888:	b480      	push	{r7}
 800988a:	b087      	sub	sp, #28
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	4613      	mov	r3, r2
 8009894:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80098a6:	88fa      	ldrh	r2, [r7, #6]
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	371c      	adds	r7, #28
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bc80      	pop	{r7}
 80098b8:	4770      	bx	lr

080098ba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b085      	sub	sp, #20
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	bc80      	pop	{r7}
 80098de:	4770      	bx	lr

080098e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d01c      	beq.n	8009934 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009900:	2b00      	cmp	r3, #0
 8009902:	d115      	bne.n	8009930 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2201      	movs	r2, #1
 8009908:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009922:	b29b      	uxth	r3, r3
 8009924:	2181      	movs	r1, #129	; 0x81
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7f8 ffef 	bl	800290a <USBD_LL_Transmit>

      return USBD_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	e002      	b.n	8009936 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009930:	2301      	movs	r3, #1
 8009932:	e000      	b.n	8009936 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009934:	2302      	movs	r3, #2
  }
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800994c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009954:	2b00      	cmp	r3, #0
 8009956:	d017      	beq.n	8009988 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	7c1b      	ldrb	r3, [r3, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d109      	bne.n	8009974 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800996a:	2101      	movs	r1, #1
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7f8 ffef 	bl	8002950 <USBD_LL_PrepareReceive>
 8009972:	e007      	b.n	8009984 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800997a:	2340      	movs	r3, #64	; 0x40
 800997c:	2101      	movs	r1, #1
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f7f8 ffe6 	bl	8002950 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009984:	2300      	movs	r3, #0
 8009986:	e000      	b.n	800998a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009988:	2302      	movs	r3, #2
  }
}
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
	...

08009994 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	4613      	mov	r3, r2
 80099a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10a      	bne.n	80099be <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80099a8:	4814      	ldr	r0, [pc, #80]	; (80099fc <USBD_Init+0x68>)
 80099aa:	f001 fd39 	bl	800b420 <iprintf>
 80099ae:	4814      	ldr	r0, [pc, #80]	; (8009a00 <USBD_Init+0x6c>)
 80099b0:	f001 fd36 	bl	800b420 <iprintf>
 80099b4:	200a      	movs	r0, #10
 80099b6:	f001 fd4b 	bl	800b450 <putchar>
#endif
    return USBD_FAIL;
 80099ba:	2302      	movs	r3, #2
 80099bc:	e01a      	b.n	80099f4 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d003      	beq.n	80099d0 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	79fa      	ldrb	r2, [r7, #7]
 80099ea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f7f8 fe49 	bl	8002684 <USBD_LL_Init>

  return USBD_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	0800daa0 	.word	0x0800daa0
 8009a00:	0800daa8 	.word	0x0800daa8

08009a04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d006      	beq.n	8009a26 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	683a      	ldr	r2, [r7, #0]
 8009a1c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	73fb      	strb	r3, [r7, #15]
 8009a24:	e00a      	b.n	8009a3c <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8009a26:	4808      	ldr	r0, [pc, #32]	; (8009a48 <USBD_RegisterClass+0x44>)
 8009a28:	f001 fcfa 	bl	800b420 <iprintf>
 8009a2c:	4807      	ldr	r0, [pc, #28]	; (8009a4c <USBD_RegisterClass+0x48>)
 8009a2e:	f001 fcf7 	bl	800b420 <iprintf>
 8009a32:	200a      	movs	r0, #10
 8009a34:	f001 fd0c 	bl	800b450 <putchar>
#endif
    status = USBD_FAIL;
 8009a38:	2302      	movs	r3, #2
 8009a3a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	0800daa0 	.word	0x0800daa0
 8009a4c:	0800dac0 	.word	0x0800dac0

08009a50 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f7f8 fe6d 	bl	8002738 <USBD_LL_Start>

  return USBD_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	370c      	adds	r7, #12
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bc80      	pop	{r7}
 8009a7a:	4770      	bx	lr

08009a7c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	460b      	mov	r3, r1
 8009a86:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009a88:	2302      	movs	r3, #2
 8009a8a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00c      	beq.n	8009ab0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	78fa      	ldrb	r2, [r7, #3]
 8009aa0:	4611      	mov	r1, r2
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	4798      	blx	r3
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d101      	bne.n	8009ab0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b082      	sub	sp, #8
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	78fa      	ldrb	r2, [r7, #3]
 8009ad0:	4611      	mov	r1, r2
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	4798      	blx	r3

  return USBD_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 fed7 	bl	800a8a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009b06:	461a      	mov	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009b14:	f003 031f 	and.w	r3, r3, #31
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d016      	beq.n	8009b4a <USBD_LL_SetupStage+0x6a>
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d81c      	bhi.n	8009b5a <USBD_LL_SetupStage+0x7a>
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d002      	beq.n	8009b2a <USBD_LL_SetupStage+0x4a>
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d008      	beq.n	8009b3a <USBD_LL_SetupStage+0x5a>
 8009b28:	e017      	b.n	8009b5a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009b30:	4619      	mov	r1, r3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f9ca 	bl	8009ecc <USBD_StdDevReq>
      break;
 8009b38:	e01a      	b.n	8009b70 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fa2c 	bl	8009fa0 <USBD_StdItfReq>
      break;
 8009b48:	e012      	b.n	8009b70 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 fa6c 	bl	800a030 <USBD_StdEPReq>
      break;
 8009b58:	e00a      	b.n	8009b70 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009b60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7f8 fe45 	bl	80027f8 <USBD_LL_StallEP>
      break;
 8009b6e:	bf00      	nop
  }

  return USBD_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b086      	sub	sp, #24
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	60f8      	str	r0, [r7, #12]
 8009b82:	460b      	mov	r3, r1
 8009b84:	607a      	str	r2, [r7, #4]
 8009b86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009b88:	7afb      	ldrb	r3, [r7, #11]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d14b      	bne.n	8009c26 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b94:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b9c:	2b03      	cmp	r3, #3
 8009b9e:	d134      	bne.n	8009c0a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	68da      	ldr	r2, [r3, #12]
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d919      	bls.n	8009be0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	68da      	ldr	r2, [r3, #12]
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	1ad2      	subs	r2, r2, r3
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	68da      	ldr	r2, [r3, #12]
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d203      	bcs.n	8009bce <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	e002      	b.n	8009bd4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	6879      	ldr	r1, [r7, #4]
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f000 ff56 	bl	800aa8a <USBD_CtlContinueRx>
 8009bde:	e038      	b.n	8009c52 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00a      	beq.n	8009c02 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d105      	bne.n	8009c02 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f000 ff53 	bl	800aaae <USBD_CtlSendStatus>
 8009c08:	e023      	b.n	8009c52 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c10:	2b05      	cmp	r3, #5
 8009c12:	d11e      	bne.n	8009c52 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f7f8 fdea 	bl	80027f8 <USBD_LL_StallEP>
 8009c24:	e015      	b.n	8009c52 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c2c:	699b      	ldr	r3, [r3, #24]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00d      	beq.n	8009c4e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	d108      	bne.n	8009c4e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	7afa      	ldrb	r2, [r7, #11]
 8009c46:	4611      	mov	r1, r2
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	4798      	blx	r3
 8009c4c:	e001      	b.n	8009c52 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c4e:	2302      	movs	r3, #2
 8009c50:	e000      	b.n	8009c54 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	460b      	mov	r3, r1
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009c6a:	7afb      	ldrb	r3, [r7, #11]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d17f      	bne.n	8009d70 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3314      	adds	r3, #20
 8009c74:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d15c      	bne.n	8009d3a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	68da      	ldr	r2, [r3, #12]
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d915      	bls.n	8009cb8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	68da      	ldr	r2, [r3, #12]
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	1ad2      	subs	r2, r2, r3
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	6879      	ldr	r1, [r7, #4]
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 fec0 	bl	800aa2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009caa:	2300      	movs	r3, #0
 8009cac:	2200      	movs	r2, #0
 8009cae:	2100      	movs	r1, #0
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f7f8 fe4d 	bl	8002950 <USBD_LL_PrepareReceive>
 8009cb6:	e04e      	b.n	8009d56 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	6912      	ldr	r2, [r2, #16]
 8009cc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cc4:	fb01 f202 	mul.w	r2, r1, r2
 8009cc8:	1a9b      	subs	r3, r3, r2
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d11c      	bne.n	8009d08 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	689a      	ldr	r2, [r3, #8]
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d316      	bcc.n	8009d08 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	689a      	ldr	r2, [r3, #8]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d20f      	bcs.n	8009d08 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ce8:	2200      	movs	r2, #0
 8009cea:	2100      	movs	r1, #0
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f000 fe9c 	bl	800aa2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2100      	movs	r1, #0
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f7f8 fe25 	bl	8002950 <USBD_LL_PrepareReceive>
 8009d06:	e026      	b.n	8009d56 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00a      	beq.n	8009d2a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d105      	bne.n	8009d2a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009d2a:	2180      	movs	r1, #128	; 0x80
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f7f8 fd63 	bl	80027f8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f000 fece 	bl	800aad4 <USBD_CtlReceiveStatus>
 8009d38:	e00d      	b.n	8009d56 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d40:	2b04      	cmp	r3, #4
 8009d42:	d004      	beq.n	8009d4e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d103      	bne.n	8009d56 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009d4e:	2180      	movs	r1, #128	; 0x80
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f7f8 fd51 	bl	80027f8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d11d      	bne.n	8009d9c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f7ff fe81 	bl	8009a68 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009d6e:	e015      	b.n	8009d9c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00d      	beq.n	8009d98 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	d108      	bne.n	8009d98 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d8c:	695b      	ldr	r3, [r3, #20]
 8009d8e:	7afa      	ldrb	r2, [r7, #11]
 8009d90:	4611      	mov	r1, r2
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	4798      	blx	r3
 8009d96:	e001      	b.n	8009d9c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009d98:	2302      	movs	r3, #2
 8009d9a:	e000      	b.n	8009d9e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3718      	adds	r7, #24
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b082      	sub	sp, #8
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009dae:	2340      	movs	r3, #64	; 0x40
 8009db0:	2200      	movs	r2, #0
 8009db2:	2100      	movs	r1, #0
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7f8 fcda 	bl	800276e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2240      	movs	r2, #64	; 0x40
 8009dc6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009dca:	2340      	movs	r3, #64	; 0x40
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2180      	movs	r1, #128	; 0x80
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7f8 fccc 	bl	800276e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2240      	movs	r2, #64	; 0x40
 8009de0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2201      	movs	r2, #1
 8009de6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d009      	beq.n	8009e1e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	6852      	ldr	r2, [r2, #4]
 8009e16:	b2d2      	uxtb	r2, r2
 8009e18:	4611      	mov	r1, r2
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	4798      	blx	r3
  }

  return USBD_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	78fa      	ldrb	r2, [r7, #3]
 8009e38:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bc80      	pop	{r7}
 8009e44:	4770      	bx	lr

08009e46 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b083      	sub	sp, #12
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2204      	movs	r2, #4
 8009e5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bc80      	pop	{r7}
 8009e6c:	4770      	bx	lr

08009e6e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b083      	sub	sp, #12
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d105      	bne.n	8009e8c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	370c      	adds	r7, #12
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bc80      	pop	{r7}
 8009e96:	4770      	bx	lr

08009e98 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ea6:	2b03      	cmp	r3, #3
 8009ea8:	d10b      	bne.n	8009ec2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d005      	beq.n	8009ec2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ebc:	69db      	ldr	r3, [r3, #28]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ee2:	2b40      	cmp	r3, #64	; 0x40
 8009ee4:	d005      	beq.n	8009ef2 <USBD_StdDevReq+0x26>
 8009ee6:	2b40      	cmp	r3, #64	; 0x40
 8009ee8:	d84f      	bhi.n	8009f8a <USBD_StdDevReq+0xbe>
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d009      	beq.n	8009f02 <USBD_StdDevReq+0x36>
 8009eee:	2b20      	cmp	r3, #32
 8009ef0:	d14b      	bne.n	8009f8a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	6839      	ldr	r1, [r7, #0]
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	4798      	blx	r3
      break;
 8009f00:	e048      	b.n	8009f94 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	785b      	ldrb	r3, [r3, #1]
 8009f06:	2b09      	cmp	r3, #9
 8009f08:	d839      	bhi.n	8009f7e <USBD_StdDevReq+0xb2>
 8009f0a:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <USBD_StdDevReq+0x44>)
 8009f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f10:	08009f61 	.word	0x08009f61
 8009f14:	08009f75 	.word	0x08009f75
 8009f18:	08009f7f 	.word	0x08009f7f
 8009f1c:	08009f6b 	.word	0x08009f6b
 8009f20:	08009f7f 	.word	0x08009f7f
 8009f24:	08009f43 	.word	0x08009f43
 8009f28:	08009f39 	.word	0x08009f39
 8009f2c:	08009f7f 	.word	0x08009f7f
 8009f30:	08009f57 	.word	0x08009f57
 8009f34:	08009f4d 	.word	0x08009f4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f9dc 	bl	800a2f8 <USBD_GetDescriptor>
          break;
 8009f40:	e022      	b.n	8009f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fb3f 	bl	800a5c8 <USBD_SetAddress>
          break;
 8009f4a:	e01d      	b.n	8009f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fb7e 	bl	800a650 <USBD_SetConfig>
          break;
 8009f54:	e018      	b.n	8009f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f56:	6839      	ldr	r1, [r7, #0]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fc07 	bl	800a76c <USBD_GetConfig>
          break;
 8009f5e:	e013      	b.n	8009f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fc37 	bl	800a7d6 <USBD_GetStatus>
          break;
 8009f68:	e00e      	b.n	8009f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fc65 	bl	800a83c <USBD_SetFeature>
          break;
 8009f72:	e009      	b.n	8009f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009f74:	6839      	ldr	r1, [r7, #0]
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fc74 	bl	800a864 <USBD_ClrFeature>
          break;
 8009f7c:	e004      	b.n	8009f88 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009f7e:	6839      	ldr	r1, [r7, #0]
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fccc 	bl	800a91e <USBD_CtlError>
          break;
 8009f86:	bf00      	nop
      }
      break;
 8009f88:	e004      	b.n	8009f94 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009f8a:	6839      	ldr	r1, [r7, #0]
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fcc6 	bl	800a91e <USBD_CtlError>
      break;
 8009f92:	bf00      	nop
  }

  return ret;
 8009f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop

08009fa0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fb6:	2b40      	cmp	r3, #64	; 0x40
 8009fb8:	d005      	beq.n	8009fc6 <USBD_StdItfReq+0x26>
 8009fba:	2b40      	cmp	r3, #64	; 0x40
 8009fbc:	d82e      	bhi.n	800a01c <USBD_StdItfReq+0x7c>
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <USBD_StdItfReq+0x26>
 8009fc2:	2b20      	cmp	r3, #32
 8009fc4:	d12a      	bne.n	800a01c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d81d      	bhi.n	800a00e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	889b      	ldrh	r3, [r3, #4]
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d813      	bhi.n	800a004 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	4798      	blx	r3
 8009fea:	4603      	mov	r3, r0
 8009fec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	88db      	ldrh	r3, [r3, #6]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d110      	bne.n	800a018 <USBD_StdItfReq+0x78>
 8009ff6:	7bfb      	ldrb	r3, [r7, #15]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10d      	bne.n	800a018 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fd56 	bl	800aaae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a002:	e009      	b.n	800a018 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a004:	6839      	ldr	r1, [r7, #0]
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fc89 	bl	800a91e <USBD_CtlError>
          break;
 800a00c:	e004      	b.n	800a018 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a00e:	6839      	ldr	r1, [r7, #0]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fc84 	bl	800a91e <USBD_CtlError>
          break;
 800a016:	e000      	b.n	800a01a <USBD_StdItfReq+0x7a>
          break;
 800a018:	bf00      	nop
      }
      break;
 800a01a:	e004      	b.n	800a026 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a01c:	6839      	ldr	r1, [r7, #0]
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fc7d 	bl	800a91e <USBD_CtlError>
      break;
 800a024:	bf00      	nop
  }

  return USBD_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a03a:	2300      	movs	r3, #0
 800a03c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	889b      	ldrh	r3, [r3, #4]
 800a042:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a04c:	2b40      	cmp	r3, #64	; 0x40
 800a04e:	d007      	beq.n	800a060 <USBD_StdEPReq+0x30>
 800a050:	2b40      	cmp	r3, #64	; 0x40
 800a052:	f200 8146 	bhi.w	800a2e2 <USBD_StdEPReq+0x2b2>
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00a      	beq.n	800a070 <USBD_StdEPReq+0x40>
 800a05a:	2b20      	cmp	r3, #32
 800a05c:	f040 8141 	bne.w	800a2e2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	4798      	blx	r3
      break;
 800a06e:	e13d      	b.n	800a2ec <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a078:	2b20      	cmp	r3, #32
 800a07a:	d10a      	bne.n	800a092 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	6839      	ldr	r1, [r7, #0]
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	4798      	blx	r3
 800a08a:	4603      	mov	r3, r0
 800a08c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a08e:	7bfb      	ldrb	r3, [r7, #15]
 800a090:	e12d      	b.n	800a2ee <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	785b      	ldrb	r3, [r3, #1]
 800a096:	2b03      	cmp	r3, #3
 800a098:	d007      	beq.n	800a0aa <USBD_StdEPReq+0x7a>
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	f300 811b 	bgt.w	800a2d6 <USBD_StdEPReq+0x2a6>
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d072      	beq.n	800a18a <USBD_StdEPReq+0x15a>
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d03a      	beq.n	800a11e <USBD_StdEPReq+0xee>
 800a0a8:	e115      	b.n	800a2d6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d002      	beq.n	800a0ba <USBD_StdEPReq+0x8a>
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	d015      	beq.n	800a0e4 <USBD_StdEPReq+0xb4>
 800a0b8:	e02b      	b.n	800a112 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0ba:	7bbb      	ldrb	r3, [r7, #14]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00c      	beq.n	800a0da <USBD_StdEPReq+0xaa>
 800a0c0:	7bbb      	ldrb	r3, [r7, #14]
 800a0c2:	2b80      	cmp	r3, #128	; 0x80
 800a0c4:	d009      	beq.n	800a0da <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a0c6:	7bbb      	ldrb	r3, [r7, #14]
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7f8 fb94 	bl	80027f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a0d0:	2180      	movs	r1, #128	; 0x80
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7f8 fb90 	bl	80027f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a0d8:	e020      	b.n	800a11c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fc1e 	bl	800a91e <USBD_CtlError>
              break;
 800a0e2:	e01b      	b.n	800a11c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	885b      	ldrh	r3, [r3, #2]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10e      	bne.n	800a10a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a0ec:	7bbb      	ldrb	r3, [r7, #14]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00b      	beq.n	800a10a <USBD_StdEPReq+0xda>
 800a0f2:	7bbb      	ldrb	r3, [r7, #14]
 800a0f4:	2b80      	cmp	r3, #128	; 0x80
 800a0f6:	d008      	beq.n	800a10a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	88db      	ldrh	r3, [r3, #6]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d104      	bne.n	800a10a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a100:	7bbb      	ldrb	r3, [r7, #14]
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f7f8 fb77 	bl	80027f8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 fccf 	bl	800aaae <USBD_CtlSendStatus>

              break;
 800a110:	e004      	b.n	800a11c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fc02 	bl	800a91e <USBD_CtlError>
              break;
 800a11a:	bf00      	nop
          }
          break;
 800a11c:	e0e0      	b.n	800a2e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a124:	2b02      	cmp	r3, #2
 800a126:	d002      	beq.n	800a12e <USBD_StdEPReq+0xfe>
 800a128:	2b03      	cmp	r3, #3
 800a12a:	d015      	beq.n	800a158 <USBD_StdEPReq+0x128>
 800a12c:	e026      	b.n	800a17c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a12e:	7bbb      	ldrb	r3, [r7, #14]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00c      	beq.n	800a14e <USBD_StdEPReq+0x11e>
 800a134:	7bbb      	ldrb	r3, [r7, #14]
 800a136:	2b80      	cmp	r3, #128	; 0x80
 800a138:	d009      	beq.n	800a14e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a13a:	7bbb      	ldrb	r3, [r7, #14]
 800a13c:	4619      	mov	r1, r3
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7f8 fb5a 	bl	80027f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a144:	2180      	movs	r1, #128	; 0x80
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7f8 fb56 	bl	80027f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a14c:	e01c      	b.n	800a188 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fbe4 	bl	800a91e <USBD_CtlError>
              break;
 800a156:	e017      	b.n	800a188 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	885b      	ldrh	r3, [r3, #2]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d112      	bne.n	800a186 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a160:	7bbb      	ldrb	r3, [r7, #14]
 800a162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a166:	2b00      	cmp	r3, #0
 800a168:	d004      	beq.n	800a174 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a16a:	7bbb      	ldrb	r3, [r7, #14]
 800a16c:	4619      	mov	r1, r3
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7f8 fb61 	bl	8002836 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 fc9a 	bl	800aaae <USBD_CtlSendStatus>
              }
              break;
 800a17a:	e004      	b.n	800a186 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 fbcd 	bl	800a91e <USBD_CtlError>
              break;
 800a184:	e000      	b.n	800a188 <USBD_StdEPReq+0x158>
              break;
 800a186:	bf00      	nop
          }
          break;
 800a188:	e0aa      	b.n	800a2e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a190:	2b02      	cmp	r3, #2
 800a192:	d002      	beq.n	800a19a <USBD_StdEPReq+0x16a>
 800a194:	2b03      	cmp	r3, #3
 800a196:	d032      	beq.n	800a1fe <USBD_StdEPReq+0x1ce>
 800a198:	e097      	b.n	800a2ca <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a19a:	7bbb      	ldrb	r3, [r7, #14]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d007      	beq.n	800a1b0 <USBD_StdEPReq+0x180>
 800a1a0:	7bbb      	ldrb	r3, [r7, #14]
 800a1a2:	2b80      	cmp	r3, #128	; 0x80
 800a1a4:	d004      	beq.n	800a1b0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 fbb8 	bl	800a91e <USBD_CtlError>
                break;
 800a1ae:	e091      	b.n	800a2d4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	da0b      	bge.n	800a1d0 <USBD_StdEPReq+0x1a0>
 800a1b8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1be:	4613      	mov	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	4413      	add	r3, r2
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	3310      	adds	r3, #16
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	e00b      	b.n	800a1e8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a1d0:	7bbb      	ldrb	r3, [r7, #14]
 800a1d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	4413      	add	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fbfb 	bl	800a9f2 <USBD_CtlSendData>
              break;
 800a1fc:	e06a      	b.n	800a2d4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a1fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a202:	2b00      	cmp	r3, #0
 800a204:	da11      	bge.n	800a22a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a206:	7bbb      	ldrb	r3, [r7, #14]
 800a208:	f003 020f 	and.w	r2, r3, #15
 800a20c:	6879      	ldr	r1, [r7, #4]
 800a20e:	4613      	mov	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	4413      	add	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	440b      	add	r3, r1
 800a218:	3318      	adds	r3, #24
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d117      	bne.n	800a250 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fb7b 	bl	800a91e <USBD_CtlError>
                  break;
 800a228:	e054      	b.n	800a2d4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a22a:	7bbb      	ldrb	r3, [r7, #14]
 800a22c:	f003 020f 	and.w	r2, r3, #15
 800a230:	6879      	ldr	r1, [r7, #4]
 800a232:	4613      	mov	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4413      	add	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	440b      	add	r3, r1
 800a23c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d104      	bne.n	800a250 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a246:	6839      	ldr	r1, [r7, #0]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 fb68 	bl	800a91e <USBD_CtlError>
                  break;
 800a24e:	e041      	b.n	800a2d4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a254:	2b00      	cmp	r3, #0
 800a256:	da0b      	bge.n	800a270 <USBD_StdEPReq+0x240>
 800a258:	7bbb      	ldrb	r3, [r7, #14]
 800a25a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a25e:	4613      	mov	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4413      	add	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	3310      	adds	r3, #16
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	4413      	add	r3, r2
 800a26c:	3304      	adds	r3, #4
 800a26e:	e00b      	b.n	800a288 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a270:	7bbb      	ldrb	r3, [r7, #14]
 800a272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a276:	4613      	mov	r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	4413      	add	r3, r2
 800a286:	3304      	adds	r3, #4
 800a288:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a28a:	7bbb      	ldrb	r3, [r7, #14]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <USBD_StdEPReq+0x266>
 800a290:	7bbb      	ldrb	r3, [r7, #14]
 800a292:	2b80      	cmp	r3, #128	; 0x80
 800a294:	d103      	bne.n	800a29e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	2200      	movs	r2, #0
 800a29a:	601a      	str	r2, [r3, #0]
 800a29c:	e00e      	b.n	800a2bc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a29e:	7bbb      	ldrb	r3, [r7, #14]
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7f8 fae6 	bl	8002874 <USBD_LL_IsStallEP>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d003      	beq.n	800a2b6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	601a      	str	r2, [r3, #0]
 800a2b4:	e002      	b.n	800a2bc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	2202      	movs	r2, #2
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 fb95 	bl	800a9f2 <USBD_CtlSendData>
              break;
 800a2c8:	e004      	b.n	800a2d4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a2ca:	6839      	ldr	r1, [r7, #0]
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 fb26 	bl	800a91e <USBD_CtlError>
              break;
 800a2d2:	bf00      	nop
          }
          break;
 800a2d4:	e004      	b.n	800a2e0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 fb20 	bl	800a91e <USBD_CtlError>
          break;
 800a2de:	bf00      	nop
      }
      break;
 800a2e0:	e004      	b.n	800a2ec <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a2e2:	6839      	ldr	r1, [r7, #0]
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fb1a 	bl	800a91e <USBD_CtlError>
      break;
 800a2ea:	bf00      	nop
  }

  return ret;
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
	...

0800a2f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a302:	2300      	movs	r3, #0
 800a304:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a306:	2300      	movs	r3, #0
 800a308:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a30a:	2300      	movs	r3, #0
 800a30c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	885b      	ldrh	r3, [r3, #2]
 800a312:	0a1b      	lsrs	r3, r3, #8
 800a314:	b29b      	uxth	r3, r3
 800a316:	3b01      	subs	r3, #1
 800a318:	2b06      	cmp	r3, #6
 800a31a:	f200 8128 	bhi.w	800a56e <USBD_GetDescriptor+0x276>
 800a31e:	a201      	add	r2, pc, #4	; (adr r2, 800a324 <USBD_GetDescriptor+0x2c>)
 800a320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a324:	0800a341 	.word	0x0800a341
 800a328:	0800a359 	.word	0x0800a359
 800a32c:	0800a399 	.word	0x0800a399
 800a330:	0800a56f 	.word	0x0800a56f
 800a334:	0800a56f 	.word	0x0800a56f
 800a338:	0800a50f 	.word	0x0800a50f
 800a33c:	0800a53b 	.word	0x0800a53b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	7c12      	ldrb	r2, [r2, #16]
 800a34c:	f107 0108 	add.w	r1, r7, #8
 800a350:	4610      	mov	r0, r2
 800a352:	4798      	blx	r3
 800a354:	60f8      	str	r0, [r7, #12]
      break;
 800a356:	e112      	b.n	800a57e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	7c1b      	ldrb	r3, [r3, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10d      	bne.n	800a37c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a368:	f107 0208 	add.w	r2, r7, #8
 800a36c:	4610      	mov	r0, r2
 800a36e:	4798      	blx	r3
 800a370:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	3301      	adds	r3, #1
 800a376:	2202      	movs	r2, #2
 800a378:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a37a:	e100      	b.n	800a57e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a384:	f107 0208 	add.w	r2, r7, #8
 800a388:	4610      	mov	r0, r2
 800a38a:	4798      	blx	r3
 800a38c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	3301      	adds	r3, #1
 800a392:	2202      	movs	r2, #2
 800a394:	701a      	strb	r2, [r3, #0]
      break;
 800a396:	e0f2      	b.n	800a57e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	885b      	ldrh	r3, [r3, #2]
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b05      	cmp	r3, #5
 800a3a0:	f200 80ac 	bhi.w	800a4fc <USBD_GetDescriptor+0x204>
 800a3a4:	a201      	add	r2, pc, #4	; (adr r2, 800a3ac <USBD_GetDescriptor+0xb4>)
 800a3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3aa:	bf00      	nop
 800a3ac:	0800a3c5 	.word	0x0800a3c5
 800a3b0:	0800a3f9 	.word	0x0800a3f9
 800a3b4:	0800a42d 	.word	0x0800a42d
 800a3b8:	0800a461 	.word	0x0800a461
 800a3bc:	0800a495 	.word	0x0800a495
 800a3c0:	0800a4c9 	.word	0x0800a4c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00b      	beq.n	800a3e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	7c12      	ldrb	r2, [r2, #16]
 800a3dc:	f107 0108 	add.w	r1, r7, #8
 800a3e0:	4610      	mov	r0, r2
 800a3e2:	4798      	blx	r3
 800a3e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3e6:	e091      	b.n	800a50c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3e8:	6839      	ldr	r1, [r7, #0]
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fa97 	bl	800a91e <USBD_CtlError>
            err++;
 800a3f0:	7afb      	ldrb	r3, [r7, #11]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a3f6:	e089      	b.n	800a50c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00b      	beq.n	800a41c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	7c12      	ldrb	r2, [r2, #16]
 800a410:	f107 0108 	add.w	r1, r7, #8
 800a414:	4610      	mov	r0, r2
 800a416:	4798      	blx	r3
 800a418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a41a:	e077      	b.n	800a50c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a41c:	6839      	ldr	r1, [r7, #0]
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 fa7d 	bl	800a91e <USBD_CtlError>
            err++;
 800a424:	7afb      	ldrb	r3, [r7, #11]
 800a426:	3301      	adds	r3, #1
 800a428:	72fb      	strb	r3, [r7, #11]
          break;
 800a42a:	e06f      	b.n	800a50c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00b      	beq.n	800a450 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	7c12      	ldrb	r2, [r2, #16]
 800a444:	f107 0108 	add.w	r1, r7, #8
 800a448:	4610      	mov	r0, r2
 800a44a:	4798      	blx	r3
 800a44c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a44e:	e05d      	b.n	800a50c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a450:	6839      	ldr	r1, [r7, #0]
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fa63 	bl	800a91e <USBD_CtlError>
            err++;
 800a458:	7afb      	ldrb	r3, [r7, #11]
 800a45a:	3301      	adds	r3, #1
 800a45c:	72fb      	strb	r3, [r7, #11]
          break;
 800a45e:	e055      	b.n	800a50c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00b      	beq.n	800a484 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	7c12      	ldrb	r2, [r2, #16]
 800a478:	f107 0108 	add.w	r1, r7, #8
 800a47c:	4610      	mov	r0, r2
 800a47e:	4798      	blx	r3
 800a480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a482:	e043      	b.n	800a50c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a484:	6839      	ldr	r1, [r7, #0]
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 fa49 	bl	800a91e <USBD_CtlError>
            err++;
 800a48c:	7afb      	ldrb	r3, [r7, #11]
 800a48e:	3301      	adds	r3, #1
 800a490:	72fb      	strb	r3, [r7, #11]
          break;
 800a492:	e03b      	b.n	800a50c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a49a:	695b      	ldr	r3, [r3, #20]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00b      	beq.n	800a4b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a4a6:	695b      	ldr	r3, [r3, #20]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	7c12      	ldrb	r2, [r2, #16]
 800a4ac:	f107 0108 	add.w	r1, r7, #8
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	4798      	blx	r3
 800a4b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4b6:	e029      	b.n	800a50c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4b8:	6839      	ldr	r1, [r7, #0]
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 fa2f 	bl	800a91e <USBD_CtlError>
            err++;
 800a4c0:	7afb      	ldrb	r3, [r7, #11]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a4c6:	e021      	b.n	800a50c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00b      	beq.n	800a4ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a4da:	699b      	ldr	r3, [r3, #24]
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	7c12      	ldrb	r2, [r2, #16]
 800a4e0:	f107 0108 	add.w	r1, r7, #8
 800a4e4:	4610      	mov	r0, r2
 800a4e6:	4798      	blx	r3
 800a4e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ea:	e00f      	b.n	800a50c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fa15 	bl	800a91e <USBD_CtlError>
            err++;
 800a4f4:	7afb      	ldrb	r3, [r7, #11]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a4fa:	e007      	b.n	800a50c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a4fc:	6839      	ldr	r1, [r7, #0]
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 fa0d 	bl	800a91e <USBD_CtlError>
          err++;
 800a504:	7afb      	ldrb	r3, [r7, #11]
 800a506:	3301      	adds	r3, #1
 800a508:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a50a:	e038      	b.n	800a57e <USBD_GetDescriptor+0x286>
 800a50c:	e037      	b.n	800a57e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	7c1b      	ldrb	r3, [r3, #16]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d109      	bne.n	800a52a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a51c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a51e:	f107 0208 	add.w	r2, r7, #8
 800a522:	4610      	mov	r0, r2
 800a524:	4798      	blx	r3
 800a526:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a528:	e029      	b.n	800a57e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a52a:	6839      	ldr	r1, [r7, #0]
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 f9f6 	bl	800a91e <USBD_CtlError>
        err++;
 800a532:	7afb      	ldrb	r3, [r7, #11]
 800a534:	3301      	adds	r3, #1
 800a536:	72fb      	strb	r3, [r7, #11]
      break;
 800a538:	e021      	b.n	800a57e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	7c1b      	ldrb	r3, [r3, #16]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d10d      	bne.n	800a55e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54a:	f107 0208 	add.w	r2, r7, #8
 800a54e:	4610      	mov	r0, r2
 800a550:	4798      	blx	r3
 800a552:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	3301      	adds	r3, #1
 800a558:	2207      	movs	r2, #7
 800a55a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a55c:	e00f      	b.n	800a57e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a55e:	6839      	ldr	r1, [r7, #0]
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 f9dc 	bl	800a91e <USBD_CtlError>
        err++;
 800a566:	7afb      	ldrb	r3, [r7, #11]
 800a568:	3301      	adds	r3, #1
 800a56a:	72fb      	strb	r3, [r7, #11]
      break;
 800a56c:	e007      	b.n	800a57e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a56e:	6839      	ldr	r1, [r7, #0]
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 f9d4 	bl	800a91e <USBD_CtlError>
      err++;
 800a576:	7afb      	ldrb	r3, [r7, #11]
 800a578:	3301      	adds	r3, #1
 800a57a:	72fb      	strb	r3, [r7, #11]
      break;
 800a57c:	bf00      	nop
  }

  if (err != 0U)
 800a57e:	7afb      	ldrb	r3, [r7, #11]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d11c      	bne.n	800a5be <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a584:	893b      	ldrh	r3, [r7, #8]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d011      	beq.n	800a5ae <USBD_GetDescriptor+0x2b6>
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	88db      	ldrh	r3, [r3, #6]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00d      	beq.n	800a5ae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	88da      	ldrh	r2, [r3, #6]
 800a596:	893b      	ldrh	r3, [r7, #8]
 800a598:	4293      	cmp	r3, r2
 800a59a:	bf28      	it	cs
 800a59c:	4613      	movcs	r3, r2
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a5a2:	893b      	ldrh	r3, [r7, #8]
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	68f9      	ldr	r1, [r7, #12]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fa22 	bl	800a9f2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	88db      	ldrh	r3, [r3, #6]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d104      	bne.n	800a5c0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fa79 	bl	800aaae <USBD_CtlSendStatus>
 800a5bc:	e000      	b.n	800a5c0 <USBD_GetDescriptor+0x2c8>
    return;
 800a5be:	bf00      	nop
    }
  }
}
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop

0800a5c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	889b      	ldrh	r3, [r3, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d130      	bne.n	800a63c <USBD_SetAddress+0x74>
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	88db      	ldrh	r3, [r3, #6]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d12c      	bne.n	800a63c <USBD_SetAddress+0x74>
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	885b      	ldrh	r3, [r3, #2]
 800a5e6:	2b7f      	cmp	r3, #127	; 0x7f
 800a5e8:	d828      	bhi.n	800a63c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	885b      	ldrh	r3, [r3, #2]
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d104      	bne.n	800a60a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a600:	6839      	ldr	r1, [r7, #0]
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f98b 	bl	800a91e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a608:	e01d      	b.n	800a646 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	7bfa      	ldrb	r2, [r7, #15]
 800a60e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a612:	7bfb      	ldrb	r3, [r7, #15]
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f7f8 f958 	bl	80028cc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 fa46 	bl	800aaae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a622:	7bfb      	ldrb	r3, [r7, #15]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d004      	beq.n	800a632 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2202      	movs	r2, #2
 800a62c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a630:	e009      	b.n	800a646 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a63a:	e004      	b.n	800a646 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f96d 	bl	800a91e <USBD_CtlError>
  }
}
 800a644:	bf00      	nop
 800a646:	bf00      	nop
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
	...

0800a650 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	885b      	ldrh	r3, [r3, #2]
 800a65e:	b2da      	uxtb	r2, r3
 800a660:	4b41      	ldr	r3, [pc, #260]	; (800a768 <USBD_SetConfig+0x118>)
 800a662:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a664:	4b40      	ldr	r3, [pc, #256]	; (800a768 <USBD_SetConfig+0x118>)
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d904      	bls.n	800a676 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f955 	bl	800a91e <USBD_CtlError>
 800a674:	e075      	b.n	800a762 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d002      	beq.n	800a686 <USBD_SetConfig+0x36>
 800a680:	2b03      	cmp	r3, #3
 800a682:	d023      	beq.n	800a6cc <USBD_SetConfig+0x7c>
 800a684:	e062      	b.n	800a74c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a686:	4b38      	ldr	r3, [pc, #224]	; (800a768 <USBD_SetConfig+0x118>)
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d01a      	beq.n	800a6c4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a68e:	4b36      	ldr	r3, [pc, #216]	; (800a768 <USBD_SetConfig+0x118>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	461a      	mov	r2, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2203      	movs	r2, #3
 800a69c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a6a0:	4b31      	ldr	r3, [pc, #196]	; (800a768 <USBD_SetConfig+0x118>)
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f7ff f9e8 	bl	8009a7c <USBD_SetClassConfig>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d104      	bne.n	800a6bc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a6b2:	6839      	ldr	r1, [r7, #0]
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f932 	bl	800a91e <USBD_CtlError>
            return;
 800a6ba:	e052      	b.n	800a762 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 f9f6 	bl	800aaae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a6c2:	e04e      	b.n	800a762 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f9f2 	bl	800aaae <USBD_CtlSendStatus>
        break;
 800a6ca:	e04a      	b.n	800a762 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a6cc:	4b26      	ldr	r3, [pc, #152]	; (800a768 <USBD_SetConfig+0x118>)
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d112      	bne.n	800a6fa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a6dc:	4b22      	ldr	r3, [pc, #136]	; (800a768 <USBD_SetConfig+0x118>)
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a6e6:	4b20      	ldr	r3, [pc, #128]	; (800a768 <USBD_SetConfig+0x118>)
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7ff f9e4 	bl	8009aba <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f9db 	bl	800aaae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a6f8:	e033      	b.n	800a762 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a6fa:	4b1b      	ldr	r3, [pc, #108]	; (800a768 <USBD_SetConfig+0x118>)
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	461a      	mov	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	429a      	cmp	r2, r3
 800a706:	d01d      	beq.n	800a744 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	4619      	mov	r1, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7ff f9d2 	bl	8009aba <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a716:	4b14      	ldr	r3, [pc, #80]	; (800a768 <USBD_SetConfig+0x118>)
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	461a      	mov	r2, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a720:	4b11      	ldr	r3, [pc, #68]	; (800a768 <USBD_SetConfig+0x118>)
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	4619      	mov	r1, r3
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7ff f9a8 	bl	8009a7c <USBD_SetClassConfig>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d104      	bne.n	800a73c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a732:	6839      	ldr	r1, [r7, #0]
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f8f2 	bl	800a91e <USBD_CtlError>
            return;
 800a73a:	e012      	b.n	800a762 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 f9b6 	bl	800aaae <USBD_CtlSendStatus>
        break;
 800a742:	e00e      	b.n	800a762 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 f9b2 	bl	800aaae <USBD_CtlSendStatus>
        break;
 800a74a:	e00a      	b.n	800a762 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f8e5 	bl	800a91e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a754:	4b04      	ldr	r3, [pc, #16]	; (800a768 <USBD_SetConfig+0x118>)
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7ff f9ad 	bl	8009aba <USBD_ClrClassConfig>
        break;
 800a760:	bf00      	nop
    }
  }
}
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	20001658 	.word	0x20001658

0800a76c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	88db      	ldrh	r3, [r3, #6]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d004      	beq.n	800a788 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a77e:	6839      	ldr	r1, [r7, #0]
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 f8cc 	bl	800a91e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a786:	e022      	b.n	800a7ce <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a78e:	2b02      	cmp	r3, #2
 800a790:	dc02      	bgt.n	800a798 <USBD_GetConfig+0x2c>
 800a792:	2b00      	cmp	r3, #0
 800a794:	dc03      	bgt.n	800a79e <USBD_GetConfig+0x32>
 800a796:	e015      	b.n	800a7c4 <USBD_GetConfig+0x58>
 800a798:	2b03      	cmp	r3, #3
 800a79a:	d00b      	beq.n	800a7b4 <USBD_GetConfig+0x48>
 800a79c:	e012      	b.n	800a7c4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	3308      	adds	r3, #8
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f920 	bl	800a9f2 <USBD_CtlSendData>
        break;
 800a7b2:	e00c      	b.n	800a7ce <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 f918 	bl	800a9f2 <USBD_CtlSendData>
        break;
 800a7c2:	e004      	b.n	800a7ce <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f8a9 	bl	800a91e <USBD_CtlError>
        break;
 800a7cc:	bf00      	nop
}
 800a7ce:	bf00      	nop
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b082      	sub	sp, #8
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d81e      	bhi.n	800a82a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	88db      	ldrh	r3, [r3, #6]
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d004      	beq.n	800a7fe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a7f4:	6839      	ldr	r1, [r7, #0]
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f891 	bl	800a91e <USBD_CtlError>
        break;
 800a7fc:	e01a      	b.n	800a834 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d005      	beq.n	800a81a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	f043 0202 	orr.w	r2, r3, #2
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	330c      	adds	r3, #12
 800a81e:	2202      	movs	r2, #2
 800a820:	4619      	mov	r1, r3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 f8e5 	bl	800a9f2 <USBD_CtlSendData>
      break;
 800a828:	e004      	b.n	800a834 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a82a:	6839      	ldr	r1, [r7, #0]
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f876 	bl	800a91e <USBD_CtlError>
      break;
 800a832:	bf00      	nop
  }
}
 800a834:	bf00      	nop
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	885b      	ldrh	r3, [r3, #2]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d106      	bne.n	800a85c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2201      	movs	r2, #1
 800a852:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f929 	bl	800aaae <USBD_CtlSendStatus>
  }
}
 800a85c:	bf00      	nop
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a874:	3b01      	subs	r3, #1
 800a876:	2b02      	cmp	r3, #2
 800a878:	d80b      	bhi.n	800a892 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	885b      	ldrh	r3, [r3, #2]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d10c      	bne.n	800a89c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f90f 	bl	800aaae <USBD_CtlSendStatus>
      }
      break;
 800a890:	e004      	b.n	800a89c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f842 	bl	800a91e <USBD_CtlError>
      break;
 800a89a:	e000      	b.n	800a89e <USBD_ClrFeature+0x3a>
      break;
 800a89c:	bf00      	nop
  }
}
 800a89e:	bf00      	nop
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b083      	sub	sp, #12
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	781a      	ldrb	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	785a      	ldrb	r2, [r3, #1]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	3302      	adds	r3, #2
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	b29a      	uxth	r2, r3
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	3303      	adds	r3, #3
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	021b      	lsls	r3, r3, #8
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	4413      	add	r3, r2
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	3304      	adds	r3, #4
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	3305      	adds	r3, #5
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	021b      	lsls	r3, r3, #8
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	4413      	add	r3, r2
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	3306      	adds	r3, #6
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	b29a      	uxth	r2, r3
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	3307      	adds	r3, #7
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	b29b      	uxth	r3, r3
 800a908:	021b      	lsls	r3, r3, #8
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	4413      	add	r3, r2
 800a90e:	b29a      	uxth	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	80da      	strh	r2, [r3, #6]

}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	bc80      	pop	{r7}
 800a91c:	4770      	bx	lr

0800a91e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b082      	sub	sp, #8
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a928:	2180      	movs	r1, #128	; 0x80
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f7f7 ff64 	bl	80027f8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a930:	2100      	movs	r1, #0
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f7f7 ff60 	bl	80027f8 <USBD_LL_StallEP>
}
 800a938:	bf00      	nop
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a94c:	2300      	movs	r3, #0
 800a94e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d032      	beq.n	800a9bc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	f000 f834 	bl	800a9c4 <USBD_GetLen>
 800a95c:	4603      	mov	r3, r0
 800a95e:	3301      	adds	r3, #1
 800a960:	b29b      	uxth	r3, r3
 800a962:	005b      	lsls	r3, r3, #1
 800a964:	b29a      	uxth	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a96a:	7dfb      	ldrb	r3, [r7, #23]
 800a96c:	1c5a      	adds	r2, r3, #1
 800a96e:	75fa      	strb	r2, [r7, #23]
 800a970:	461a      	mov	r2, r3
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	4413      	add	r3, r2
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	7812      	ldrb	r2, [r2, #0]
 800a97a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a97c:	7dfb      	ldrb	r3, [r7, #23]
 800a97e:	1c5a      	adds	r2, r3, #1
 800a980:	75fa      	strb	r2, [r7, #23]
 800a982:	461a      	mov	r2, r3
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	4413      	add	r3, r2
 800a988:	2203      	movs	r2, #3
 800a98a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a98c:	e012      	b.n	800a9b4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	1c5a      	adds	r2, r3, #1
 800a992:	60fa      	str	r2, [r7, #12]
 800a994:	7dfa      	ldrb	r2, [r7, #23]
 800a996:	1c51      	adds	r1, r2, #1
 800a998:	75f9      	strb	r1, [r7, #23]
 800a99a:	4611      	mov	r1, r2
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	440a      	add	r2, r1
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a9a4:	7dfb      	ldrb	r3, [r7, #23]
 800a9a6:	1c5a      	adds	r2, r3, #1
 800a9a8:	75fa      	strb	r2, [r7, #23]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1e8      	bne.n	800a98e <USBD_GetString+0x4e>
    }
  }
}
 800a9bc:	bf00      	nop
 800a9be:	3718      	adds	r7, #24
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a9d0:	e005      	b.n	800a9de <USBD_GetLen+0x1a>
  {
    len++;
 800a9d2:	7bfb      	ldrb	r3, [r7, #15]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1f5      	bne.n	800a9d2 <USBD_GetLen+0xe>
  }

  return len;
 800a9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3714      	adds	r7, #20
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bc80      	pop	{r7}
 800a9f0:	4770      	bx	lr

0800a9f2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b084      	sub	sp, #16
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	60f8      	str	r0, [r7, #12]
 800a9fa:	60b9      	str	r1, [r7, #8]
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2202      	movs	r2, #2
 800aa04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800aa08:	88fa      	ldrh	r2, [r7, #6]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800aa0e:	88fa      	ldrh	r2, [r7, #6]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa14:	88fb      	ldrh	r3, [r7, #6]
 800aa16:	68ba      	ldr	r2, [r7, #8]
 800aa18:	2100      	movs	r1, #0
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f7f7 ff75 	bl	800290a <USBD_LL_Transmit>

  return USBD_OK;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b084      	sub	sp, #16
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	60f8      	str	r0, [r7, #12]
 800aa32:	60b9      	str	r1, [r7, #8]
 800aa34:	4613      	mov	r3, r2
 800aa36:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa38:	88fb      	ldrh	r3, [r7, #6]
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f7f7 ff63 	bl	800290a <USBD_LL_Transmit>

  return USBD_OK;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b084      	sub	sp, #16
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	60f8      	str	r0, [r7, #12]
 800aa56:	60b9      	str	r1, [r7, #8]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2203      	movs	r2, #3
 800aa60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aa64:	88fa      	ldrh	r2, [r7, #6]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800aa6c:	88fa      	ldrh	r2, [r7, #6]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa74:	88fb      	ldrh	r3, [r7, #6]
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	2100      	movs	r1, #0
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f7f7 ff68 	bl	8002950 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b084      	sub	sp, #16
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	60f8      	str	r0, [r7, #12]
 800aa92:	60b9      	str	r1, [r7, #8]
 800aa94:	4613      	mov	r3, r2
 800aa96:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa98:	88fb      	ldrh	r3, [r7, #6]
 800aa9a:	68ba      	ldr	r2, [r7, #8]
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f7f7 ff56 	bl	8002950 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b082      	sub	sp, #8
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2204      	movs	r2, #4
 800aaba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aabe:	2300      	movs	r3, #0
 800aac0:	2200      	movs	r2, #0
 800aac2:	2100      	movs	r1, #0
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f7f7 ff20 	bl	800290a <USBD_LL_Transmit>

  return USBD_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2205      	movs	r2, #5
 800aae0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aae4:	2300      	movs	r3, #0
 800aae6:	2200      	movs	r2, #0
 800aae8:	2100      	movs	r1, #0
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f7f7 ff30 	bl	8002950 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
	...

0800aafc <__errno>:
 800aafc:	4b01      	ldr	r3, [pc, #4]	; (800ab04 <__errno+0x8>)
 800aafe:	6818      	ldr	r0, [r3, #0]
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	20000188 	.word	0x20000188

0800ab08 <__libc_init_array>:
 800ab08:	b570      	push	{r4, r5, r6, lr}
 800ab0a:	2600      	movs	r6, #0
 800ab0c:	4d0c      	ldr	r5, [pc, #48]	; (800ab40 <__libc_init_array+0x38>)
 800ab0e:	4c0d      	ldr	r4, [pc, #52]	; (800ab44 <__libc_init_array+0x3c>)
 800ab10:	1b64      	subs	r4, r4, r5
 800ab12:	10a4      	asrs	r4, r4, #2
 800ab14:	42a6      	cmp	r6, r4
 800ab16:	d109      	bne.n	800ab2c <__libc_init_array+0x24>
 800ab18:	f002 ff70 	bl	800d9fc <_init>
 800ab1c:	2600      	movs	r6, #0
 800ab1e:	4d0a      	ldr	r5, [pc, #40]	; (800ab48 <__libc_init_array+0x40>)
 800ab20:	4c0a      	ldr	r4, [pc, #40]	; (800ab4c <__libc_init_array+0x44>)
 800ab22:	1b64      	subs	r4, r4, r5
 800ab24:	10a4      	asrs	r4, r4, #2
 800ab26:	42a6      	cmp	r6, r4
 800ab28:	d105      	bne.n	800ab36 <__libc_init_array+0x2e>
 800ab2a:	bd70      	pop	{r4, r5, r6, pc}
 800ab2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab30:	4798      	blx	r3
 800ab32:	3601      	adds	r6, #1
 800ab34:	e7ee      	b.n	800ab14 <__libc_init_array+0xc>
 800ab36:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab3a:	4798      	blx	r3
 800ab3c:	3601      	adds	r6, #1
 800ab3e:	e7f2      	b.n	800ab26 <__libc_init_array+0x1e>
 800ab40:	0800dfbc 	.word	0x0800dfbc
 800ab44:	0800dfbc 	.word	0x0800dfbc
 800ab48:	0800dfbc 	.word	0x0800dfbc
 800ab4c:	0800dfc0 	.word	0x0800dfc0

0800ab50 <memset>:
 800ab50:	4603      	mov	r3, r0
 800ab52:	4402      	add	r2, r0
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d100      	bne.n	800ab5a <memset+0xa>
 800ab58:	4770      	bx	lr
 800ab5a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab5e:	e7f9      	b.n	800ab54 <memset+0x4>

0800ab60 <__cvt>:
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab66:	461f      	mov	r7, r3
 800ab68:	bfbb      	ittet	lt
 800ab6a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800ab6e:	461f      	movlt	r7, r3
 800ab70:	2300      	movge	r3, #0
 800ab72:	232d      	movlt	r3, #45	; 0x2d
 800ab74:	b088      	sub	sp, #32
 800ab76:	4614      	mov	r4, r2
 800ab78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ab7c:	7013      	strb	r3, [r2, #0]
 800ab7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab80:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800ab84:	f023 0820 	bic.w	r8, r3, #32
 800ab88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab8c:	d005      	beq.n	800ab9a <__cvt+0x3a>
 800ab8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ab92:	d100      	bne.n	800ab96 <__cvt+0x36>
 800ab94:	3501      	adds	r5, #1
 800ab96:	2302      	movs	r3, #2
 800ab98:	e000      	b.n	800ab9c <__cvt+0x3c>
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	aa07      	add	r2, sp, #28
 800ab9e:	9204      	str	r2, [sp, #16]
 800aba0:	aa06      	add	r2, sp, #24
 800aba2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800aba6:	e9cd 3500 	strd	r3, r5, [sp]
 800abaa:	4622      	mov	r2, r4
 800abac:	463b      	mov	r3, r7
 800abae:	f000 fd0f 	bl	800b5d0 <_dtoa_r>
 800abb2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800abb6:	4606      	mov	r6, r0
 800abb8:	d102      	bne.n	800abc0 <__cvt+0x60>
 800abba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abbc:	07db      	lsls	r3, r3, #31
 800abbe:	d522      	bpl.n	800ac06 <__cvt+0xa6>
 800abc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800abc4:	eb06 0905 	add.w	r9, r6, r5
 800abc8:	d110      	bne.n	800abec <__cvt+0x8c>
 800abca:	7833      	ldrb	r3, [r6, #0]
 800abcc:	2b30      	cmp	r3, #48	; 0x30
 800abce:	d10a      	bne.n	800abe6 <__cvt+0x86>
 800abd0:	2200      	movs	r2, #0
 800abd2:	2300      	movs	r3, #0
 800abd4:	4620      	mov	r0, r4
 800abd6:	4639      	mov	r1, r7
 800abd8:	f7f5 fee6 	bl	80009a8 <__aeabi_dcmpeq>
 800abdc:	b918      	cbnz	r0, 800abe6 <__cvt+0x86>
 800abde:	f1c5 0501 	rsb	r5, r5, #1
 800abe2:	f8ca 5000 	str.w	r5, [sl]
 800abe6:	f8da 3000 	ldr.w	r3, [sl]
 800abea:	4499      	add	r9, r3
 800abec:	2200      	movs	r2, #0
 800abee:	2300      	movs	r3, #0
 800abf0:	4620      	mov	r0, r4
 800abf2:	4639      	mov	r1, r7
 800abf4:	f7f5 fed8 	bl	80009a8 <__aeabi_dcmpeq>
 800abf8:	b108      	cbz	r0, 800abfe <__cvt+0x9e>
 800abfa:	f8cd 901c 	str.w	r9, [sp, #28]
 800abfe:	2230      	movs	r2, #48	; 0x30
 800ac00:	9b07      	ldr	r3, [sp, #28]
 800ac02:	454b      	cmp	r3, r9
 800ac04:	d307      	bcc.n	800ac16 <__cvt+0xb6>
 800ac06:	4630      	mov	r0, r6
 800ac08:	9b07      	ldr	r3, [sp, #28]
 800ac0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ac0c:	1b9b      	subs	r3, r3, r6
 800ac0e:	6013      	str	r3, [r2, #0]
 800ac10:	b008      	add	sp, #32
 800ac12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac16:	1c59      	adds	r1, r3, #1
 800ac18:	9107      	str	r1, [sp, #28]
 800ac1a:	701a      	strb	r2, [r3, #0]
 800ac1c:	e7f0      	b.n	800ac00 <__cvt+0xa0>

0800ac1e <__exponent>:
 800ac1e:	4603      	mov	r3, r0
 800ac20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac22:	2900      	cmp	r1, #0
 800ac24:	f803 2b02 	strb.w	r2, [r3], #2
 800ac28:	bfb6      	itet	lt
 800ac2a:	222d      	movlt	r2, #45	; 0x2d
 800ac2c:	222b      	movge	r2, #43	; 0x2b
 800ac2e:	4249      	neglt	r1, r1
 800ac30:	2909      	cmp	r1, #9
 800ac32:	7042      	strb	r2, [r0, #1]
 800ac34:	dd2b      	ble.n	800ac8e <__exponent+0x70>
 800ac36:	f10d 0407 	add.w	r4, sp, #7
 800ac3a:	46a4      	mov	ip, r4
 800ac3c:	270a      	movs	r7, #10
 800ac3e:	fb91 f6f7 	sdiv	r6, r1, r7
 800ac42:	460a      	mov	r2, r1
 800ac44:	46a6      	mov	lr, r4
 800ac46:	fb07 1516 	mls	r5, r7, r6, r1
 800ac4a:	2a63      	cmp	r2, #99	; 0x63
 800ac4c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800ac50:	4631      	mov	r1, r6
 800ac52:	f104 34ff 	add.w	r4, r4, #4294967295
 800ac56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ac5a:	dcf0      	bgt.n	800ac3e <__exponent+0x20>
 800ac5c:	3130      	adds	r1, #48	; 0x30
 800ac5e:	f1ae 0502 	sub.w	r5, lr, #2
 800ac62:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ac66:	4629      	mov	r1, r5
 800ac68:	1c44      	adds	r4, r0, #1
 800ac6a:	4561      	cmp	r1, ip
 800ac6c:	d30a      	bcc.n	800ac84 <__exponent+0x66>
 800ac6e:	f10d 0209 	add.w	r2, sp, #9
 800ac72:	eba2 020e 	sub.w	r2, r2, lr
 800ac76:	4565      	cmp	r5, ip
 800ac78:	bf88      	it	hi
 800ac7a:	2200      	movhi	r2, #0
 800ac7c:	4413      	add	r3, r2
 800ac7e:	1a18      	subs	r0, r3, r0
 800ac80:	b003      	add	sp, #12
 800ac82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac84:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac88:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ac8c:	e7ed      	b.n	800ac6a <__exponent+0x4c>
 800ac8e:	2330      	movs	r3, #48	; 0x30
 800ac90:	3130      	adds	r1, #48	; 0x30
 800ac92:	7083      	strb	r3, [r0, #2]
 800ac94:	70c1      	strb	r1, [r0, #3]
 800ac96:	1d03      	adds	r3, r0, #4
 800ac98:	e7f1      	b.n	800ac7e <__exponent+0x60>
	...

0800ac9c <_printf_float>:
 800ac9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca0:	b091      	sub	sp, #68	; 0x44
 800aca2:	460c      	mov	r4, r1
 800aca4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800aca8:	4616      	mov	r6, r2
 800acaa:	461f      	mov	r7, r3
 800acac:	4605      	mov	r5, r0
 800acae:	f001 fb73 	bl	800c398 <_localeconv_r>
 800acb2:	6803      	ldr	r3, [r0, #0]
 800acb4:	4618      	mov	r0, r3
 800acb6:	9309      	str	r3, [sp, #36]	; 0x24
 800acb8:	f7f5 fa4a 	bl	8000150 <strlen>
 800acbc:	2300      	movs	r3, #0
 800acbe:	930e      	str	r3, [sp, #56]	; 0x38
 800acc0:	f8d8 3000 	ldr.w	r3, [r8]
 800acc4:	900a      	str	r0, [sp, #40]	; 0x28
 800acc6:	3307      	adds	r3, #7
 800acc8:	f023 0307 	bic.w	r3, r3, #7
 800accc:	f103 0208 	add.w	r2, r3, #8
 800acd0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800acd4:	f8d4 b000 	ldr.w	fp, [r4]
 800acd8:	f8c8 2000 	str.w	r2, [r8]
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ace4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800ace8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800acec:	930b      	str	r3, [sp, #44]	; 0x2c
 800acee:	f04f 32ff 	mov.w	r2, #4294967295
 800acf2:	4640      	mov	r0, r8
 800acf4:	4b9c      	ldr	r3, [pc, #624]	; (800af68 <_printf_float+0x2cc>)
 800acf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800acf8:	f7f5 fe88 	bl	8000a0c <__aeabi_dcmpun>
 800acfc:	bb70      	cbnz	r0, 800ad5c <_printf_float+0xc0>
 800acfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ad02:	4640      	mov	r0, r8
 800ad04:	4b98      	ldr	r3, [pc, #608]	; (800af68 <_printf_float+0x2cc>)
 800ad06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad08:	f7f5 fe62 	bl	80009d0 <__aeabi_dcmple>
 800ad0c:	bb30      	cbnz	r0, 800ad5c <_printf_float+0xc0>
 800ad0e:	2200      	movs	r2, #0
 800ad10:	2300      	movs	r3, #0
 800ad12:	4640      	mov	r0, r8
 800ad14:	4651      	mov	r1, sl
 800ad16:	f7f5 fe51 	bl	80009bc <__aeabi_dcmplt>
 800ad1a:	b110      	cbz	r0, 800ad22 <_printf_float+0x86>
 800ad1c:	232d      	movs	r3, #45	; 0x2d
 800ad1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad22:	4b92      	ldr	r3, [pc, #584]	; (800af6c <_printf_float+0x2d0>)
 800ad24:	4892      	ldr	r0, [pc, #584]	; (800af70 <_printf_float+0x2d4>)
 800ad26:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ad2a:	bf94      	ite	ls
 800ad2c:	4698      	movls	r8, r3
 800ad2e:	4680      	movhi	r8, r0
 800ad30:	2303      	movs	r3, #3
 800ad32:	f04f 0a00 	mov.w	sl, #0
 800ad36:	6123      	str	r3, [r4, #16]
 800ad38:	f02b 0304 	bic.w	r3, fp, #4
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	4633      	mov	r3, r6
 800ad40:	4621      	mov	r1, r4
 800ad42:	4628      	mov	r0, r5
 800ad44:	9700      	str	r7, [sp, #0]
 800ad46:	aa0f      	add	r2, sp, #60	; 0x3c
 800ad48:	f000 f9d4 	bl	800b0f4 <_printf_common>
 800ad4c:	3001      	adds	r0, #1
 800ad4e:	f040 8090 	bne.w	800ae72 <_printf_float+0x1d6>
 800ad52:	f04f 30ff 	mov.w	r0, #4294967295
 800ad56:	b011      	add	sp, #68	; 0x44
 800ad58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5c:	4642      	mov	r2, r8
 800ad5e:	4653      	mov	r3, sl
 800ad60:	4640      	mov	r0, r8
 800ad62:	4651      	mov	r1, sl
 800ad64:	f7f5 fe52 	bl	8000a0c <__aeabi_dcmpun>
 800ad68:	b148      	cbz	r0, 800ad7e <_printf_float+0xe2>
 800ad6a:	f1ba 0f00 	cmp.w	sl, #0
 800ad6e:	bfb8      	it	lt
 800ad70:	232d      	movlt	r3, #45	; 0x2d
 800ad72:	4880      	ldr	r0, [pc, #512]	; (800af74 <_printf_float+0x2d8>)
 800ad74:	bfb8      	it	lt
 800ad76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad7a:	4b7f      	ldr	r3, [pc, #508]	; (800af78 <_printf_float+0x2dc>)
 800ad7c:	e7d3      	b.n	800ad26 <_printf_float+0x8a>
 800ad7e:	6863      	ldr	r3, [r4, #4]
 800ad80:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ad84:	1c5a      	adds	r2, r3, #1
 800ad86:	d142      	bne.n	800ae0e <_printf_float+0x172>
 800ad88:	2306      	movs	r3, #6
 800ad8a:	6063      	str	r3, [r4, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	9206      	str	r2, [sp, #24]
 800ad90:	aa0e      	add	r2, sp, #56	; 0x38
 800ad92:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800ad96:	aa0d      	add	r2, sp, #52	; 0x34
 800ad98:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800ad9c:	9203      	str	r2, [sp, #12]
 800ad9e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800ada2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ada6:	6023      	str	r3, [r4, #0]
 800ada8:	6863      	ldr	r3, [r4, #4]
 800adaa:	4642      	mov	r2, r8
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	4628      	mov	r0, r5
 800adb0:	4653      	mov	r3, sl
 800adb2:	910b      	str	r1, [sp, #44]	; 0x2c
 800adb4:	f7ff fed4 	bl	800ab60 <__cvt>
 800adb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800adba:	4680      	mov	r8, r0
 800adbc:	2947      	cmp	r1, #71	; 0x47
 800adbe:	990d      	ldr	r1, [sp, #52]	; 0x34
 800adc0:	d108      	bne.n	800add4 <_printf_float+0x138>
 800adc2:	1cc8      	adds	r0, r1, #3
 800adc4:	db02      	blt.n	800adcc <_printf_float+0x130>
 800adc6:	6863      	ldr	r3, [r4, #4]
 800adc8:	4299      	cmp	r1, r3
 800adca:	dd40      	ble.n	800ae4e <_printf_float+0x1b2>
 800adcc:	f1a9 0902 	sub.w	r9, r9, #2
 800add0:	fa5f f989 	uxtb.w	r9, r9
 800add4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800add8:	d81f      	bhi.n	800ae1a <_printf_float+0x17e>
 800adda:	464a      	mov	r2, r9
 800addc:	3901      	subs	r1, #1
 800adde:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ade2:	910d      	str	r1, [sp, #52]	; 0x34
 800ade4:	f7ff ff1b 	bl	800ac1e <__exponent>
 800ade8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adea:	4682      	mov	sl, r0
 800adec:	1813      	adds	r3, r2, r0
 800adee:	2a01      	cmp	r2, #1
 800adf0:	6123      	str	r3, [r4, #16]
 800adf2:	dc02      	bgt.n	800adfa <_printf_float+0x15e>
 800adf4:	6822      	ldr	r2, [r4, #0]
 800adf6:	07d2      	lsls	r2, r2, #31
 800adf8:	d501      	bpl.n	800adfe <_printf_float+0x162>
 800adfa:	3301      	adds	r3, #1
 800adfc:	6123      	str	r3, [r4, #16]
 800adfe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d09b      	beq.n	800ad3e <_printf_float+0xa2>
 800ae06:	232d      	movs	r3, #45	; 0x2d
 800ae08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae0c:	e797      	b.n	800ad3e <_printf_float+0xa2>
 800ae0e:	2947      	cmp	r1, #71	; 0x47
 800ae10:	d1bc      	bne.n	800ad8c <_printf_float+0xf0>
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d1ba      	bne.n	800ad8c <_printf_float+0xf0>
 800ae16:	2301      	movs	r3, #1
 800ae18:	e7b7      	b.n	800ad8a <_printf_float+0xee>
 800ae1a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ae1e:	d118      	bne.n	800ae52 <_printf_float+0x1b6>
 800ae20:	2900      	cmp	r1, #0
 800ae22:	6863      	ldr	r3, [r4, #4]
 800ae24:	dd0b      	ble.n	800ae3e <_printf_float+0x1a2>
 800ae26:	6121      	str	r1, [r4, #16]
 800ae28:	b913      	cbnz	r3, 800ae30 <_printf_float+0x194>
 800ae2a:	6822      	ldr	r2, [r4, #0]
 800ae2c:	07d0      	lsls	r0, r2, #31
 800ae2e:	d502      	bpl.n	800ae36 <_printf_float+0x19a>
 800ae30:	3301      	adds	r3, #1
 800ae32:	440b      	add	r3, r1
 800ae34:	6123      	str	r3, [r4, #16]
 800ae36:	f04f 0a00 	mov.w	sl, #0
 800ae3a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ae3c:	e7df      	b.n	800adfe <_printf_float+0x162>
 800ae3e:	b913      	cbnz	r3, 800ae46 <_printf_float+0x1aa>
 800ae40:	6822      	ldr	r2, [r4, #0]
 800ae42:	07d2      	lsls	r2, r2, #31
 800ae44:	d501      	bpl.n	800ae4a <_printf_float+0x1ae>
 800ae46:	3302      	adds	r3, #2
 800ae48:	e7f4      	b.n	800ae34 <_printf_float+0x198>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e7f2      	b.n	800ae34 <_printf_float+0x198>
 800ae4e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ae52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae54:	4299      	cmp	r1, r3
 800ae56:	db05      	blt.n	800ae64 <_printf_float+0x1c8>
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	6121      	str	r1, [r4, #16]
 800ae5c:	07d8      	lsls	r0, r3, #31
 800ae5e:	d5ea      	bpl.n	800ae36 <_printf_float+0x19a>
 800ae60:	1c4b      	adds	r3, r1, #1
 800ae62:	e7e7      	b.n	800ae34 <_printf_float+0x198>
 800ae64:	2900      	cmp	r1, #0
 800ae66:	bfcc      	ite	gt
 800ae68:	2201      	movgt	r2, #1
 800ae6a:	f1c1 0202 	rsble	r2, r1, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	e7e0      	b.n	800ae34 <_printf_float+0x198>
 800ae72:	6823      	ldr	r3, [r4, #0]
 800ae74:	055a      	lsls	r2, r3, #21
 800ae76:	d407      	bmi.n	800ae88 <_printf_float+0x1ec>
 800ae78:	6923      	ldr	r3, [r4, #16]
 800ae7a:	4642      	mov	r2, r8
 800ae7c:	4631      	mov	r1, r6
 800ae7e:	4628      	mov	r0, r5
 800ae80:	47b8      	blx	r7
 800ae82:	3001      	adds	r0, #1
 800ae84:	d12b      	bne.n	800aede <_printf_float+0x242>
 800ae86:	e764      	b.n	800ad52 <_printf_float+0xb6>
 800ae88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ae8c:	f240 80dd 	bls.w	800b04a <_printf_float+0x3ae>
 800ae90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae94:	2200      	movs	r2, #0
 800ae96:	2300      	movs	r3, #0
 800ae98:	f7f5 fd86 	bl	80009a8 <__aeabi_dcmpeq>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d033      	beq.n	800af08 <_printf_float+0x26c>
 800aea0:	2301      	movs	r3, #1
 800aea2:	4631      	mov	r1, r6
 800aea4:	4628      	mov	r0, r5
 800aea6:	4a35      	ldr	r2, [pc, #212]	; (800af7c <_printf_float+0x2e0>)
 800aea8:	47b8      	blx	r7
 800aeaa:	3001      	adds	r0, #1
 800aeac:	f43f af51 	beq.w	800ad52 <_printf_float+0xb6>
 800aeb0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	db02      	blt.n	800aebe <_printf_float+0x222>
 800aeb8:	6823      	ldr	r3, [r4, #0]
 800aeba:	07d8      	lsls	r0, r3, #31
 800aebc:	d50f      	bpl.n	800aede <_printf_float+0x242>
 800aebe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aec2:	4631      	mov	r1, r6
 800aec4:	4628      	mov	r0, r5
 800aec6:	47b8      	blx	r7
 800aec8:	3001      	adds	r0, #1
 800aeca:	f43f af42 	beq.w	800ad52 <_printf_float+0xb6>
 800aece:	f04f 0800 	mov.w	r8, #0
 800aed2:	f104 091a 	add.w	r9, r4, #26
 800aed6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aed8:	3b01      	subs	r3, #1
 800aeda:	4543      	cmp	r3, r8
 800aedc:	dc09      	bgt.n	800aef2 <_printf_float+0x256>
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	079b      	lsls	r3, r3, #30
 800aee2:	f100 8102 	bmi.w	800b0ea <_printf_float+0x44e>
 800aee6:	68e0      	ldr	r0, [r4, #12]
 800aee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aeea:	4298      	cmp	r0, r3
 800aeec:	bfb8      	it	lt
 800aeee:	4618      	movlt	r0, r3
 800aef0:	e731      	b.n	800ad56 <_printf_float+0xba>
 800aef2:	2301      	movs	r3, #1
 800aef4:	464a      	mov	r2, r9
 800aef6:	4631      	mov	r1, r6
 800aef8:	4628      	mov	r0, r5
 800aefa:	47b8      	blx	r7
 800aefc:	3001      	adds	r0, #1
 800aefe:	f43f af28 	beq.w	800ad52 <_printf_float+0xb6>
 800af02:	f108 0801 	add.w	r8, r8, #1
 800af06:	e7e6      	b.n	800aed6 <_printf_float+0x23a>
 800af08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	dc38      	bgt.n	800af80 <_printf_float+0x2e4>
 800af0e:	2301      	movs	r3, #1
 800af10:	4631      	mov	r1, r6
 800af12:	4628      	mov	r0, r5
 800af14:	4a19      	ldr	r2, [pc, #100]	; (800af7c <_printf_float+0x2e0>)
 800af16:	47b8      	blx	r7
 800af18:	3001      	adds	r0, #1
 800af1a:	f43f af1a 	beq.w	800ad52 <_printf_float+0xb6>
 800af1e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800af22:	4313      	orrs	r3, r2
 800af24:	d102      	bne.n	800af2c <_printf_float+0x290>
 800af26:	6823      	ldr	r3, [r4, #0]
 800af28:	07d9      	lsls	r1, r3, #31
 800af2a:	d5d8      	bpl.n	800aede <_printf_float+0x242>
 800af2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af30:	4631      	mov	r1, r6
 800af32:	4628      	mov	r0, r5
 800af34:	47b8      	blx	r7
 800af36:	3001      	adds	r0, #1
 800af38:	f43f af0b 	beq.w	800ad52 <_printf_float+0xb6>
 800af3c:	f04f 0900 	mov.w	r9, #0
 800af40:	f104 0a1a 	add.w	sl, r4, #26
 800af44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af46:	425b      	negs	r3, r3
 800af48:	454b      	cmp	r3, r9
 800af4a:	dc01      	bgt.n	800af50 <_printf_float+0x2b4>
 800af4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af4e:	e794      	b.n	800ae7a <_printf_float+0x1de>
 800af50:	2301      	movs	r3, #1
 800af52:	4652      	mov	r2, sl
 800af54:	4631      	mov	r1, r6
 800af56:	4628      	mov	r0, r5
 800af58:	47b8      	blx	r7
 800af5a:	3001      	adds	r0, #1
 800af5c:	f43f aef9 	beq.w	800ad52 <_printf_float+0xb6>
 800af60:	f109 0901 	add.w	r9, r9, #1
 800af64:	e7ee      	b.n	800af44 <_printf_float+0x2a8>
 800af66:	bf00      	nop
 800af68:	7fefffff 	.word	0x7fefffff
 800af6c:	0800dbe8 	.word	0x0800dbe8
 800af70:	0800dbec 	.word	0x0800dbec
 800af74:	0800dbf4 	.word	0x0800dbf4
 800af78:	0800dbf0 	.word	0x0800dbf0
 800af7c:	0800dbf8 	.word	0x0800dbf8
 800af80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af84:	429a      	cmp	r2, r3
 800af86:	bfa8      	it	ge
 800af88:	461a      	movge	r2, r3
 800af8a:	2a00      	cmp	r2, #0
 800af8c:	4691      	mov	r9, r2
 800af8e:	dc37      	bgt.n	800b000 <_printf_float+0x364>
 800af90:	f04f 0b00 	mov.w	fp, #0
 800af94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af98:	f104 021a 	add.w	r2, r4, #26
 800af9c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800afa0:	ebaa 0309 	sub.w	r3, sl, r9
 800afa4:	455b      	cmp	r3, fp
 800afa6:	dc33      	bgt.n	800b010 <_printf_float+0x374>
 800afa8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800afac:	429a      	cmp	r2, r3
 800afae:	db3b      	blt.n	800b028 <_printf_float+0x38c>
 800afb0:	6823      	ldr	r3, [r4, #0]
 800afb2:	07da      	lsls	r2, r3, #31
 800afb4:	d438      	bmi.n	800b028 <_printf_float+0x38c>
 800afb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afb8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800afba:	eba3 020a 	sub.w	r2, r3, sl
 800afbe:	eba3 0901 	sub.w	r9, r3, r1
 800afc2:	4591      	cmp	r9, r2
 800afc4:	bfa8      	it	ge
 800afc6:	4691      	movge	r9, r2
 800afc8:	f1b9 0f00 	cmp.w	r9, #0
 800afcc:	dc34      	bgt.n	800b038 <_printf_float+0x39c>
 800afce:	f04f 0800 	mov.w	r8, #0
 800afd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afd6:	f104 0a1a 	add.w	sl, r4, #26
 800afda:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800afde:	1a9b      	subs	r3, r3, r2
 800afe0:	eba3 0309 	sub.w	r3, r3, r9
 800afe4:	4543      	cmp	r3, r8
 800afe6:	f77f af7a 	ble.w	800aede <_printf_float+0x242>
 800afea:	2301      	movs	r3, #1
 800afec:	4652      	mov	r2, sl
 800afee:	4631      	mov	r1, r6
 800aff0:	4628      	mov	r0, r5
 800aff2:	47b8      	blx	r7
 800aff4:	3001      	adds	r0, #1
 800aff6:	f43f aeac 	beq.w	800ad52 <_printf_float+0xb6>
 800affa:	f108 0801 	add.w	r8, r8, #1
 800affe:	e7ec      	b.n	800afda <_printf_float+0x33e>
 800b000:	4613      	mov	r3, r2
 800b002:	4631      	mov	r1, r6
 800b004:	4642      	mov	r2, r8
 800b006:	4628      	mov	r0, r5
 800b008:	47b8      	blx	r7
 800b00a:	3001      	adds	r0, #1
 800b00c:	d1c0      	bne.n	800af90 <_printf_float+0x2f4>
 800b00e:	e6a0      	b.n	800ad52 <_printf_float+0xb6>
 800b010:	2301      	movs	r3, #1
 800b012:	4631      	mov	r1, r6
 800b014:	4628      	mov	r0, r5
 800b016:	920b      	str	r2, [sp, #44]	; 0x2c
 800b018:	47b8      	blx	r7
 800b01a:	3001      	adds	r0, #1
 800b01c:	f43f ae99 	beq.w	800ad52 <_printf_float+0xb6>
 800b020:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b022:	f10b 0b01 	add.w	fp, fp, #1
 800b026:	e7b9      	b.n	800af9c <_printf_float+0x300>
 800b028:	4631      	mov	r1, r6
 800b02a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b02e:	4628      	mov	r0, r5
 800b030:	47b8      	blx	r7
 800b032:	3001      	adds	r0, #1
 800b034:	d1bf      	bne.n	800afb6 <_printf_float+0x31a>
 800b036:	e68c      	b.n	800ad52 <_printf_float+0xb6>
 800b038:	464b      	mov	r3, r9
 800b03a:	4631      	mov	r1, r6
 800b03c:	4628      	mov	r0, r5
 800b03e:	eb08 020a 	add.w	r2, r8, sl
 800b042:	47b8      	blx	r7
 800b044:	3001      	adds	r0, #1
 800b046:	d1c2      	bne.n	800afce <_printf_float+0x332>
 800b048:	e683      	b.n	800ad52 <_printf_float+0xb6>
 800b04a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b04c:	2a01      	cmp	r2, #1
 800b04e:	dc01      	bgt.n	800b054 <_printf_float+0x3b8>
 800b050:	07db      	lsls	r3, r3, #31
 800b052:	d537      	bpl.n	800b0c4 <_printf_float+0x428>
 800b054:	2301      	movs	r3, #1
 800b056:	4642      	mov	r2, r8
 800b058:	4631      	mov	r1, r6
 800b05a:	4628      	mov	r0, r5
 800b05c:	47b8      	blx	r7
 800b05e:	3001      	adds	r0, #1
 800b060:	f43f ae77 	beq.w	800ad52 <_printf_float+0xb6>
 800b064:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b068:	4631      	mov	r1, r6
 800b06a:	4628      	mov	r0, r5
 800b06c:	47b8      	blx	r7
 800b06e:	3001      	adds	r0, #1
 800b070:	f43f ae6f 	beq.w	800ad52 <_printf_float+0xb6>
 800b074:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b078:	2200      	movs	r2, #0
 800b07a:	2300      	movs	r3, #0
 800b07c:	f7f5 fc94 	bl	80009a8 <__aeabi_dcmpeq>
 800b080:	b9d8      	cbnz	r0, 800b0ba <_printf_float+0x41e>
 800b082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b084:	f108 0201 	add.w	r2, r8, #1
 800b088:	3b01      	subs	r3, #1
 800b08a:	4631      	mov	r1, r6
 800b08c:	4628      	mov	r0, r5
 800b08e:	47b8      	blx	r7
 800b090:	3001      	adds	r0, #1
 800b092:	d10e      	bne.n	800b0b2 <_printf_float+0x416>
 800b094:	e65d      	b.n	800ad52 <_printf_float+0xb6>
 800b096:	2301      	movs	r3, #1
 800b098:	464a      	mov	r2, r9
 800b09a:	4631      	mov	r1, r6
 800b09c:	4628      	mov	r0, r5
 800b09e:	47b8      	blx	r7
 800b0a0:	3001      	adds	r0, #1
 800b0a2:	f43f ae56 	beq.w	800ad52 <_printf_float+0xb6>
 800b0a6:	f108 0801 	add.w	r8, r8, #1
 800b0aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	4543      	cmp	r3, r8
 800b0b0:	dcf1      	bgt.n	800b096 <_printf_float+0x3fa>
 800b0b2:	4653      	mov	r3, sl
 800b0b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b0b8:	e6e0      	b.n	800ae7c <_printf_float+0x1e0>
 800b0ba:	f04f 0800 	mov.w	r8, #0
 800b0be:	f104 091a 	add.w	r9, r4, #26
 800b0c2:	e7f2      	b.n	800b0aa <_printf_float+0x40e>
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	4642      	mov	r2, r8
 800b0c8:	e7df      	b.n	800b08a <_printf_float+0x3ee>
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	464a      	mov	r2, r9
 800b0ce:	4631      	mov	r1, r6
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	47b8      	blx	r7
 800b0d4:	3001      	adds	r0, #1
 800b0d6:	f43f ae3c 	beq.w	800ad52 <_printf_float+0xb6>
 800b0da:	f108 0801 	add.w	r8, r8, #1
 800b0de:	68e3      	ldr	r3, [r4, #12]
 800b0e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b0e2:	1a5b      	subs	r3, r3, r1
 800b0e4:	4543      	cmp	r3, r8
 800b0e6:	dcf0      	bgt.n	800b0ca <_printf_float+0x42e>
 800b0e8:	e6fd      	b.n	800aee6 <_printf_float+0x24a>
 800b0ea:	f04f 0800 	mov.w	r8, #0
 800b0ee:	f104 0919 	add.w	r9, r4, #25
 800b0f2:	e7f4      	b.n	800b0de <_printf_float+0x442>

0800b0f4 <_printf_common>:
 800b0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f8:	4616      	mov	r6, r2
 800b0fa:	4699      	mov	r9, r3
 800b0fc:	688a      	ldr	r2, [r1, #8]
 800b0fe:	690b      	ldr	r3, [r1, #16]
 800b100:	4607      	mov	r7, r0
 800b102:	4293      	cmp	r3, r2
 800b104:	bfb8      	it	lt
 800b106:	4613      	movlt	r3, r2
 800b108:	6033      	str	r3, [r6, #0]
 800b10a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b10e:	460c      	mov	r4, r1
 800b110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b114:	b10a      	cbz	r2, 800b11a <_printf_common+0x26>
 800b116:	3301      	adds	r3, #1
 800b118:	6033      	str	r3, [r6, #0]
 800b11a:	6823      	ldr	r3, [r4, #0]
 800b11c:	0699      	lsls	r1, r3, #26
 800b11e:	bf42      	ittt	mi
 800b120:	6833      	ldrmi	r3, [r6, #0]
 800b122:	3302      	addmi	r3, #2
 800b124:	6033      	strmi	r3, [r6, #0]
 800b126:	6825      	ldr	r5, [r4, #0]
 800b128:	f015 0506 	ands.w	r5, r5, #6
 800b12c:	d106      	bne.n	800b13c <_printf_common+0x48>
 800b12e:	f104 0a19 	add.w	sl, r4, #25
 800b132:	68e3      	ldr	r3, [r4, #12]
 800b134:	6832      	ldr	r2, [r6, #0]
 800b136:	1a9b      	subs	r3, r3, r2
 800b138:	42ab      	cmp	r3, r5
 800b13a:	dc28      	bgt.n	800b18e <_printf_common+0x9a>
 800b13c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b140:	1e13      	subs	r3, r2, #0
 800b142:	6822      	ldr	r2, [r4, #0]
 800b144:	bf18      	it	ne
 800b146:	2301      	movne	r3, #1
 800b148:	0692      	lsls	r2, r2, #26
 800b14a:	d42d      	bmi.n	800b1a8 <_printf_common+0xb4>
 800b14c:	4649      	mov	r1, r9
 800b14e:	4638      	mov	r0, r7
 800b150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b154:	47c0      	blx	r8
 800b156:	3001      	adds	r0, #1
 800b158:	d020      	beq.n	800b19c <_printf_common+0xa8>
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	68e5      	ldr	r5, [r4, #12]
 800b15e:	f003 0306 	and.w	r3, r3, #6
 800b162:	2b04      	cmp	r3, #4
 800b164:	bf18      	it	ne
 800b166:	2500      	movne	r5, #0
 800b168:	6832      	ldr	r2, [r6, #0]
 800b16a:	f04f 0600 	mov.w	r6, #0
 800b16e:	68a3      	ldr	r3, [r4, #8]
 800b170:	bf08      	it	eq
 800b172:	1aad      	subeq	r5, r5, r2
 800b174:	6922      	ldr	r2, [r4, #16]
 800b176:	bf08      	it	eq
 800b178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b17c:	4293      	cmp	r3, r2
 800b17e:	bfc4      	itt	gt
 800b180:	1a9b      	subgt	r3, r3, r2
 800b182:	18ed      	addgt	r5, r5, r3
 800b184:	341a      	adds	r4, #26
 800b186:	42b5      	cmp	r5, r6
 800b188:	d11a      	bne.n	800b1c0 <_printf_common+0xcc>
 800b18a:	2000      	movs	r0, #0
 800b18c:	e008      	b.n	800b1a0 <_printf_common+0xac>
 800b18e:	2301      	movs	r3, #1
 800b190:	4652      	mov	r2, sl
 800b192:	4649      	mov	r1, r9
 800b194:	4638      	mov	r0, r7
 800b196:	47c0      	blx	r8
 800b198:	3001      	adds	r0, #1
 800b19a:	d103      	bne.n	800b1a4 <_printf_common+0xb0>
 800b19c:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1a4:	3501      	adds	r5, #1
 800b1a6:	e7c4      	b.n	800b132 <_printf_common+0x3e>
 800b1a8:	2030      	movs	r0, #48	; 0x30
 800b1aa:	18e1      	adds	r1, r4, r3
 800b1ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1b0:	1c5a      	adds	r2, r3, #1
 800b1b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1b6:	4422      	add	r2, r4
 800b1b8:	3302      	adds	r3, #2
 800b1ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1be:	e7c5      	b.n	800b14c <_printf_common+0x58>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	4622      	mov	r2, r4
 800b1c4:	4649      	mov	r1, r9
 800b1c6:	4638      	mov	r0, r7
 800b1c8:	47c0      	blx	r8
 800b1ca:	3001      	adds	r0, #1
 800b1cc:	d0e6      	beq.n	800b19c <_printf_common+0xa8>
 800b1ce:	3601      	adds	r6, #1
 800b1d0:	e7d9      	b.n	800b186 <_printf_common+0x92>
	...

0800b1d4 <_printf_i>:
 800b1d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d8:	7e0f      	ldrb	r7, [r1, #24]
 800b1da:	4691      	mov	r9, r2
 800b1dc:	2f78      	cmp	r7, #120	; 0x78
 800b1de:	4680      	mov	r8, r0
 800b1e0:	460c      	mov	r4, r1
 800b1e2:	469a      	mov	sl, r3
 800b1e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b1ea:	d807      	bhi.n	800b1fc <_printf_i+0x28>
 800b1ec:	2f62      	cmp	r7, #98	; 0x62
 800b1ee:	d80a      	bhi.n	800b206 <_printf_i+0x32>
 800b1f0:	2f00      	cmp	r7, #0
 800b1f2:	f000 80d9 	beq.w	800b3a8 <_printf_i+0x1d4>
 800b1f6:	2f58      	cmp	r7, #88	; 0x58
 800b1f8:	f000 80a4 	beq.w	800b344 <_printf_i+0x170>
 800b1fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b200:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b204:	e03a      	b.n	800b27c <_printf_i+0xa8>
 800b206:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b20a:	2b15      	cmp	r3, #21
 800b20c:	d8f6      	bhi.n	800b1fc <_printf_i+0x28>
 800b20e:	a101      	add	r1, pc, #4	; (adr r1, 800b214 <_printf_i+0x40>)
 800b210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b214:	0800b26d 	.word	0x0800b26d
 800b218:	0800b281 	.word	0x0800b281
 800b21c:	0800b1fd 	.word	0x0800b1fd
 800b220:	0800b1fd 	.word	0x0800b1fd
 800b224:	0800b1fd 	.word	0x0800b1fd
 800b228:	0800b1fd 	.word	0x0800b1fd
 800b22c:	0800b281 	.word	0x0800b281
 800b230:	0800b1fd 	.word	0x0800b1fd
 800b234:	0800b1fd 	.word	0x0800b1fd
 800b238:	0800b1fd 	.word	0x0800b1fd
 800b23c:	0800b1fd 	.word	0x0800b1fd
 800b240:	0800b38f 	.word	0x0800b38f
 800b244:	0800b2b1 	.word	0x0800b2b1
 800b248:	0800b371 	.word	0x0800b371
 800b24c:	0800b1fd 	.word	0x0800b1fd
 800b250:	0800b1fd 	.word	0x0800b1fd
 800b254:	0800b3b1 	.word	0x0800b3b1
 800b258:	0800b1fd 	.word	0x0800b1fd
 800b25c:	0800b2b1 	.word	0x0800b2b1
 800b260:	0800b1fd 	.word	0x0800b1fd
 800b264:	0800b1fd 	.word	0x0800b1fd
 800b268:	0800b379 	.word	0x0800b379
 800b26c:	682b      	ldr	r3, [r5, #0]
 800b26e:	1d1a      	adds	r2, r3, #4
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	602a      	str	r2, [r5, #0]
 800b274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b27c:	2301      	movs	r3, #1
 800b27e:	e0a4      	b.n	800b3ca <_printf_i+0x1f6>
 800b280:	6820      	ldr	r0, [r4, #0]
 800b282:	6829      	ldr	r1, [r5, #0]
 800b284:	0606      	lsls	r6, r0, #24
 800b286:	f101 0304 	add.w	r3, r1, #4
 800b28a:	d50a      	bpl.n	800b2a2 <_printf_i+0xce>
 800b28c:	680e      	ldr	r6, [r1, #0]
 800b28e:	602b      	str	r3, [r5, #0]
 800b290:	2e00      	cmp	r6, #0
 800b292:	da03      	bge.n	800b29c <_printf_i+0xc8>
 800b294:	232d      	movs	r3, #45	; 0x2d
 800b296:	4276      	negs	r6, r6
 800b298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b29c:	230a      	movs	r3, #10
 800b29e:	485e      	ldr	r0, [pc, #376]	; (800b418 <_printf_i+0x244>)
 800b2a0:	e019      	b.n	800b2d6 <_printf_i+0x102>
 800b2a2:	680e      	ldr	r6, [r1, #0]
 800b2a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b2a8:	602b      	str	r3, [r5, #0]
 800b2aa:	bf18      	it	ne
 800b2ac:	b236      	sxthne	r6, r6
 800b2ae:	e7ef      	b.n	800b290 <_printf_i+0xbc>
 800b2b0:	682b      	ldr	r3, [r5, #0]
 800b2b2:	6820      	ldr	r0, [r4, #0]
 800b2b4:	1d19      	adds	r1, r3, #4
 800b2b6:	6029      	str	r1, [r5, #0]
 800b2b8:	0601      	lsls	r1, r0, #24
 800b2ba:	d501      	bpl.n	800b2c0 <_printf_i+0xec>
 800b2bc:	681e      	ldr	r6, [r3, #0]
 800b2be:	e002      	b.n	800b2c6 <_printf_i+0xf2>
 800b2c0:	0646      	lsls	r6, r0, #25
 800b2c2:	d5fb      	bpl.n	800b2bc <_printf_i+0xe8>
 800b2c4:	881e      	ldrh	r6, [r3, #0]
 800b2c6:	2f6f      	cmp	r7, #111	; 0x6f
 800b2c8:	bf0c      	ite	eq
 800b2ca:	2308      	moveq	r3, #8
 800b2cc:	230a      	movne	r3, #10
 800b2ce:	4852      	ldr	r0, [pc, #328]	; (800b418 <_printf_i+0x244>)
 800b2d0:	2100      	movs	r1, #0
 800b2d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b2d6:	6865      	ldr	r5, [r4, #4]
 800b2d8:	2d00      	cmp	r5, #0
 800b2da:	bfa8      	it	ge
 800b2dc:	6821      	ldrge	r1, [r4, #0]
 800b2de:	60a5      	str	r5, [r4, #8]
 800b2e0:	bfa4      	itt	ge
 800b2e2:	f021 0104 	bicge.w	r1, r1, #4
 800b2e6:	6021      	strge	r1, [r4, #0]
 800b2e8:	b90e      	cbnz	r6, 800b2ee <_printf_i+0x11a>
 800b2ea:	2d00      	cmp	r5, #0
 800b2ec:	d04d      	beq.n	800b38a <_printf_i+0x1b6>
 800b2ee:	4615      	mov	r5, r2
 800b2f0:	fbb6 f1f3 	udiv	r1, r6, r3
 800b2f4:	fb03 6711 	mls	r7, r3, r1, r6
 800b2f8:	5dc7      	ldrb	r7, [r0, r7]
 800b2fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2fe:	4637      	mov	r7, r6
 800b300:	42bb      	cmp	r3, r7
 800b302:	460e      	mov	r6, r1
 800b304:	d9f4      	bls.n	800b2f0 <_printf_i+0x11c>
 800b306:	2b08      	cmp	r3, #8
 800b308:	d10b      	bne.n	800b322 <_printf_i+0x14e>
 800b30a:	6823      	ldr	r3, [r4, #0]
 800b30c:	07de      	lsls	r6, r3, #31
 800b30e:	d508      	bpl.n	800b322 <_printf_i+0x14e>
 800b310:	6923      	ldr	r3, [r4, #16]
 800b312:	6861      	ldr	r1, [r4, #4]
 800b314:	4299      	cmp	r1, r3
 800b316:	bfde      	ittt	le
 800b318:	2330      	movle	r3, #48	; 0x30
 800b31a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b31e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b322:	1b52      	subs	r2, r2, r5
 800b324:	6122      	str	r2, [r4, #16]
 800b326:	464b      	mov	r3, r9
 800b328:	4621      	mov	r1, r4
 800b32a:	4640      	mov	r0, r8
 800b32c:	f8cd a000 	str.w	sl, [sp]
 800b330:	aa03      	add	r2, sp, #12
 800b332:	f7ff fedf 	bl	800b0f4 <_printf_common>
 800b336:	3001      	adds	r0, #1
 800b338:	d14c      	bne.n	800b3d4 <_printf_i+0x200>
 800b33a:	f04f 30ff 	mov.w	r0, #4294967295
 800b33e:	b004      	add	sp, #16
 800b340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b344:	4834      	ldr	r0, [pc, #208]	; (800b418 <_printf_i+0x244>)
 800b346:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b34a:	6829      	ldr	r1, [r5, #0]
 800b34c:	6823      	ldr	r3, [r4, #0]
 800b34e:	f851 6b04 	ldr.w	r6, [r1], #4
 800b352:	6029      	str	r1, [r5, #0]
 800b354:	061d      	lsls	r5, r3, #24
 800b356:	d514      	bpl.n	800b382 <_printf_i+0x1ae>
 800b358:	07df      	lsls	r7, r3, #31
 800b35a:	bf44      	itt	mi
 800b35c:	f043 0320 	orrmi.w	r3, r3, #32
 800b360:	6023      	strmi	r3, [r4, #0]
 800b362:	b91e      	cbnz	r6, 800b36c <_printf_i+0x198>
 800b364:	6823      	ldr	r3, [r4, #0]
 800b366:	f023 0320 	bic.w	r3, r3, #32
 800b36a:	6023      	str	r3, [r4, #0]
 800b36c:	2310      	movs	r3, #16
 800b36e:	e7af      	b.n	800b2d0 <_printf_i+0xfc>
 800b370:	6823      	ldr	r3, [r4, #0]
 800b372:	f043 0320 	orr.w	r3, r3, #32
 800b376:	6023      	str	r3, [r4, #0]
 800b378:	2378      	movs	r3, #120	; 0x78
 800b37a:	4828      	ldr	r0, [pc, #160]	; (800b41c <_printf_i+0x248>)
 800b37c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b380:	e7e3      	b.n	800b34a <_printf_i+0x176>
 800b382:	0659      	lsls	r1, r3, #25
 800b384:	bf48      	it	mi
 800b386:	b2b6      	uxthmi	r6, r6
 800b388:	e7e6      	b.n	800b358 <_printf_i+0x184>
 800b38a:	4615      	mov	r5, r2
 800b38c:	e7bb      	b.n	800b306 <_printf_i+0x132>
 800b38e:	682b      	ldr	r3, [r5, #0]
 800b390:	6826      	ldr	r6, [r4, #0]
 800b392:	1d18      	adds	r0, r3, #4
 800b394:	6961      	ldr	r1, [r4, #20]
 800b396:	6028      	str	r0, [r5, #0]
 800b398:	0635      	lsls	r5, r6, #24
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	d501      	bpl.n	800b3a2 <_printf_i+0x1ce>
 800b39e:	6019      	str	r1, [r3, #0]
 800b3a0:	e002      	b.n	800b3a8 <_printf_i+0x1d4>
 800b3a2:	0670      	lsls	r0, r6, #25
 800b3a4:	d5fb      	bpl.n	800b39e <_printf_i+0x1ca>
 800b3a6:	8019      	strh	r1, [r3, #0]
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	4615      	mov	r5, r2
 800b3ac:	6123      	str	r3, [r4, #16]
 800b3ae:	e7ba      	b.n	800b326 <_printf_i+0x152>
 800b3b0:	682b      	ldr	r3, [r5, #0]
 800b3b2:	2100      	movs	r1, #0
 800b3b4:	1d1a      	adds	r2, r3, #4
 800b3b6:	602a      	str	r2, [r5, #0]
 800b3b8:	681d      	ldr	r5, [r3, #0]
 800b3ba:	6862      	ldr	r2, [r4, #4]
 800b3bc:	4628      	mov	r0, r5
 800b3be:	f000 fffb 	bl	800c3b8 <memchr>
 800b3c2:	b108      	cbz	r0, 800b3c8 <_printf_i+0x1f4>
 800b3c4:	1b40      	subs	r0, r0, r5
 800b3c6:	6060      	str	r0, [r4, #4]
 800b3c8:	6863      	ldr	r3, [r4, #4]
 800b3ca:	6123      	str	r3, [r4, #16]
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3d2:	e7a8      	b.n	800b326 <_printf_i+0x152>
 800b3d4:	462a      	mov	r2, r5
 800b3d6:	4649      	mov	r1, r9
 800b3d8:	4640      	mov	r0, r8
 800b3da:	6923      	ldr	r3, [r4, #16]
 800b3dc:	47d0      	blx	sl
 800b3de:	3001      	adds	r0, #1
 800b3e0:	d0ab      	beq.n	800b33a <_printf_i+0x166>
 800b3e2:	6823      	ldr	r3, [r4, #0]
 800b3e4:	079b      	lsls	r3, r3, #30
 800b3e6:	d413      	bmi.n	800b410 <_printf_i+0x23c>
 800b3e8:	68e0      	ldr	r0, [r4, #12]
 800b3ea:	9b03      	ldr	r3, [sp, #12]
 800b3ec:	4298      	cmp	r0, r3
 800b3ee:	bfb8      	it	lt
 800b3f0:	4618      	movlt	r0, r3
 800b3f2:	e7a4      	b.n	800b33e <_printf_i+0x16a>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	4632      	mov	r2, r6
 800b3f8:	4649      	mov	r1, r9
 800b3fa:	4640      	mov	r0, r8
 800b3fc:	47d0      	blx	sl
 800b3fe:	3001      	adds	r0, #1
 800b400:	d09b      	beq.n	800b33a <_printf_i+0x166>
 800b402:	3501      	adds	r5, #1
 800b404:	68e3      	ldr	r3, [r4, #12]
 800b406:	9903      	ldr	r1, [sp, #12]
 800b408:	1a5b      	subs	r3, r3, r1
 800b40a:	42ab      	cmp	r3, r5
 800b40c:	dcf2      	bgt.n	800b3f4 <_printf_i+0x220>
 800b40e:	e7eb      	b.n	800b3e8 <_printf_i+0x214>
 800b410:	2500      	movs	r5, #0
 800b412:	f104 0619 	add.w	r6, r4, #25
 800b416:	e7f5      	b.n	800b404 <_printf_i+0x230>
 800b418:	0800dbfa 	.word	0x0800dbfa
 800b41c:	0800dc0b 	.word	0x0800dc0b

0800b420 <iprintf>:
 800b420:	b40f      	push	{r0, r1, r2, r3}
 800b422:	4b0a      	ldr	r3, [pc, #40]	; (800b44c <iprintf+0x2c>)
 800b424:	b513      	push	{r0, r1, r4, lr}
 800b426:	681c      	ldr	r4, [r3, #0]
 800b428:	b124      	cbz	r4, 800b434 <iprintf+0x14>
 800b42a:	69a3      	ldr	r3, [r4, #24]
 800b42c:	b913      	cbnz	r3, 800b434 <iprintf+0x14>
 800b42e:	4620      	mov	r0, r4
 800b430:	f000 ff14 	bl	800c25c <__sinit>
 800b434:	ab05      	add	r3, sp, #20
 800b436:	4620      	mov	r0, r4
 800b438:	9a04      	ldr	r2, [sp, #16]
 800b43a:	68a1      	ldr	r1, [r4, #8]
 800b43c:	9301      	str	r3, [sp, #4]
 800b43e:	f001 fdcd 	bl	800cfdc <_vfiprintf_r>
 800b442:	b002      	add	sp, #8
 800b444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b448:	b004      	add	sp, #16
 800b44a:	4770      	bx	lr
 800b44c:	20000188 	.word	0x20000188

0800b450 <putchar>:
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	4b08      	ldr	r3, [pc, #32]	; (800b474 <putchar+0x24>)
 800b454:	4605      	mov	r5, r0
 800b456:	681c      	ldr	r4, [r3, #0]
 800b458:	b124      	cbz	r4, 800b464 <putchar+0x14>
 800b45a:	69a3      	ldr	r3, [r4, #24]
 800b45c:	b913      	cbnz	r3, 800b464 <putchar+0x14>
 800b45e:	4620      	mov	r0, r4
 800b460:	f000 fefc 	bl	800c25c <__sinit>
 800b464:	4629      	mov	r1, r5
 800b466:	4620      	mov	r0, r4
 800b468:	68a2      	ldr	r2, [r4, #8]
 800b46a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b46e:	f001 bee5 	b.w	800d23c <_putc_r>
 800b472:	bf00      	nop
 800b474:	20000188 	.word	0x20000188

0800b478 <siprintf>:
 800b478:	b40e      	push	{r1, r2, r3}
 800b47a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b47e:	b500      	push	{lr}
 800b480:	b09c      	sub	sp, #112	; 0x70
 800b482:	ab1d      	add	r3, sp, #116	; 0x74
 800b484:	9002      	str	r0, [sp, #8]
 800b486:	9006      	str	r0, [sp, #24]
 800b488:	9107      	str	r1, [sp, #28]
 800b48a:	9104      	str	r1, [sp, #16]
 800b48c:	4808      	ldr	r0, [pc, #32]	; (800b4b0 <siprintf+0x38>)
 800b48e:	4909      	ldr	r1, [pc, #36]	; (800b4b4 <siprintf+0x3c>)
 800b490:	f853 2b04 	ldr.w	r2, [r3], #4
 800b494:	9105      	str	r1, [sp, #20]
 800b496:	6800      	ldr	r0, [r0, #0]
 800b498:	a902      	add	r1, sp, #8
 800b49a:	9301      	str	r3, [sp, #4]
 800b49c:	f001 fc76 	bl	800cd8c <_svfiprintf_r>
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	9b02      	ldr	r3, [sp, #8]
 800b4a4:	701a      	strb	r2, [r3, #0]
 800b4a6:	b01c      	add	sp, #112	; 0x70
 800b4a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4ac:	b003      	add	sp, #12
 800b4ae:	4770      	bx	lr
 800b4b0:	20000188 	.word	0x20000188
 800b4b4:	ffff0208 	.word	0xffff0208

0800b4b8 <quorem>:
 800b4b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4bc:	6903      	ldr	r3, [r0, #16]
 800b4be:	690c      	ldr	r4, [r1, #16]
 800b4c0:	4607      	mov	r7, r0
 800b4c2:	42a3      	cmp	r3, r4
 800b4c4:	f2c0 8082 	blt.w	800b5cc <quorem+0x114>
 800b4c8:	3c01      	subs	r4, #1
 800b4ca:	f100 0514 	add.w	r5, r0, #20
 800b4ce:	f101 0814 	add.w	r8, r1, #20
 800b4d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4d6:	9301      	str	r3, [sp, #4]
 800b4d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b4dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b4e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b4ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b4f0:	d331      	bcc.n	800b556 <quorem+0x9e>
 800b4f2:	f04f 0e00 	mov.w	lr, #0
 800b4f6:	4640      	mov	r0, r8
 800b4f8:	46ac      	mov	ip, r5
 800b4fa:	46f2      	mov	sl, lr
 800b4fc:	f850 2b04 	ldr.w	r2, [r0], #4
 800b500:	b293      	uxth	r3, r2
 800b502:	fb06 e303 	mla	r3, r6, r3, lr
 800b506:	0c12      	lsrs	r2, r2, #16
 800b508:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	fb06 e202 	mla	r2, r6, r2, lr
 800b512:	ebaa 0303 	sub.w	r3, sl, r3
 800b516:	f8dc a000 	ldr.w	sl, [ip]
 800b51a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b51e:	fa1f fa8a 	uxth.w	sl, sl
 800b522:	4453      	add	r3, sl
 800b524:	f8dc a000 	ldr.w	sl, [ip]
 800b528:	b292      	uxth	r2, r2
 800b52a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b52e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b532:	b29b      	uxth	r3, r3
 800b534:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b538:	4581      	cmp	r9, r0
 800b53a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b53e:	f84c 3b04 	str.w	r3, [ip], #4
 800b542:	d2db      	bcs.n	800b4fc <quorem+0x44>
 800b544:	f855 300b 	ldr.w	r3, [r5, fp]
 800b548:	b92b      	cbnz	r3, 800b556 <quorem+0x9e>
 800b54a:	9b01      	ldr	r3, [sp, #4]
 800b54c:	3b04      	subs	r3, #4
 800b54e:	429d      	cmp	r5, r3
 800b550:	461a      	mov	r2, r3
 800b552:	d32f      	bcc.n	800b5b4 <quorem+0xfc>
 800b554:	613c      	str	r4, [r7, #16]
 800b556:	4638      	mov	r0, r7
 800b558:	f001 f9c8 	bl	800c8ec <__mcmp>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	db25      	blt.n	800b5ac <quorem+0xf4>
 800b560:	4628      	mov	r0, r5
 800b562:	f04f 0c00 	mov.w	ip, #0
 800b566:	3601      	adds	r6, #1
 800b568:	f858 1b04 	ldr.w	r1, [r8], #4
 800b56c:	f8d0 e000 	ldr.w	lr, [r0]
 800b570:	b28b      	uxth	r3, r1
 800b572:	ebac 0303 	sub.w	r3, ip, r3
 800b576:	fa1f f28e 	uxth.w	r2, lr
 800b57a:	4413      	add	r3, r2
 800b57c:	0c0a      	lsrs	r2, r1, #16
 800b57e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b582:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b586:	b29b      	uxth	r3, r3
 800b588:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b58c:	45c1      	cmp	r9, r8
 800b58e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b592:	f840 3b04 	str.w	r3, [r0], #4
 800b596:	d2e7      	bcs.n	800b568 <quorem+0xb0>
 800b598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b59c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5a0:	b922      	cbnz	r2, 800b5ac <quorem+0xf4>
 800b5a2:	3b04      	subs	r3, #4
 800b5a4:	429d      	cmp	r5, r3
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	d30a      	bcc.n	800b5c0 <quorem+0x108>
 800b5aa:	613c      	str	r4, [r7, #16]
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	b003      	add	sp, #12
 800b5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b4:	6812      	ldr	r2, [r2, #0]
 800b5b6:	3b04      	subs	r3, #4
 800b5b8:	2a00      	cmp	r2, #0
 800b5ba:	d1cb      	bne.n	800b554 <quorem+0x9c>
 800b5bc:	3c01      	subs	r4, #1
 800b5be:	e7c6      	b.n	800b54e <quorem+0x96>
 800b5c0:	6812      	ldr	r2, [r2, #0]
 800b5c2:	3b04      	subs	r3, #4
 800b5c4:	2a00      	cmp	r2, #0
 800b5c6:	d1f0      	bne.n	800b5aa <quorem+0xf2>
 800b5c8:	3c01      	subs	r4, #1
 800b5ca:	e7eb      	b.n	800b5a4 <quorem+0xec>
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	e7ee      	b.n	800b5ae <quorem+0xf6>

0800b5d0 <_dtoa_r>:
 800b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	4616      	mov	r6, r2
 800b5d6:	461f      	mov	r7, r3
 800b5d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b5da:	b099      	sub	sp, #100	; 0x64
 800b5dc:	4605      	mov	r5, r0
 800b5de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b5e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b5e6:	b974      	cbnz	r4, 800b606 <_dtoa_r+0x36>
 800b5e8:	2010      	movs	r0, #16
 800b5ea:	f000 fedd 	bl	800c3a8 <malloc>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	6268      	str	r0, [r5, #36]	; 0x24
 800b5f2:	b920      	cbnz	r0, 800b5fe <_dtoa_r+0x2e>
 800b5f4:	21ea      	movs	r1, #234	; 0xea
 800b5f6:	4ba8      	ldr	r3, [pc, #672]	; (800b898 <_dtoa_r+0x2c8>)
 800b5f8:	48a8      	ldr	r0, [pc, #672]	; (800b89c <_dtoa_r+0x2cc>)
 800b5fa:	f001 ff8d 	bl	800d518 <__assert_func>
 800b5fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b602:	6004      	str	r4, [r0, #0]
 800b604:	60c4      	str	r4, [r0, #12]
 800b606:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b608:	6819      	ldr	r1, [r3, #0]
 800b60a:	b151      	cbz	r1, 800b622 <_dtoa_r+0x52>
 800b60c:	685a      	ldr	r2, [r3, #4]
 800b60e:	2301      	movs	r3, #1
 800b610:	4093      	lsls	r3, r2
 800b612:	604a      	str	r2, [r1, #4]
 800b614:	608b      	str	r3, [r1, #8]
 800b616:	4628      	mov	r0, r5
 800b618:	f000 ff2a 	bl	800c470 <_Bfree>
 800b61c:	2200      	movs	r2, #0
 800b61e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b620:	601a      	str	r2, [r3, #0]
 800b622:	1e3b      	subs	r3, r7, #0
 800b624:	bfaf      	iteee	ge
 800b626:	2300      	movge	r3, #0
 800b628:	2201      	movlt	r2, #1
 800b62a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b62e:	9305      	strlt	r3, [sp, #20]
 800b630:	bfa8      	it	ge
 800b632:	f8c8 3000 	strge.w	r3, [r8]
 800b636:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b63a:	4b99      	ldr	r3, [pc, #612]	; (800b8a0 <_dtoa_r+0x2d0>)
 800b63c:	bfb8      	it	lt
 800b63e:	f8c8 2000 	strlt.w	r2, [r8]
 800b642:	ea33 0309 	bics.w	r3, r3, r9
 800b646:	d119      	bne.n	800b67c <_dtoa_r+0xac>
 800b648:	f242 730f 	movw	r3, #9999	; 0x270f
 800b64c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b64e:	6013      	str	r3, [r2, #0]
 800b650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b654:	4333      	orrs	r3, r6
 800b656:	f000 857f 	beq.w	800c158 <_dtoa_r+0xb88>
 800b65a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b65c:	b953      	cbnz	r3, 800b674 <_dtoa_r+0xa4>
 800b65e:	4b91      	ldr	r3, [pc, #580]	; (800b8a4 <_dtoa_r+0x2d4>)
 800b660:	e022      	b.n	800b6a8 <_dtoa_r+0xd8>
 800b662:	4b91      	ldr	r3, [pc, #580]	; (800b8a8 <_dtoa_r+0x2d8>)
 800b664:	9303      	str	r3, [sp, #12]
 800b666:	3308      	adds	r3, #8
 800b668:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b66a:	6013      	str	r3, [r2, #0]
 800b66c:	9803      	ldr	r0, [sp, #12]
 800b66e:	b019      	add	sp, #100	; 0x64
 800b670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b674:	4b8b      	ldr	r3, [pc, #556]	; (800b8a4 <_dtoa_r+0x2d4>)
 800b676:	9303      	str	r3, [sp, #12]
 800b678:	3303      	adds	r3, #3
 800b67a:	e7f5      	b.n	800b668 <_dtoa_r+0x98>
 800b67c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b680:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b684:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b688:	2200      	movs	r2, #0
 800b68a:	2300      	movs	r3, #0
 800b68c:	f7f5 f98c 	bl	80009a8 <__aeabi_dcmpeq>
 800b690:	4680      	mov	r8, r0
 800b692:	b158      	cbz	r0, 800b6ac <_dtoa_r+0xdc>
 800b694:	2301      	movs	r3, #1
 800b696:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b698:	6013      	str	r3, [r2, #0]
 800b69a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f000 8558 	beq.w	800c152 <_dtoa_r+0xb82>
 800b6a2:	4882      	ldr	r0, [pc, #520]	; (800b8ac <_dtoa_r+0x2dc>)
 800b6a4:	6018      	str	r0, [r3, #0]
 800b6a6:	1e43      	subs	r3, r0, #1
 800b6a8:	9303      	str	r3, [sp, #12]
 800b6aa:	e7df      	b.n	800b66c <_dtoa_r+0x9c>
 800b6ac:	ab16      	add	r3, sp, #88	; 0x58
 800b6ae:	9301      	str	r3, [sp, #4]
 800b6b0:	ab17      	add	r3, sp, #92	; 0x5c
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b6ba:	f001 f9bf 	bl	800ca3c <__d2b>
 800b6be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b6c2:	4683      	mov	fp, r0
 800b6c4:	2c00      	cmp	r4, #0
 800b6c6:	d07f      	beq.n	800b7c8 <_dtoa_r+0x1f8>
 800b6c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b6cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b6d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b6da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b6de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	4b72      	ldr	r3, [pc, #456]	; (800b8b0 <_dtoa_r+0x2e0>)
 800b6e6:	f7f4 fd3f 	bl	8000168 <__aeabi_dsub>
 800b6ea:	a365      	add	r3, pc, #404	; (adr r3, 800b880 <_dtoa_r+0x2b0>)
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	f7f4 fef2 	bl	80004d8 <__aeabi_dmul>
 800b6f4:	a364      	add	r3, pc, #400	; (adr r3, 800b888 <_dtoa_r+0x2b8>)
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	f7f4 fd37 	bl	800016c <__adddf3>
 800b6fe:	4606      	mov	r6, r0
 800b700:	4620      	mov	r0, r4
 800b702:	460f      	mov	r7, r1
 800b704:	f7f4 fe7e 	bl	8000404 <__aeabi_i2d>
 800b708:	a361      	add	r3, pc, #388	; (adr r3, 800b890 <_dtoa_r+0x2c0>)
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	f7f4 fee3 	bl	80004d8 <__aeabi_dmul>
 800b712:	4602      	mov	r2, r0
 800b714:	460b      	mov	r3, r1
 800b716:	4630      	mov	r0, r6
 800b718:	4639      	mov	r1, r7
 800b71a:	f7f4 fd27 	bl	800016c <__adddf3>
 800b71e:	4606      	mov	r6, r0
 800b720:	460f      	mov	r7, r1
 800b722:	f7f5 f989 	bl	8000a38 <__aeabi_d2iz>
 800b726:	2200      	movs	r2, #0
 800b728:	4682      	mov	sl, r0
 800b72a:	2300      	movs	r3, #0
 800b72c:	4630      	mov	r0, r6
 800b72e:	4639      	mov	r1, r7
 800b730:	f7f5 f944 	bl	80009bc <__aeabi_dcmplt>
 800b734:	b148      	cbz	r0, 800b74a <_dtoa_r+0x17a>
 800b736:	4650      	mov	r0, sl
 800b738:	f7f4 fe64 	bl	8000404 <__aeabi_i2d>
 800b73c:	4632      	mov	r2, r6
 800b73e:	463b      	mov	r3, r7
 800b740:	f7f5 f932 	bl	80009a8 <__aeabi_dcmpeq>
 800b744:	b908      	cbnz	r0, 800b74a <_dtoa_r+0x17a>
 800b746:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b74a:	f1ba 0f16 	cmp.w	sl, #22
 800b74e:	d858      	bhi.n	800b802 <_dtoa_r+0x232>
 800b750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b754:	4b57      	ldr	r3, [pc, #348]	; (800b8b4 <_dtoa_r+0x2e4>)
 800b756:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75e:	f7f5 f92d 	bl	80009bc <__aeabi_dcmplt>
 800b762:	2800      	cmp	r0, #0
 800b764:	d04f      	beq.n	800b806 <_dtoa_r+0x236>
 800b766:	2300      	movs	r3, #0
 800b768:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b76c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b76e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b770:	1b1c      	subs	r4, r3, r4
 800b772:	1e63      	subs	r3, r4, #1
 800b774:	9309      	str	r3, [sp, #36]	; 0x24
 800b776:	bf49      	itett	mi
 800b778:	f1c4 0301 	rsbmi	r3, r4, #1
 800b77c:	2300      	movpl	r3, #0
 800b77e:	9306      	strmi	r3, [sp, #24]
 800b780:	2300      	movmi	r3, #0
 800b782:	bf54      	ite	pl
 800b784:	9306      	strpl	r3, [sp, #24]
 800b786:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b788:	f1ba 0f00 	cmp.w	sl, #0
 800b78c:	db3d      	blt.n	800b80a <_dtoa_r+0x23a>
 800b78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b790:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b794:	4453      	add	r3, sl
 800b796:	9309      	str	r3, [sp, #36]	; 0x24
 800b798:	2300      	movs	r3, #0
 800b79a:	930a      	str	r3, [sp, #40]	; 0x28
 800b79c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b79e:	2b09      	cmp	r3, #9
 800b7a0:	f200 808c 	bhi.w	800b8bc <_dtoa_r+0x2ec>
 800b7a4:	2b05      	cmp	r3, #5
 800b7a6:	bfc4      	itt	gt
 800b7a8:	3b04      	subgt	r3, #4
 800b7aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b7ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7ae:	bfc8      	it	gt
 800b7b0:	2400      	movgt	r4, #0
 800b7b2:	f1a3 0302 	sub.w	r3, r3, #2
 800b7b6:	bfd8      	it	le
 800b7b8:	2401      	movle	r4, #1
 800b7ba:	2b03      	cmp	r3, #3
 800b7bc:	f200 808a 	bhi.w	800b8d4 <_dtoa_r+0x304>
 800b7c0:	e8df f003 	tbb	[pc, r3]
 800b7c4:	5b4d4f2d 	.word	0x5b4d4f2d
 800b7c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b7cc:	441c      	add	r4, r3
 800b7ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b7d2:	2b20      	cmp	r3, #32
 800b7d4:	bfc3      	ittte	gt
 800b7d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b7da:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b7de:	fa09 f303 	lslgt.w	r3, r9, r3
 800b7e2:	f1c3 0320 	rsble	r3, r3, #32
 800b7e6:	bfc6      	itte	gt
 800b7e8:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b7ec:	4318      	orrgt	r0, r3
 800b7ee:	fa06 f003 	lslle.w	r0, r6, r3
 800b7f2:	f7f4 fdf7 	bl	80003e4 <__aeabi_ui2d>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b7fc:	3c01      	subs	r4, #1
 800b7fe:	9313      	str	r3, [sp, #76]	; 0x4c
 800b800:	e76f      	b.n	800b6e2 <_dtoa_r+0x112>
 800b802:	2301      	movs	r3, #1
 800b804:	e7b2      	b.n	800b76c <_dtoa_r+0x19c>
 800b806:	900f      	str	r0, [sp, #60]	; 0x3c
 800b808:	e7b1      	b.n	800b76e <_dtoa_r+0x19e>
 800b80a:	9b06      	ldr	r3, [sp, #24]
 800b80c:	eba3 030a 	sub.w	r3, r3, sl
 800b810:	9306      	str	r3, [sp, #24]
 800b812:	f1ca 0300 	rsb	r3, sl, #0
 800b816:	930a      	str	r3, [sp, #40]	; 0x28
 800b818:	2300      	movs	r3, #0
 800b81a:	930e      	str	r3, [sp, #56]	; 0x38
 800b81c:	e7be      	b.n	800b79c <_dtoa_r+0x1cc>
 800b81e:	2300      	movs	r3, #0
 800b820:	930b      	str	r3, [sp, #44]	; 0x2c
 800b822:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b824:	2b00      	cmp	r3, #0
 800b826:	dc58      	bgt.n	800b8da <_dtoa_r+0x30a>
 800b828:	f04f 0901 	mov.w	r9, #1
 800b82c:	464b      	mov	r3, r9
 800b82e:	f8cd 9020 	str.w	r9, [sp, #32]
 800b832:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800b836:	2200      	movs	r2, #0
 800b838:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b83a:	6042      	str	r2, [r0, #4]
 800b83c:	2204      	movs	r2, #4
 800b83e:	f102 0614 	add.w	r6, r2, #20
 800b842:	429e      	cmp	r6, r3
 800b844:	6841      	ldr	r1, [r0, #4]
 800b846:	d94e      	bls.n	800b8e6 <_dtoa_r+0x316>
 800b848:	4628      	mov	r0, r5
 800b84a:	f000 fdd1 	bl	800c3f0 <_Balloc>
 800b84e:	9003      	str	r0, [sp, #12]
 800b850:	2800      	cmp	r0, #0
 800b852:	d14c      	bne.n	800b8ee <_dtoa_r+0x31e>
 800b854:	4602      	mov	r2, r0
 800b856:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b85a:	4b17      	ldr	r3, [pc, #92]	; (800b8b8 <_dtoa_r+0x2e8>)
 800b85c:	e6cc      	b.n	800b5f8 <_dtoa_r+0x28>
 800b85e:	2301      	movs	r3, #1
 800b860:	e7de      	b.n	800b820 <_dtoa_r+0x250>
 800b862:	2300      	movs	r3, #0
 800b864:	930b      	str	r3, [sp, #44]	; 0x2c
 800b866:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b868:	eb0a 0903 	add.w	r9, sl, r3
 800b86c:	f109 0301 	add.w	r3, r9, #1
 800b870:	2b01      	cmp	r3, #1
 800b872:	9308      	str	r3, [sp, #32]
 800b874:	bfb8      	it	lt
 800b876:	2301      	movlt	r3, #1
 800b878:	e7dd      	b.n	800b836 <_dtoa_r+0x266>
 800b87a:	2301      	movs	r3, #1
 800b87c:	e7f2      	b.n	800b864 <_dtoa_r+0x294>
 800b87e:	bf00      	nop
 800b880:	636f4361 	.word	0x636f4361
 800b884:	3fd287a7 	.word	0x3fd287a7
 800b888:	8b60c8b3 	.word	0x8b60c8b3
 800b88c:	3fc68a28 	.word	0x3fc68a28
 800b890:	509f79fb 	.word	0x509f79fb
 800b894:	3fd34413 	.word	0x3fd34413
 800b898:	0800dc29 	.word	0x0800dc29
 800b89c:	0800dc40 	.word	0x0800dc40
 800b8a0:	7ff00000 	.word	0x7ff00000
 800b8a4:	0800dc25 	.word	0x0800dc25
 800b8a8:	0800dc1c 	.word	0x0800dc1c
 800b8ac:	0800dbf9 	.word	0x0800dbf9
 800b8b0:	3ff80000 	.word	0x3ff80000
 800b8b4:	0800dd90 	.word	0x0800dd90
 800b8b8:	0800dc9b 	.word	0x0800dc9b
 800b8bc:	2401      	movs	r4, #1
 800b8be:	2300      	movs	r3, #0
 800b8c0:	940b      	str	r4, [sp, #44]	; 0x2c
 800b8c2:	9322      	str	r3, [sp, #136]	; 0x88
 800b8c4:	f04f 39ff 	mov.w	r9, #4294967295
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	2312      	movs	r3, #18
 800b8cc:	f8cd 9020 	str.w	r9, [sp, #32]
 800b8d0:	9223      	str	r2, [sp, #140]	; 0x8c
 800b8d2:	e7b0      	b.n	800b836 <_dtoa_r+0x266>
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8d8:	e7f4      	b.n	800b8c4 <_dtoa_r+0x2f4>
 800b8da:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b8de:	464b      	mov	r3, r9
 800b8e0:	f8cd 9020 	str.w	r9, [sp, #32]
 800b8e4:	e7a7      	b.n	800b836 <_dtoa_r+0x266>
 800b8e6:	3101      	adds	r1, #1
 800b8e8:	6041      	str	r1, [r0, #4]
 800b8ea:	0052      	lsls	r2, r2, #1
 800b8ec:	e7a7      	b.n	800b83e <_dtoa_r+0x26e>
 800b8ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8f0:	9a03      	ldr	r2, [sp, #12]
 800b8f2:	601a      	str	r2, [r3, #0]
 800b8f4:	9b08      	ldr	r3, [sp, #32]
 800b8f6:	2b0e      	cmp	r3, #14
 800b8f8:	f200 80a8 	bhi.w	800ba4c <_dtoa_r+0x47c>
 800b8fc:	2c00      	cmp	r4, #0
 800b8fe:	f000 80a5 	beq.w	800ba4c <_dtoa_r+0x47c>
 800b902:	f1ba 0f00 	cmp.w	sl, #0
 800b906:	dd34      	ble.n	800b972 <_dtoa_r+0x3a2>
 800b908:	4a9a      	ldr	r2, [pc, #616]	; (800bb74 <_dtoa_r+0x5a4>)
 800b90a:	f00a 030f 	and.w	r3, sl, #15
 800b90e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b912:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b916:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b91a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b91e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b922:	d016      	beq.n	800b952 <_dtoa_r+0x382>
 800b924:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b928:	4b93      	ldr	r3, [pc, #588]	; (800bb78 <_dtoa_r+0x5a8>)
 800b92a:	2703      	movs	r7, #3
 800b92c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b930:	f7f4 fefc 	bl	800072c <__aeabi_ddiv>
 800b934:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b938:	f004 040f 	and.w	r4, r4, #15
 800b93c:	4e8e      	ldr	r6, [pc, #568]	; (800bb78 <_dtoa_r+0x5a8>)
 800b93e:	b954      	cbnz	r4, 800b956 <_dtoa_r+0x386>
 800b940:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b948:	f7f4 fef0 	bl	800072c <__aeabi_ddiv>
 800b94c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b950:	e029      	b.n	800b9a6 <_dtoa_r+0x3d6>
 800b952:	2702      	movs	r7, #2
 800b954:	e7f2      	b.n	800b93c <_dtoa_r+0x36c>
 800b956:	07e1      	lsls	r1, r4, #31
 800b958:	d508      	bpl.n	800b96c <_dtoa_r+0x39c>
 800b95a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b95e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b962:	f7f4 fdb9 	bl	80004d8 <__aeabi_dmul>
 800b966:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b96a:	3701      	adds	r7, #1
 800b96c:	1064      	asrs	r4, r4, #1
 800b96e:	3608      	adds	r6, #8
 800b970:	e7e5      	b.n	800b93e <_dtoa_r+0x36e>
 800b972:	f000 80a5 	beq.w	800bac0 <_dtoa_r+0x4f0>
 800b976:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b97a:	f1ca 0400 	rsb	r4, sl, #0
 800b97e:	4b7d      	ldr	r3, [pc, #500]	; (800bb74 <_dtoa_r+0x5a4>)
 800b980:	f004 020f 	and.w	r2, r4, #15
 800b984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	f7f4 fda4 	bl	80004d8 <__aeabi_dmul>
 800b990:	2702      	movs	r7, #2
 800b992:	2300      	movs	r3, #0
 800b994:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b998:	4e77      	ldr	r6, [pc, #476]	; (800bb78 <_dtoa_r+0x5a8>)
 800b99a:	1124      	asrs	r4, r4, #4
 800b99c:	2c00      	cmp	r4, #0
 800b99e:	f040 8084 	bne.w	800baaa <_dtoa_r+0x4da>
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1d2      	bne.n	800b94c <_dtoa_r+0x37c>
 800b9a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f000 808b 	beq.w	800bac4 <_dtoa_r+0x4f4>
 800b9ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b9b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b9b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	4b6f      	ldr	r3, [pc, #444]	; (800bb7c <_dtoa_r+0x5ac>)
 800b9be:	f7f4 fffd 	bl	80009bc <__aeabi_dcmplt>
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	d07e      	beq.n	800bac4 <_dtoa_r+0x4f4>
 800b9c6:	9b08      	ldr	r3, [sp, #32]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d07b      	beq.n	800bac4 <_dtoa_r+0x4f4>
 800b9cc:	f1b9 0f00 	cmp.w	r9, #0
 800b9d0:	dd38      	ble.n	800ba44 <_dtoa_r+0x474>
 800b9d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	4b69      	ldr	r3, [pc, #420]	; (800bb80 <_dtoa_r+0x5b0>)
 800b9da:	f7f4 fd7d 	bl	80004d8 <__aeabi_dmul>
 800b9de:	464c      	mov	r4, r9
 800b9e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9e4:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b9e8:	3701      	adds	r7, #1
 800b9ea:	4638      	mov	r0, r7
 800b9ec:	f7f4 fd0a 	bl	8000404 <__aeabi_i2d>
 800b9f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9f4:	f7f4 fd70 	bl	80004d8 <__aeabi_dmul>
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	4b62      	ldr	r3, [pc, #392]	; (800bb84 <_dtoa_r+0x5b4>)
 800b9fc:	f7f4 fbb6 	bl	800016c <__adddf3>
 800ba00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ba04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ba08:	9611      	str	r6, [sp, #68]	; 0x44
 800ba0a:	2c00      	cmp	r4, #0
 800ba0c:	d15d      	bne.n	800baca <_dtoa_r+0x4fa>
 800ba0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba12:	2200      	movs	r2, #0
 800ba14:	4b5c      	ldr	r3, [pc, #368]	; (800bb88 <_dtoa_r+0x5b8>)
 800ba16:	f7f4 fba7 	bl	8000168 <__aeabi_dsub>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba22:	4633      	mov	r3, r6
 800ba24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ba26:	f7f4 ffe7 	bl	80009f8 <__aeabi_dcmpgt>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	f040 829c 	bne.w	800bf68 <_dtoa_r+0x998>
 800ba30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ba36:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ba3a:	f7f4 ffbf 	bl	80009bc <__aeabi_dcmplt>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	f040 8290 	bne.w	800bf64 <_dtoa_r+0x994>
 800ba44:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ba48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ba4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f2c0 8152 	blt.w	800bcf8 <_dtoa_r+0x728>
 800ba54:	f1ba 0f0e 	cmp.w	sl, #14
 800ba58:	f300 814e 	bgt.w	800bcf8 <_dtoa_r+0x728>
 800ba5c:	4b45      	ldr	r3, [pc, #276]	; (800bb74 <_dtoa_r+0x5a4>)
 800ba5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ba62:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba66:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ba6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f280 80db 	bge.w	800bc28 <_dtoa_r+0x658>
 800ba72:	9b08      	ldr	r3, [sp, #32]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f300 80d7 	bgt.w	800bc28 <_dtoa_r+0x658>
 800ba7a:	f040 8272 	bne.w	800bf62 <_dtoa_r+0x992>
 800ba7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba82:	2200      	movs	r2, #0
 800ba84:	4b40      	ldr	r3, [pc, #256]	; (800bb88 <_dtoa_r+0x5b8>)
 800ba86:	f7f4 fd27 	bl	80004d8 <__aeabi_dmul>
 800ba8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba8e:	f7f4 ffa9 	bl	80009e4 <__aeabi_dcmpge>
 800ba92:	9c08      	ldr	r4, [sp, #32]
 800ba94:	4626      	mov	r6, r4
 800ba96:	2800      	cmp	r0, #0
 800ba98:	f040 8248 	bne.w	800bf2c <_dtoa_r+0x95c>
 800ba9c:	2331      	movs	r3, #49	; 0x31
 800ba9e:	9f03      	ldr	r7, [sp, #12]
 800baa0:	f10a 0a01 	add.w	sl, sl, #1
 800baa4:	f807 3b01 	strb.w	r3, [r7], #1
 800baa8:	e244      	b.n	800bf34 <_dtoa_r+0x964>
 800baaa:	07e2      	lsls	r2, r4, #31
 800baac:	d505      	bpl.n	800baba <_dtoa_r+0x4ea>
 800baae:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bab2:	f7f4 fd11 	bl	80004d8 <__aeabi_dmul>
 800bab6:	2301      	movs	r3, #1
 800bab8:	3701      	adds	r7, #1
 800baba:	1064      	asrs	r4, r4, #1
 800babc:	3608      	adds	r6, #8
 800babe:	e76d      	b.n	800b99c <_dtoa_r+0x3cc>
 800bac0:	2702      	movs	r7, #2
 800bac2:	e770      	b.n	800b9a6 <_dtoa_r+0x3d6>
 800bac4:	46d0      	mov	r8, sl
 800bac6:	9c08      	ldr	r4, [sp, #32]
 800bac8:	e78f      	b.n	800b9ea <_dtoa_r+0x41a>
 800baca:	9903      	ldr	r1, [sp, #12]
 800bacc:	4b29      	ldr	r3, [pc, #164]	; (800bb74 <_dtoa_r+0x5a4>)
 800bace:	4421      	add	r1, r4
 800bad0:	9112      	str	r1, [sp, #72]	; 0x48
 800bad2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bad4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bad8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800badc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bae0:	2900      	cmp	r1, #0
 800bae2:	d055      	beq.n	800bb90 <_dtoa_r+0x5c0>
 800bae4:	2000      	movs	r0, #0
 800bae6:	4929      	ldr	r1, [pc, #164]	; (800bb8c <_dtoa_r+0x5bc>)
 800bae8:	f7f4 fe20 	bl	800072c <__aeabi_ddiv>
 800baec:	463b      	mov	r3, r7
 800baee:	4632      	mov	r2, r6
 800baf0:	f7f4 fb3a 	bl	8000168 <__aeabi_dsub>
 800baf4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800baf8:	9f03      	ldr	r7, [sp, #12]
 800bafa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bafe:	f7f4 ff9b 	bl	8000a38 <__aeabi_d2iz>
 800bb02:	4604      	mov	r4, r0
 800bb04:	f7f4 fc7e 	bl	8000404 <__aeabi_i2d>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb10:	f7f4 fb2a 	bl	8000168 <__aeabi_dsub>
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	3430      	adds	r4, #48	; 0x30
 800bb1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb22:	f807 4b01 	strb.w	r4, [r7], #1
 800bb26:	f7f4 ff49 	bl	80009bc <__aeabi_dcmplt>
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	d174      	bne.n	800bc18 <_dtoa_r+0x648>
 800bb2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb32:	2000      	movs	r0, #0
 800bb34:	4911      	ldr	r1, [pc, #68]	; (800bb7c <_dtoa_r+0x5ac>)
 800bb36:	f7f4 fb17 	bl	8000168 <__aeabi_dsub>
 800bb3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb3e:	f7f4 ff3d 	bl	80009bc <__aeabi_dcmplt>
 800bb42:	2800      	cmp	r0, #0
 800bb44:	f040 80b7 	bne.w	800bcb6 <_dtoa_r+0x6e6>
 800bb48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb4a:	429f      	cmp	r7, r3
 800bb4c:	f43f af7a 	beq.w	800ba44 <_dtoa_r+0x474>
 800bb50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bb54:	2200      	movs	r2, #0
 800bb56:	4b0a      	ldr	r3, [pc, #40]	; (800bb80 <_dtoa_r+0x5b0>)
 800bb58:	f7f4 fcbe 	bl	80004d8 <__aeabi_dmul>
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bb62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb66:	4b06      	ldr	r3, [pc, #24]	; (800bb80 <_dtoa_r+0x5b0>)
 800bb68:	f7f4 fcb6 	bl	80004d8 <__aeabi_dmul>
 800bb6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb70:	e7c3      	b.n	800bafa <_dtoa_r+0x52a>
 800bb72:	bf00      	nop
 800bb74:	0800dd90 	.word	0x0800dd90
 800bb78:	0800dd68 	.word	0x0800dd68
 800bb7c:	3ff00000 	.word	0x3ff00000
 800bb80:	40240000 	.word	0x40240000
 800bb84:	401c0000 	.word	0x401c0000
 800bb88:	40140000 	.word	0x40140000
 800bb8c:	3fe00000 	.word	0x3fe00000
 800bb90:	4630      	mov	r0, r6
 800bb92:	4639      	mov	r1, r7
 800bb94:	f7f4 fca0 	bl	80004d8 <__aeabi_dmul>
 800bb98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bb9e:	9c03      	ldr	r4, [sp, #12]
 800bba0:	9314      	str	r3, [sp, #80]	; 0x50
 800bba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bba6:	f7f4 ff47 	bl	8000a38 <__aeabi_d2iz>
 800bbaa:	9015      	str	r0, [sp, #84]	; 0x54
 800bbac:	f7f4 fc2a 	bl	8000404 <__aeabi_i2d>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbb8:	f7f4 fad6 	bl	8000168 <__aeabi_dsub>
 800bbbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbbe:	4606      	mov	r6, r0
 800bbc0:	3330      	adds	r3, #48	; 0x30
 800bbc2:	f804 3b01 	strb.w	r3, [r4], #1
 800bbc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bbc8:	460f      	mov	r7, r1
 800bbca:	429c      	cmp	r4, r3
 800bbcc:	f04f 0200 	mov.w	r2, #0
 800bbd0:	d124      	bne.n	800bc1c <_dtoa_r+0x64c>
 800bbd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bbd6:	4bb0      	ldr	r3, [pc, #704]	; (800be98 <_dtoa_r+0x8c8>)
 800bbd8:	f7f4 fac8 	bl	800016c <__adddf3>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	460b      	mov	r3, r1
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	4639      	mov	r1, r7
 800bbe4:	f7f4 ff08 	bl	80009f8 <__aeabi_dcmpgt>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	d163      	bne.n	800bcb4 <_dtoa_r+0x6e4>
 800bbec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bbf0:	2000      	movs	r0, #0
 800bbf2:	49a9      	ldr	r1, [pc, #676]	; (800be98 <_dtoa_r+0x8c8>)
 800bbf4:	f7f4 fab8 	bl	8000168 <__aeabi_dsub>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	4639      	mov	r1, r7
 800bc00:	f7f4 fedc 	bl	80009bc <__aeabi_dcmplt>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	f43f af1d 	beq.w	800ba44 <_dtoa_r+0x474>
 800bc0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bc0c:	1e7b      	subs	r3, r7, #1
 800bc0e:	9314      	str	r3, [sp, #80]	; 0x50
 800bc10:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800bc14:	2b30      	cmp	r3, #48	; 0x30
 800bc16:	d0f8      	beq.n	800bc0a <_dtoa_r+0x63a>
 800bc18:	46c2      	mov	sl, r8
 800bc1a:	e03b      	b.n	800bc94 <_dtoa_r+0x6c4>
 800bc1c:	4b9f      	ldr	r3, [pc, #636]	; (800be9c <_dtoa_r+0x8cc>)
 800bc1e:	f7f4 fc5b 	bl	80004d8 <__aeabi_dmul>
 800bc22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc26:	e7bc      	b.n	800bba2 <_dtoa_r+0x5d2>
 800bc28:	9f03      	ldr	r7, [sp, #12]
 800bc2a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bc2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc32:	4640      	mov	r0, r8
 800bc34:	4649      	mov	r1, r9
 800bc36:	f7f4 fd79 	bl	800072c <__aeabi_ddiv>
 800bc3a:	f7f4 fefd 	bl	8000a38 <__aeabi_d2iz>
 800bc3e:	4604      	mov	r4, r0
 800bc40:	f7f4 fbe0 	bl	8000404 <__aeabi_i2d>
 800bc44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc48:	f7f4 fc46 	bl	80004d8 <__aeabi_dmul>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4640      	mov	r0, r8
 800bc52:	4649      	mov	r1, r9
 800bc54:	f7f4 fa88 	bl	8000168 <__aeabi_dsub>
 800bc58:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800bc5c:	f807 6b01 	strb.w	r6, [r7], #1
 800bc60:	9e03      	ldr	r6, [sp, #12]
 800bc62:	f8dd c020 	ldr.w	ip, [sp, #32]
 800bc66:	1bbe      	subs	r6, r7, r6
 800bc68:	45b4      	cmp	ip, r6
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	d136      	bne.n	800bcde <_dtoa_r+0x70e>
 800bc70:	f7f4 fa7c 	bl	800016c <__adddf3>
 800bc74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc78:	4680      	mov	r8, r0
 800bc7a:	4689      	mov	r9, r1
 800bc7c:	f7f4 febc 	bl	80009f8 <__aeabi_dcmpgt>
 800bc80:	bb58      	cbnz	r0, 800bcda <_dtoa_r+0x70a>
 800bc82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc86:	4640      	mov	r0, r8
 800bc88:	4649      	mov	r1, r9
 800bc8a:	f7f4 fe8d 	bl	80009a8 <__aeabi_dcmpeq>
 800bc8e:	b108      	cbz	r0, 800bc94 <_dtoa_r+0x6c4>
 800bc90:	07e1      	lsls	r1, r4, #31
 800bc92:	d422      	bmi.n	800bcda <_dtoa_r+0x70a>
 800bc94:	4628      	mov	r0, r5
 800bc96:	4659      	mov	r1, fp
 800bc98:	f000 fbea 	bl	800c470 <_Bfree>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	703b      	strb	r3, [r7, #0]
 800bca0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bca2:	f10a 0001 	add.w	r0, sl, #1
 800bca6:	6018      	str	r0, [r3, #0]
 800bca8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	f43f acde 	beq.w	800b66c <_dtoa_r+0x9c>
 800bcb0:	601f      	str	r7, [r3, #0]
 800bcb2:	e4db      	b.n	800b66c <_dtoa_r+0x9c>
 800bcb4:	4627      	mov	r7, r4
 800bcb6:	463b      	mov	r3, r7
 800bcb8:	461f      	mov	r7, r3
 800bcba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcbe:	2a39      	cmp	r2, #57	; 0x39
 800bcc0:	d107      	bne.n	800bcd2 <_dtoa_r+0x702>
 800bcc2:	9a03      	ldr	r2, [sp, #12]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d1f7      	bne.n	800bcb8 <_dtoa_r+0x6e8>
 800bcc8:	2230      	movs	r2, #48	; 0x30
 800bcca:	9903      	ldr	r1, [sp, #12]
 800bccc:	f108 0801 	add.w	r8, r8, #1
 800bcd0:	700a      	strb	r2, [r1, #0]
 800bcd2:	781a      	ldrb	r2, [r3, #0]
 800bcd4:	3201      	adds	r2, #1
 800bcd6:	701a      	strb	r2, [r3, #0]
 800bcd8:	e79e      	b.n	800bc18 <_dtoa_r+0x648>
 800bcda:	46d0      	mov	r8, sl
 800bcdc:	e7eb      	b.n	800bcb6 <_dtoa_r+0x6e6>
 800bcde:	2200      	movs	r2, #0
 800bce0:	4b6e      	ldr	r3, [pc, #440]	; (800be9c <_dtoa_r+0x8cc>)
 800bce2:	f7f4 fbf9 	bl	80004d8 <__aeabi_dmul>
 800bce6:	2200      	movs	r2, #0
 800bce8:	2300      	movs	r3, #0
 800bcea:	4680      	mov	r8, r0
 800bcec:	4689      	mov	r9, r1
 800bcee:	f7f4 fe5b 	bl	80009a8 <__aeabi_dcmpeq>
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d09b      	beq.n	800bc2e <_dtoa_r+0x65e>
 800bcf6:	e7cd      	b.n	800bc94 <_dtoa_r+0x6c4>
 800bcf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bcfa:	2a00      	cmp	r2, #0
 800bcfc:	f000 80d0 	beq.w	800bea0 <_dtoa_r+0x8d0>
 800bd00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bd02:	2a01      	cmp	r2, #1
 800bd04:	f300 80ae 	bgt.w	800be64 <_dtoa_r+0x894>
 800bd08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bd0a:	2a00      	cmp	r2, #0
 800bd0c:	f000 80a6 	beq.w	800be5c <_dtoa_r+0x88c>
 800bd10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bd14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bd16:	9f06      	ldr	r7, [sp, #24]
 800bd18:	9a06      	ldr	r2, [sp, #24]
 800bd1a:	2101      	movs	r1, #1
 800bd1c:	441a      	add	r2, r3
 800bd1e:	9206      	str	r2, [sp, #24]
 800bd20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd22:	4628      	mov	r0, r5
 800bd24:	441a      	add	r2, r3
 800bd26:	9209      	str	r2, [sp, #36]	; 0x24
 800bd28:	f000 fc58 	bl	800c5dc <__i2b>
 800bd2c:	4606      	mov	r6, r0
 800bd2e:	2f00      	cmp	r7, #0
 800bd30:	dd0c      	ble.n	800bd4c <_dtoa_r+0x77c>
 800bd32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	dd09      	ble.n	800bd4c <_dtoa_r+0x77c>
 800bd38:	42bb      	cmp	r3, r7
 800bd3a:	bfa8      	it	ge
 800bd3c:	463b      	movge	r3, r7
 800bd3e:	9a06      	ldr	r2, [sp, #24]
 800bd40:	1aff      	subs	r7, r7, r3
 800bd42:	1ad2      	subs	r2, r2, r3
 800bd44:	9206      	str	r2, [sp, #24]
 800bd46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd4e:	b1f3      	cbz	r3, 800bd8e <_dtoa_r+0x7be>
 800bd50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	f000 80a8 	beq.w	800bea8 <_dtoa_r+0x8d8>
 800bd58:	2c00      	cmp	r4, #0
 800bd5a:	dd10      	ble.n	800bd7e <_dtoa_r+0x7ae>
 800bd5c:	4631      	mov	r1, r6
 800bd5e:	4622      	mov	r2, r4
 800bd60:	4628      	mov	r0, r5
 800bd62:	f000 fcf9 	bl	800c758 <__pow5mult>
 800bd66:	465a      	mov	r2, fp
 800bd68:	4601      	mov	r1, r0
 800bd6a:	4606      	mov	r6, r0
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	f000 fc4b 	bl	800c608 <__multiply>
 800bd72:	4680      	mov	r8, r0
 800bd74:	4659      	mov	r1, fp
 800bd76:	4628      	mov	r0, r5
 800bd78:	f000 fb7a 	bl	800c470 <_Bfree>
 800bd7c:	46c3      	mov	fp, r8
 800bd7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd80:	1b1a      	subs	r2, r3, r4
 800bd82:	d004      	beq.n	800bd8e <_dtoa_r+0x7be>
 800bd84:	4659      	mov	r1, fp
 800bd86:	4628      	mov	r0, r5
 800bd88:	f000 fce6 	bl	800c758 <__pow5mult>
 800bd8c:	4683      	mov	fp, r0
 800bd8e:	2101      	movs	r1, #1
 800bd90:	4628      	mov	r0, r5
 800bd92:	f000 fc23 	bl	800c5dc <__i2b>
 800bd96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd98:	4604      	mov	r4, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f340 8086 	ble.w	800beac <_dtoa_r+0x8dc>
 800bda0:	461a      	mov	r2, r3
 800bda2:	4601      	mov	r1, r0
 800bda4:	4628      	mov	r0, r5
 800bda6:	f000 fcd7 	bl	800c758 <__pow5mult>
 800bdaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bdac:	4604      	mov	r4, r0
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	dd7f      	ble.n	800beb2 <_dtoa_r+0x8e2>
 800bdb2:	f04f 0800 	mov.w	r8, #0
 800bdb6:	6923      	ldr	r3, [r4, #16]
 800bdb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bdbc:	6918      	ldr	r0, [r3, #16]
 800bdbe:	f000 fbbf 	bl	800c540 <__hi0bits>
 800bdc2:	f1c0 0020 	rsb	r0, r0, #32
 800bdc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdc8:	4418      	add	r0, r3
 800bdca:	f010 001f 	ands.w	r0, r0, #31
 800bdce:	f000 8092 	beq.w	800bef6 <_dtoa_r+0x926>
 800bdd2:	f1c0 0320 	rsb	r3, r0, #32
 800bdd6:	2b04      	cmp	r3, #4
 800bdd8:	f340 808a 	ble.w	800bef0 <_dtoa_r+0x920>
 800bddc:	f1c0 001c 	rsb	r0, r0, #28
 800bde0:	9b06      	ldr	r3, [sp, #24]
 800bde2:	4407      	add	r7, r0
 800bde4:	4403      	add	r3, r0
 800bde6:	9306      	str	r3, [sp, #24]
 800bde8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdea:	4403      	add	r3, r0
 800bdec:	9309      	str	r3, [sp, #36]	; 0x24
 800bdee:	9b06      	ldr	r3, [sp, #24]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	dd05      	ble.n	800be00 <_dtoa_r+0x830>
 800bdf4:	4659      	mov	r1, fp
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	f000 fd07 	bl	800c80c <__lshift>
 800bdfe:	4683      	mov	fp, r0
 800be00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be02:	2b00      	cmp	r3, #0
 800be04:	dd05      	ble.n	800be12 <_dtoa_r+0x842>
 800be06:	4621      	mov	r1, r4
 800be08:	461a      	mov	r2, r3
 800be0a:	4628      	mov	r0, r5
 800be0c:	f000 fcfe 	bl	800c80c <__lshift>
 800be10:	4604      	mov	r4, r0
 800be12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be14:	2b00      	cmp	r3, #0
 800be16:	d070      	beq.n	800befa <_dtoa_r+0x92a>
 800be18:	4621      	mov	r1, r4
 800be1a:	4658      	mov	r0, fp
 800be1c:	f000 fd66 	bl	800c8ec <__mcmp>
 800be20:	2800      	cmp	r0, #0
 800be22:	da6a      	bge.n	800befa <_dtoa_r+0x92a>
 800be24:	2300      	movs	r3, #0
 800be26:	4659      	mov	r1, fp
 800be28:	220a      	movs	r2, #10
 800be2a:	4628      	mov	r0, r5
 800be2c:	f000 fb42 	bl	800c4b4 <__multadd>
 800be30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be32:	4683      	mov	fp, r0
 800be34:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f000 8194 	beq.w	800c166 <_dtoa_r+0xb96>
 800be3e:	4631      	mov	r1, r6
 800be40:	2300      	movs	r3, #0
 800be42:	220a      	movs	r2, #10
 800be44:	4628      	mov	r0, r5
 800be46:	f000 fb35 	bl	800c4b4 <__multadd>
 800be4a:	f1b9 0f00 	cmp.w	r9, #0
 800be4e:	4606      	mov	r6, r0
 800be50:	f300 8093 	bgt.w	800bf7a <_dtoa_r+0x9aa>
 800be54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be56:	2b02      	cmp	r3, #2
 800be58:	dc57      	bgt.n	800bf0a <_dtoa_r+0x93a>
 800be5a:	e08e      	b.n	800bf7a <_dtoa_r+0x9aa>
 800be5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800be5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be62:	e757      	b.n	800bd14 <_dtoa_r+0x744>
 800be64:	9b08      	ldr	r3, [sp, #32]
 800be66:	1e5c      	subs	r4, r3, #1
 800be68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be6a:	42a3      	cmp	r3, r4
 800be6c:	bfb7      	itett	lt
 800be6e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800be70:	1b1c      	subge	r4, r3, r4
 800be72:	1ae2      	sublt	r2, r4, r3
 800be74:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800be76:	bfbe      	ittt	lt
 800be78:	940a      	strlt	r4, [sp, #40]	; 0x28
 800be7a:	189b      	addlt	r3, r3, r2
 800be7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800be7e:	9b08      	ldr	r3, [sp, #32]
 800be80:	bfb8      	it	lt
 800be82:	2400      	movlt	r4, #0
 800be84:	2b00      	cmp	r3, #0
 800be86:	bfbb      	ittet	lt
 800be88:	9b06      	ldrlt	r3, [sp, #24]
 800be8a:	9a08      	ldrlt	r2, [sp, #32]
 800be8c:	9f06      	ldrge	r7, [sp, #24]
 800be8e:	1a9f      	sublt	r7, r3, r2
 800be90:	bfac      	ite	ge
 800be92:	9b08      	ldrge	r3, [sp, #32]
 800be94:	2300      	movlt	r3, #0
 800be96:	e73f      	b.n	800bd18 <_dtoa_r+0x748>
 800be98:	3fe00000 	.word	0x3fe00000
 800be9c:	40240000 	.word	0x40240000
 800bea0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bea2:	9f06      	ldr	r7, [sp, #24]
 800bea4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bea6:	e742      	b.n	800bd2e <_dtoa_r+0x75e>
 800bea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800beaa:	e76b      	b.n	800bd84 <_dtoa_r+0x7b4>
 800beac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800beae:	2b01      	cmp	r3, #1
 800beb0:	dc19      	bgt.n	800bee6 <_dtoa_r+0x916>
 800beb2:	9b04      	ldr	r3, [sp, #16]
 800beb4:	b9bb      	cbnz	r3, 800bee6 <_dtoa_r+0x916>
 800beb6:	9b05      	ldr	r3, [sp, #20]
 800beb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bebc:	b99b      	cbnz	r3, 800bee6 <_dtoa_r+0x916>
 800bebe:	9b05      	ldr	r3, [sp, #20]
 800bec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bec4:	0d1b      	lsrs	r3, r3, #20
 800bec6:	051b      	lsls	r3, r3, #20
 800bec8:	b183      	cbz	r3, 800beec <_dtoa_r+0x91c>
 800beca:	f04f 0801 	mov.w	r8, #1
 800bece:	9b06      	ldr	r3, [sp, #24]
 800bed0:	3301      	adds	r3, #1
 800bed2:	9306      	str	r3, [sp, #24]
 800bed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bed6:	3301      	adds	r3, #1
 800bed8:	9309      	str	r3, [sp, #36]	; 0x24
 800beda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f47f af6a 	bne.w	800bdb6 <_dtoa_r+0x7e6>
 800bee2:	2001      	movs	r0, #1
 800bee4:	e76f      	b.n	800bdc6 <_dtoa_r+0x7f6>
 800bee6:	f04f 0800 	mov.w	r8, #0
 800beea:	e7f6      	b.n	800beda <_dtoa_r+0x90a>
 800beec:	4698      	mov	r8, r3
 800beee:	e7f4      	b.n	800beda <_dtoa_r+0x90a>
 800bef0:	f43f af7d 	beq.w	800bdee <_dtoa_r+0x81e>
 800bef4:	4618      	mov	r0, r3
 800bef6:	301c      	adds	r0, #28
 800bef8:	e772      	b.n	800bde0 <_dtoa_r+0x810>
 800befa:	9b08      	ldr	r3, [sp, #32]
 800befc:	2b00      	cmp	r3, #0
 800befe:	dc36      	bgt.n	800bf6e <_dtoa_r+0x99e>
 800bf00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf02:	2b02      	cmp	r3, #2
 800bf04:	dd33      	ble.n	800bf6e <_dtoa_r+0x99e>
 800bf06:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf0a:	f1b9 0f00 	cmp.w	r9, #0
 800bf0e:	d10d      	bne.n	800bf2c <_dtoa_r+0x95c>
 800bf10:	4621      	mov	r1, r4
 800bf12:	464b      	mov	r3, r9
 800bf14:	2205      	movs	r2, #5
 800bf16:	4628      	mov	r0, r5
 800bf18:	f000 facc 	bl	800c4b4 <__multadd>
 800bf1c:	4601      	mov	r1, r0
 800bf1e:	4604      	mov	r4, r0
 800bf20:	4658      	mov	r0, fp
 800bf22:	f000 fce3 	bl	800c8ec <__mcmp>
 800bf26:	2800      	cmp	r0, #0
 800bf28:	f73f adb8 	bgt.w	800ba9c <_dtoa_r+0x4cc>
 800bf2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bf2e:	9f03      	ldr	r7, [sp, #12]
 800bf30:	ea6f 0a03 	mvn.w	sl, r3
 800bf34:	f04f 0800 	mov.w	r8, #0
 800bf38:	4621      	mov	r1, r4
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	f000 fa98 	bl	800c470 <_Bfree>
 800bf40:	2e00      	cmp	r6, #0
 800bf42:	f43f aea7 	beq.w	800bc94 <_dtoa_r+0x6c4>
 800bf46:	f1b8 0f00 	cmp.w	r8, #0
 800bf4a:	d005      	beq.n	800bf58 <_dtoa_r+0x988>
 800bf4c:	45b0      	cmp	r8, r6
 800bf4e:	d003      	beq.n	800bf58 <_dtoa_r+0x988>
 800bf50:	4641      	mov	r1, r8
 800bf52:	4628      	mov	r0, r5
 800bf54:	f000 fa8c 	bl	800c470 <_Bfree>
 800bf58:	4631      	mov	r1, r6
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	f000 fa88 	bl	800c470 <_Bfree>
 800bf60:	e698      	b.n	800bc94 <_dtoa_r+0x6c4>
 800bf62:	2400      	movs	r4, #0
 800bf64:	4626      	mov	r6, r4
 800bf66:	e7e1      	b.n	800bf2c <_dtoa_r+0x95c>
 800bf68:	46c2      	mov	sl, r8
 800bf6a:	4626      	mov	r6, r4
 800bf6c:	e596      	b.n	800ba9c <_dtoa_r+0x4cc>
 800bf6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f000 80fd 	beq.w	800c174 <_dtoa_r+0xba4>
 800bf7a:	2f00      	cmp	r7, #0
 800bf7c:	dd05      	ble.n	800bf8a <_dtoa_r+0x9ba>
 800bf7e:	4631      	mov	r1, r6
 800bf80:	463a      	mov	r2, r7
 800bf82:	4628      	mov	r0, r5
 800bf84:	f000 fc42 	bl	800c80c <__lshift>
 800bf88:	4606      	mov	r6, r0
 800bf8a:	f1b8 0f00 	cmp.w	r8, #0
 800bf8e:	d05c      	beq.n	800c04a <_dtoa_r+0xa7a>
 800bf90:	4628      	mov	r0, r5
 800bf92:	6871      	ldr	r1, [r6, #4]
 800bf94:	f000 fa2c 	bl	800c3f0 <_Balloc>
 800bf98:	4607      	mov	r7, r0
 800bf9a:	b928      	cbnz	r0, 800bfa8 <_dtoa_r+0x9d8>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bfa2:	4b7f      	ldr	r3, [pc, #508]	; (800c1a0 <_dtoa_r+0xbd0>)
 800bfa4:	f7ff bb28 	b.w	800b5f8 <_dtoa_r+0x28>
 800bfa8:	6932      	ldr	r2, [r6, #16]
 800bfaa:	f106 010c 	add.w	r1, r6, #12
 800bfae:	3202      	adds	r2, #2
 800bfb0:	0092      	lsls	r2, r2, #2
 800bfb2:	300c      	adds	r0, #12
 800bfb4:	f000 fa0e 	bl	800c3d4 <memcpy>
 800bfb8:	2201      	movs	r2, #1
 800bfba:	4639      	mov	r1, r7
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	f000 fc25 	bl	800c80c <__lshift>
 800bfc2:	46b0      	mov	r8, r6
 800bfc4:	4606      	mov	r6, r0
 800bfc6:	9b03      	ldr	r3, [sp, #12]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	9308      	str	r3, [sp, #32]
 800bfcc:	9b03      	ldr	r3, [sp, #12]
 800bfce:	444b      	add	r3, r9
 800bfd0:	930a      	str	r3, [sp, #40]	; 0x28
 800bfd2:	9b04      	ldr	r3, [sp, #16]
 800bfd4:	f003 0301 	and.w	r3, r3, #1
 800bfd8:	9309      	str	r3, [sp, #36]	; 0x24
 800bfda:	9b08      	ldr	r3, [sp, #32]
 800bfdc:	4621      	mov	r1, r4
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	4658      	mov	r0, fp
 800bfe2:	9304      	str	r3, [sp, #16]
 800bfe4:	f7ff fa68 	bl	800b4b8 <quorem>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	4641      	mov	r1, r8
 800bfec:	3330      	adds	r3, #48	; 0x30
 800bfee:	9006      	str	r0, [sp, #24]
 800bff0:	4658      	mov	r0, fp
 800bff2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bff4:	f000 fc7a 	bl	800c8ec <__mcmp>
 800bff8:	4632      	mov	r2, r6
 800bffa:	4681      	mov	r9, r0
 800bffc:	4621      	mov	r1, r4
 800bffe:	4628      	mov	r0, r5
 800c000:	f000 fc90 	bl	800c924 <__mdiff>
 800c004:	68c2      	ldr	r2, [r0, #12]
 800c006:	4607      	mov	r7, r0
 800c008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c00a:	bb02      	cbnz	r2, 800c04e <_dtoa_r+0xa7e>
 800c00c:	4601      	mov	r1, r0
 800c00e:	4658      	mov	r0, fp
 800c010:	f000 fc6c 	bl	800c8ec <__mcmp>
 800c014:	4602      	mov	r2, r0
 800c016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c018:	4639      	mov	r1, r7
 800c01a:	4628      	mov	r0, r5
 800c01c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c020:	f000 fa26 	bl	800c470 <_Bfree>
 800c024:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c026:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c028:	9f08      	ldr	r7, [sp, #32]
 800c02a:	ea43 0102 	orr.w	r1, r3, r2
 800c02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c030:	430b      	orrs	r3, r1
 800c032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c034:	d10d      	bne.n	800c052 <_dtoa_r+0xa82>
 800c036:	2b39      	cmp	r3, #57	; 0x39
 800c038:	d029      	beq.n	800c08e <_dtoa_r+0xabe>
 800c03a:	f1b9 0f00 	cmp.w	r9, #0
 800c03e:	dd01      	ble.n	800c044 <_dtoa_r+0xa74>
 800c040:	9b06      	ldr	r3, [sp, #24]
 800c042:	3331      	adds	r3, #49	; 0x31
 800c044:	9a04      	ldr	r2, [sp, #16]
 800c046:	7013      	strb	r3, [r2, #0]
 800c048:	e776      	b.n	800bf38 <_dtoa_r+0x968>
 800c04a:	4630      	mov	r0, r6
 800c04c:	e7b9      	b.n	800bfc2 <_dtoa_r+0x9f2>
 800c04e:	2201      	movs	r2, #1
 800c050:	e7e2      	b.n	800c018 <_dtoa_r+0xa48>
 800c052:	f1b9 0f00 	cmp.w	r9, #0
 800c056:	db06      	blt.n	800c066 <_dtoa_r+0xa96>
 800c058:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c05a:	ea41 0909 	orr.w	r9, r1, r9
 800c05e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c060:	ea59 0101 	orrs.w	r1, r9, r1
 800c064:	d120      	bne.n	800c0a8 <_dtoa_r+0xad8>
 800c066:	2a00      	cmp	r2, #0
 800c068:	ddec      	ble.n	800c044 <_dtoa_r+0xa74>
 800c06a:	4659      	mov	r1, fp
 800c06c:	2201      	movs	r2, #1
 800c06e:	4628      	mov	r0, r5
 800c070:	9308      	str	r3, [sp, #32]
 800c072:	f000 fbcb 	bl	800c80c <__lshift>
 800c076:	4621      	mov	r1, r4
 800c078:	4683      	mov	fp, r0
 800c07a:	f000 fc37 	bl	800c8ec <__mcmp>
 800c07e:	2800      	cmp	r0, #0
 800c080:	9b08      	ldr	r3, [sp, #32]
 800c082:	dc02      	bgt.n	800c08a <_dtoa_r+0xaba>
 800c084:	d1de      	bne.n	800c044 <_dtoa_r+0xa74>
 800c086:	07da      	lsls	r2, r3, #31
 800c088:	d5dc      	bpl.n	800c044 <_dtoa_r+0xa74>
 800c08a:	2b39      	cmp	r3, #57	; 0x39
 800c08c:	d1d8      	bne.n	800c040 <_dtoa_r+0xa70>
 800c08e:	2339      	movs	r3, #57	; 0x39
 800c090:	9a04      	ldr	r2, [sp, #16]
 800c092:	7013      	strb	r3, [r2, #0]
 800c094:	463b      	mov	r3, r7
 800c096:	461f      	mov	r7, r3
 800c098:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c09c:	3b01      	subs	r3, #1
 800c09e:	2a39      	cmp	r2, #57	; 0x39
 800c0a0:	d050      	beq.n	800c144 <_dtoa_r+0xb74>
 800c0a2:	3201      	adds	r2, #1
 800c0a4:	701a      	strb	r2, [r3, #0]
 800c0a6:	e747      	b.n	800bf38 <_dtoa_r+0x968>
 800c0a8:	2a00      	cmp	r2, #0
 800c0aa:	dd03      	ble.n	800c0b4 <_dtoa_r+0xae4>
 800c0ac:	2b39      	cmp	r3, #57	; 0x39
 800c0ae:	d0ee      	beq.n	800c08e <_dtoa_r+0xabe>
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	e7c7      	b.n	800c044 <_dtoa_r+0xa74>
 800c0b4:	9a08      	ldr	r2, [sp, #32]
 800c0b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c0b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c0bc:	428a      	cmp	r2, r1
 800c0be:	d02a      	beq.n	800c116 <_dtoa_r+0xb46>
 800c0c0:	4659      	mov	r1, fp
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	220a      	movs	r2, #10
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	f000 f9f4 	bl	800c4b4 <__multadd>
 800c0cc:	45b0      	cmp	r8, r6
 800c0ce:	4683      	mov	fp, r0
 800c0d0:	f04f 0300 	mov.w	r3, #0
 800c0d4:	f04f 020a 	mov.w	r2, #10
 800c0d8:	4641      	mov	r1, r8
 800c0da:	4628      	mov	r0, r5
 800c0dc:	d107      	bne.n	800c0ee <_dtoa_r+0xb1e>
 800c0de:	f000 f9e9 	bl	800c4b4 <__multadd>
 800c0e2:	4680      	mov	r8, r0
 800c0e4:	4606      	mov	r6, r0
 800c0e6:	9b08      	ldr	r3, [sp, #32]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	9308      	str	r3, [sp, #32]
 800c0ec:	e775      	b.n	800bfda <_dtoa_r+0xa0a>
 800c0ee:	f000 f9e1 	bl	800c4b4 <__multadd>
 800c0f2:	4631      	mov	r1, r6
 800c0f4:	4680      	mov	r8, r0
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	220a      	movs	r2, #10
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	f000 f9da 	bl	800c4b4 <__multadd>
 800c100:	4606      	mov	r6, r0
 800c102:	e7f0      	b.n	800c0e6 <_dtoa_r+0xb16>
 800c104:	f1b9 0f00 	cmp.w	r9, #0
 800c108:	bfcc      	ite	gt
 800c10a:	464f      	movgt	r7, r9
 800c10c:	2701      	movle	r7, #1
 800c10e:	f04f 0800 	mov.w	r8, #0
 800c112:	9a03      	ldr	r2, [sp, #12]
 800c114:	4417      	add	r7, r2
 800c116:	4659      	mov	r1, fp
 800c118:	2201      	movs	r2, #1
 800c11a:	4628      	mov	r0, r5
 800c11c:	9308      	str	r3, [sp, #32]
 800c11e:	f000 fb75 	bl	800c80c <__lshift>
 800c122:	4621      	mov	r1, r4
 800c124:	4683      	mov	fp, r0
 800c126:	f000 fbe1 	bl	800c8ec <__mcmp>
 800c12a:	2800      	cmp	r0, #0
 800c12c:	dcb2      	bgt.n	800c094 <_dtoa_r+0xac4>
 800c12e:	d102      	bne.n	800c136 <_dtoa_r+0xb66>
 800c130:	9b08      	ldr	r3, [sp, #32]
 800c132:	07db      	lsls	r3, r3, #31
 800c134:	d4ae      	bmi.n	800c094 <_dtoa_r+0xac4>
 800c136:	463b      	mov	r3, r7
 800c138:	461f      	mov	r7, r3
 800c13a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c13e:	2a30      	cmp	r2, #48	; 0x30
 800c140:	d0fa      	beq.n	800c138 <_dtoa_r+0xb68>
 800c142:	e6f9      	b.n	800bf38 <_dtoa_r+0x968>
 800c144:	9a03      	ldr	r2, [sp, #12]
 800c146:	429a      	cmp	r2, r3
 800c148:	d1a5      	bne.n	800c096 <_dtoa_r+0xac6>
 800c14a:	2331      	movs	r3, #49	; 0x31
 800c14c:	f10a 0a01 	add.w	sl, sl, #1
 800c150:	e779      	b.n	800c046 <_dtoa_r+0xa76>
 800c152:	4b14      	ldr	r3, [pc, #80]	; (800c1a4 <_dtoa_r+0xbd4>)
 800c154:	f7ff baa8 	b.w	800b6a8 <_dtoa_r+0xd8>
 800c158:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	f47f aa81 	bne.w	800b662 <_dtoa_r+0x92>
 800c160:	4b11      	ldr	r3, [pc, #68]	; (800c1a8 <_dtoa_r+0xbd8>)
 800c162:	f7ff baa1 	b.w	800b6a8 <_dtoa_r+0xd8>
 800c166:	f1b9 0f00 	cmp.w	r9, #0
 800c16a:	dc03      	bgt.n	800c174 <_dtoa_r+0xba4>
 800c16c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c16e:	2b02      	cmp	r3, #2
 800c170:	f73f aecb 	bgt.w	800bf0a <_dtoa_r+0x93a>
 800c174:	9f03      	ldr	r7, [sp, #12]
 800c176:	4621      	mov	r1, r4
 800c178:	4658      	mov	r0, fp
 800c17a:	f7ff f99d 	bl	800b4b8 <quorem>
 800c17e:	9a03      	ldr	r2, [sp, #12]
 800c180:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c184:	f807 3b01 	strb.w	r3, [r7], #1
 800c188:	1aba      	subs	r2, r7, r2
 800c18a:	4591      	cmp	r9, r2
 800c18c:	ddba      	ble.n	800c104 <_dtoa_r+0xb34>
 800c18e:	4659      	mov	r1, fp
 800c190:	2300      	movs	r3, #0
 800c192:	220a      	movs	r2, #10
 800c194:	4628      	mov	r0, r5
 800c196:	f000 f98d 	bl	800c4b4 <__multadd>
 800c19a:	4683      	mov	fp, r0
 800c19c:	e7eb      	b.n	800c176 <_dtoa_r+0xba6>
 800c19e:	bf00      	nop
 800c1a0:	0800dc9b 	.word	0x0800dc9b
 800c1a4:	0800dbf8 	.word	0x0800dbf8
 800c1a8:	0800dc1c 	.word	0x0800dc1c

0800c1ac <std>:
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	b510      	push	{r4, lr}
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	e9c0 3300 	strd	r3, r3, [r0]
 800c1b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1ba:	6083      	str	r3, [r0, #8]
 800c1bc:	8181      	strh	r1, [r0, #12]
 800c1be:	6643      	str	r3, [r0, #100]	; 0x64
 800c1c0:	81c2      	strh	r2, [r0, #14]
 800c1c2:	6183      	str	r3, [r0, #24]
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	2208      	movs	r2, #8
 800c1c8:	305c      	adds	r0, #92	; 0x5c
 800c1ca:	f7fe fcc1 	bl	800ab50 <memset>
 800c1ce:	4b05      	ldr	r3, [pc, #20]	; (800c1e4 <std+0x38>)
 800c1d0:	6224      	str	r4, [r4, #32]
 800c1d2:	6263      	str	r3, [r4, #36]	; 0x24
 800c1d4:	4b04      	ldr	r3, [pc, #16]	; (800c1e8 <std+0x3c>)
 800c1d6:	62a3      	str	r3, [r4, #40]	; 0x28
 800c1d8:	4b04      	ldr	r3, [pc, #16]	; (800c1ec <std+0x40>)
 800c1da:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c1dc:	4b04      	ldr	r3, [pc, #16]	; (800c1f0 <std+0x44>)
 800c1de:	6323      	str	r3, [r4, #48]	; 0x30
 800c1e0:	bd10      	pop	{r4, pc}
 800c1e2:	bf00      	nop
 800c1e4:	0800d2ed 	.word	0x0800d2ed
 800c1e8:	0800d30f 	.word	0x0800d30f
 800c1ec:	0800d347 	.word	0x0800d347
 800c1f0:	0800d36b 	.word	0x0800d36b

0800c1f4 <_cleanup_r>:
 800c1f4:	4901      	ldr	r1, [pc, #4]	; (800c1fc <_cleanup_r+0x8>)
 800c1f6:	f000 b8af 	b.w	800c358 <_fwalk_reent>
 800c1fa:	bf00      	nop
 800c1fc:	0800d679 	.word	0x0800d679

0800c200 <__sfmoreglue>:
 800c200:	2268      	movs	r2, #104	; 0x68
 800c202:	b570      	push	{r4, r5, r6, lr}
 800c204:	1e4d      	subs	r5, r1, #1
 800c206:	4355      	muls	r5, r2
 800c208:	460e      	mov	r6, r1
 800c20a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c20e:	f000 fced 	bl	800cbec <_malloc_r>
 800c212:	4604      	mov	r4, r0
 800c214:	b140      	cbz	r0, 800c228 <__sfmoreglue+0x28>
 800c216:	2100      	movs	r1, #0
 800c218:	e9c0 1600 	strd	r1, r6, [r0]
 800c21c:	300c      	adds	r0, #12
 800c21e:	60a0      	str	r0, [r4, #8]
 800c220:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c224:	f7fe fc94 	bl	800ab50 <memset>
 800c228:	4620      	mov	r0, r4
 800c22a:	bd70      	pop	{r4, r5, r6, pc}

0800c22c <__sfp_lock_acquire>:
 800c22c:	4801      	ldr	r0, [pc, #4]	; (800c234 <__sfp_lock_acquire+0x8>)
 800c22e:	f000 b8b8 	b.w	800c3a2 <__retarget_lock_acquire_recursive>
 800c232:	bf00      	nop
 800c234:	2000165a 	.word	0x2000165a

0800c238 <__sfp_lock_release>:
 800c238:	4801      	ldr	r0, [pc, #4]	; (800c240 <__sfp_lock_release+0x8>)
 800c23a:	f000 b8b3 	b.w	800c3a4 <__retarget_lock_release_recursive>
 800c23e:	bf00      	nop
 800c240:	2000165a 	.word	0x2000165a

0800c244 <__sinit_lock_acquire>:
 800c244:	4801      	ldr	r0, [pc, #4]	; (800c24c <__sinit_lock_acquire+0x8>)
 800c246:	f000 b8ac 	b.w	800c3a2 <__retarget_lock_acquire_recursive>
 800c24a:	bf00      	nop
 800c24c:	2000165b 	.word	0x2000165b

0800c250 <__sinit_lock_release>:
 800c250:	4801      	ldr	r0, [pc, #4]	; (800c258 <__sinit_lock_release+0x8>)
 800c252:	f000 b8a7 	b.w	800c3a4 <__retarget_lock_release_recursive>
 800c256:	bf00      	nop
 800c258:	2000165b 	.word	0x2000165b

0800c25c <__sinit>:
 800c25c:	b510      	push	{r4, lr}
 800c25e:	4604      	mov	r4, r0
 800c260:	f7ff fff0 	bl	800c244 <__sinit_lock_acquire>
 800c264:	69a3      	ldr	r3, [r4, #24]
 800c266:	b11b      	cbz	r3, 800c270 <__sinit+0x14>
 800c268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c26c:	f7ff bff0 	b.w	800c250 <__sinit_lock_release>
 800c270:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c274:	6523      	str	r3, [r4, #80]	; 0x50
 800c276:	4b13      	ldr	r3, [pc, #76]	; (800c2c4 <__sinit+0x68>)
 800c278:	4a13      	ldr	r2, [pc, #76]	; (800c2c8 <__sinit+0x6c>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c27e:	42a3      	cmp	r3, r4
 800c280:	bf08      	it	eq
 800c282:	2301      	moveq	r3, #1
 800c284:	4620      	mov	r0, r4
 800c286:	bf08      	it	eq
 800c288:	61a3      	streq	r3, [r4, #24]
 800c28a:	f000 f81f 	bl	800c2cc <__sfp>
 800c28e:	6060      	str	r0, [r4, #4]
 800c290:	4620      	mov	r0, r4
 800c292:	f000 f81b 	bl	800c2cc <__sfp>
 800c296:	60a0      	str	r0, [r4, #8]
 800c298:	4620      	mov	r0, r4
 800c29a:	f000 f817 	bl	800c2cc <__sfp>
 800c29e:	2200      	movs	r2, #0
 800c2a0:	2104      	movs	r1, #4
 800c2a2:	60e0      	str	r0, [r4, #12]
 800c2a4:	6860      	ldr	r0, [r4, #4]
 800c2a6:	f7ff ff81 	bl	800c1ac <std>
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	2109      	movs	r1, #9
 800c2ae:	68a0      	ldr	r0, [r4, #8]
 800c2b0:	f7ff ff7c 	bl	800c1ac <std>
 800c2b4:	2202      	movs	r2, #2
 800c2b6:	2112      	movs	r1, #18
 800c2b8:	68e0      	ldr	r0, [r4, #12]
 800c2ba:	f7ff ff77 	bl	800c1ac <std>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	61a3      	str	r3, [r4, #24]
 800c2c2:	e7d1      	b.n	800c268 <__sinit+0xc>
 800c2c4:	0800dbe4 	.word	0x0800dbe4
 800c2c8:	0800c1f5 	.word	0x0800c1f5

0800c2cc <__sfp>:
 800c2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ce:	4607      	mov	r7, r0
 800c2d0:	f7ff ffac 	bl	800c22c <__sfp_lock_acquire>
 800c2d4:	4b1e      	ldr	r3, [pc, #120]	; (800c350 <__sfp+0x84>)
 800c2d6:	681e      	ldr	r6, [r3, #0]
 800c2d8:	69b3      	ldr	r3, [r6, #24]
 800c2da:	b913      	cbnz	r3, 800c2e2 <__sfp+0x16>
 800c2dc:	4630      	mov	r0, r6
 800c2de:	f7ff ffbd 	bl	800c25c <__sinit>
 800c2e2:	3648      	adds	r6, #72	; 0x48
 800c2e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	d503      	bpl.n	800c2f4 <__sfp+0x28>
 800c2ec:	6833      	ldr	r3, [r6, #0]
 800c2ee:	b30b      	cbz	r3, 800c334 <__sfp+0x68>
 800c2f0:	6836      	ldr	r6, [r6, #0]
 800c2f2:	e7f7      	b.n	800c2e4 <__sfp+0x18>
 800c2f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c2f8:	b9d5      	cbnz	r5, 800c330 <__sfp+0x64>
 800c2fa:	4b16      	ldr	r3, [pc, #88]	; (800c354 <__sfp+0x88>)
 800c2fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c300:	60e3      	str	r3, [r4, #12]
 800c302:	6665      	str	r5, [r4, #100]	; 0x64
 800c304:	f000 f84c 	bl	800c3a0 <__retarget_lock_init_recursive>
 800c308:	f7ff ff96 	bl	800c238 <__sfp_lock_release>
 800c30c:	2208      	movs	r2, #8
 800c30e:	4629      	mov	r1, r5
 800c310:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c314:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c318:	6025      	str	r5, [r4, #0]
 800c31a:	61a5      	str	r5, [r4, #24]
 800c31c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c320:	f7fe fc16 	bl	800ab50 <memset>
 800c324:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c328:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c32c:	4620      	mov	r0, r4
 800c32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c330:	3468      	adds	r4, #104	; 0x68
 800c332:	e7d9      	b.n	800c2e8 <__sfp+0x1c>
 800c334:	2104      	movs	r1, #4
 800c336:	4638      	mov	r0, r7
 800c338:	f7ff ff62 	bl	800c200 <__sfmoreglue>
 800c33c:	4604      	mov	r4, r0
 800c33e:	6030      	str	r0, [r6, #0]
 800c340:	2800      	cmp	r0, #0
 800c342:	d1d5      	bne.n	800c2f0 <__sfp+0x24>
 800c344:	f7ff ff78 	bl	800c238 <__sfp_lock_release>
 800c348:	230c      	movs	r3, #12
 800c34a:	603b      	str	r3, [r7, #0]
 800c34c:	e7ee      	b.n	800c32c <__sfp+0x60>
 800c34e:	bf00      	nop
 800c350:	0800dbe4 	.word	0x0800dbe4
 800c354:	ffff0001 	.word	0xffff0001

0800c358 <_fwalk_reent>:
 800c358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c35c:	4606      	mov	r6, r0
 800c35e:	4688      	mov	r8, r1
 800c360:	2700      	movs	r7, #0
 800c362:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c366:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c36a:	f1b9 0901 	subs.w	r9, r9, #1
 800c36e:	d505      	bpl.n	800c37c <_fwalk_reent+0x24>
 800c370:	6824      	ldr	r4, [r4, #0]
 800c372:	2c00      	cmp	r4, #0
 800c374:	d1f7      	bne.n	800c366 <_fwalk_reent+0xe>
 800c376:	4638      	mov	r0, r7
 800c378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c37c:	89ab      	ldrh	r3, [r5, #12]
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d907      	bls.n	800c392 <_fwalk_reent+0x3a>
 800c382:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c386:	3301      	adds	r3, #1
 800c388:	d003      	beq.n	800c392 <_fwalk_reent+0x3a>
 800c38a:	4629      	mov	r1, r5
 800c38c:	4630      	mov	r0, r6
 800c38e:	47c0      	blx	r8
 800c390:	4307      	orrs	r7, r0
 800c392:	3568      	adds	r5, #104	; 0x68
 800c394:	e7e9      	b.n	800c36a <_fwalk_reent+0x12>
	...

0800c398 <_localeconv_r>:
 800c398:	4800      	ldr	r0, [pc, #0]	; (800c39c <_localeconv_r+0x4>)
 800c39a:	4770      	bx	lr
 800c39c:	200002dc 	.word	0x200002dc

0800c3a0 <__retarget_lock_init_recursive>:
 800c3a0:	4770      	bx	lr

0800c3a2 <__retarget_lock_acquire_recursive>:
 800c3a2:	4770      	bx	lr

0800c3a4 <__retarget_lock_release_recursive>:
 800c3a4:	4770      	bx	lr
	...

0800c3a8 <malloc>:
 800c3a8:	4b02      	ldr	r3, [pc, #8]	; (800c3b4 <malloc+0xc>)
 800c3aa:	4601      	mov	r1, r0
 800c3ac:	6818      	ldr	r0, [r3, #0]
 800c3ae:	f000 bc1d 	b.w	800cbec <_malloc_r>
 800c3b2:	bf00      	nop
 800c3b4:	20000188 	.word	0x20000188

0800c3b8 <memchr>:
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	b510      	push	{r4, lr}
 800c3bc:	b2c9      	uxtb	r1, r1
 800c3be:	4402      	add	r2, r0
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	d101      	bne.n	800c3ca <memchr+0x12>
 800c3c6:	2000      	movs	r0, #0
 800c3c8:	e003      	b.n	800c3d2 <memchr+0x1a>
 800c3ca:	7804      	ldrb	r4, [r0, #0]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	428c      	cmp	r4, r1
 800c3d0:	d1f6      	bne.n	800c3c0 <memchr+0x8>
 800c3d2:	bd10      	pop	{r4, pc}

0800c3d4 <memcpy>:
 800c3d4:	440a      	add	r2, r1
 800c3d6:	4291      	cmp	r1, r2
 800c3d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3dc:	d100      	bne.n	800c3e0 <memcpy+0xc>
 800c3de:	4770      	bx	lr
 800c3e0:	b510      	push	{r4, lr}
 800c3e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3e6:	4291      	cmp	r1, r2
 800c3e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3ec:	d1f9      	bne.n	800c3e2 <memcpy+0xe>
 800c3ee:	bd10      	pop	{r4, pc}

0800c3f0 <_Balloc>:
 800c3f0:	b570      	push	{r4, r5, r6, lr}
 800c3f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c3f4:	4604      	mov	r4, r0
 800c3f6:	460d      	mov	r5, r1
 800c3f8:	b976      	cbnz	r6, 800c418 <_Balloc+0x28>
 800c3fa:	2010      	movs	r0, #16
 800c3fc:	f7ff ffd4 	bl	800c3a8 <malloc>
 800c400:	4602      	mov	r2, r0
 800c402:	6260      	str	r0, [r4, #36]	; 0x24
 800c404:	b920      	cbnz	r0, 800c410 <_Balloc+0x20>
 800c406:	2166      	movs	r1, #102	; 0x66
 800c408:	4b17      	ldr	r3, [pc, #92]	; (800c468 <_Balloc+0x78>)
 800c40a:	4818      	ldr	r0, [pc, #96]	; (800c46c <_Balloc+0x7c>)
 800c40c:	f001 f884 	bl	800d518 <__assert_func>
 800c410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c414:	6006      	str	r6, [r0, #0]
 800c416:	60c6      	str	r6, [r0, #12]
 800c418:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c41a:	68f3      	ldr	r3, [r6, #12]
 800c41c:	b183      	cbz	r3, 800c440 <_Balloc+0x50>
 800c41e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c426:	b9b8      	cbnz	r0, 800c458 <_Balloc+0x68>
 800c428:	2101      	movs	r1, #1
 800c42a:	fa01 f605 	lsl.w	r6, r1, r5
 800c42e:	1d72      	adds	r2, r6, #5
 800c430:	4620      	mov	r0, r4
 800c432:	0092      	lsls	r2, r2, #2
 800c434:	f000 fb5e 	bl	800caf4 <_calloc_r>
 800c438:	b160      	cbz	r0, 800c454 <_Balloc+0x64>
 800c43a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c43e:	e00e      	b.n	800c45e <_Balloc+0x6e>
 800c440:	2221      	movs	r2, #33	; 0x21
 800c442:	2104      	movs	r1, #4
 800c444:	4620      	mov	r0, r4
 800c446:	f000 fb55 	bl	800caf4 <_calloc_r>
 800c44a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c44c:	60f0      	str	r0, [r6, #12]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d1e4      	bne.n	800c41e <_Balloc+0x2e>
 800c454:	2000      	movs	r0, #0
 800c456:	bd70      	pop	{r4, r5, r6, pc}
 800c458:	6802      	ldr	r2, [r0, #0]
 800c45a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c45e:	2300      	movs	r3, #0
 800c460:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c464:	e7f7      	b.n	800c456 <_Balloc+0x66>
 800c466:	bf00      	nop
 800c468:	0800dc29 	.word	0x0800dc29
 800c46c:	0800dd0c 	.word	0x0800dd0c

0800c470 <_Bfree>:
 800c470:	b570      	push	{r4, r5, r6, lr}
 800c472:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c474:	4605      	mov	r5, r0
 800c476:	460c      	mov	r4, r1
 800c478:	b976      	cbnz	r6, 800c498 <_Bfree+0x28>
 800c47a:	2010      	movs	r0, #16
 800c47c:	f7ff ff94 	bl	800c3a8 <malloc>
 800c480:	4602      	mov	r2, r0
 800c482:	6268      	str	r0, [r5, #36]	; 0x24
 800c484:	b920      	cbnz	r0, 800c490 <_Bfree+0x20>
 800c486:	218a      	movs	r1, #138	; 0x8a
 800c488:	4b08      	ldr	r3, [pc, #32]	; (800c4ac <_Bfree+0x3c>)
 800c48a:	4809      	ldr	r0, [pc, #36]	; (800c4b0 <_Bfree+0x40>)
 800c48c:	f001 f844 	bl	800d518 <__assert_func>
 800c490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c494:	6006      	str	r6, [r0, #0]
 800c496:	60c6      	str	r6, [r0, #12]
 800c498:	b13c      	cbz	r4, 800c4aa <_Bfree+0x3a>
 800c49a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c49c:	6862      	ldr	r2, [r4, #4]
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4a4:	6021      	str	r1, [r4, #0]
 800c4a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4aa:	bd70      	pop	{r4, r5, r6, pc}
 800c4ac:	0800dc29 	.word	0x0800dc29
 800c4b0:	0800dd0c 	.word	0x0800dd0c

0800c4b4 <__multadd>:
 800c4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4b8:	4607      	mov	r7, r0
 800c4ba:	460c      	mov	r4, r1
 800c4bc:	461e      	mov	r6, r3
 800c4be:	2000      	movs	r0, #0
 800c4c0:	690d      	ldr	r5, [r1, #16]
 800c4c2:	f101 0c14 	add.w	ip, r1, #20
 800c4c6:	f8dc 3000 	ldr.w	r3, [ip]
 800c4ca:	3001      	adds	r0, #1
 800c4cc:	b299      	uxth	r1, r3
 800c4ce:	fb02 6101 	mla	r1, r2, r1, r6
 800c4d2:	0c1e      	lsrs	r6, r3, #16
 800c4d4:	0c0b      	lsrs	r3, r1, #16
 800c4d6:	fb02 3306 	mla	r3, r2, r6, r3
 800c4da:	b289      	uxth	r1, r1
 800c4dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c4e0:	4285      	cmp	r5, r0
 800c4e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c4e6:	f84c 1b04 	str.w	r1, [ip], #4
 800c4ea:	dcec      	bgt.n	800c4c6 <__multadd+0x12>
 800c4ec:	b30e      	cbz	r6, 800c532 <__multadd+0x7e>
 800c4ee:	68a3      	ldr	r3, [r4, #8]
 800c4f0:	42ab      	cmp	r3, r5
 800c4f2:	dc19      	bgt.n	800c528 <__multadd+0x74>
 800c4f4:	6861      	ldr	r1, [r4, #4]
 800c4f6:	4638      	mov	r0, r7
 800c4f8:	3101      	adds	r1, #1
 800c4fa:	f7ff ff79 	bl	800c3f0 <_Balloc>
 800c4fe:	4680      	mov	r8, r0
 800c500:	b928      	cbnz	r0, 800c50e <__multadd+0x5a>
 800c502:	4602      	mov	r2, r0
 800c504:	21b5      	movs	r1, #181	; 0xb5
 800c506:	4b0c      	ldr	r3, [pc, #48]	; (800c538 <__multadd+0x84>)
 800c508:	480c      	ldr	r0, [pc, #48]	; (800c53c <__multadd+0x88>)
 800c50a:	f001 f805 	bl	800d518 <__assert_func>
 800c50e:	6922      	ldr	r2, [r4, #16]
 800c510:	f104 010c 	add.w	r1, r4, #12
 800c514:	3202      	adds	r2, #2
 800c516:	0092      	lsls	r2, r2, #2
 800c518:	300c      	adds	r0, #12
 800c51a:	f7ff ff5b 	bl	800c3d4 <memcpy>
 800c51e:	4621      	mov	r1, r4
 800c520:	4638      	mov	r0, r7
 800c522:	f7ff ffa5 	bl	800c470 <_Bfree>
 800c526:	4644      	mov	r4, r8
 800c528:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c52c:	3501      	adds	r5, #1
 800c52e:	615e      	str	r6, [r3, #20]
 800c530:	6125      	str	r5, [r4, #16]
 800c532:	4620      	mov	r0, r4
 800c534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c538:	0800dc9b 	.word	0x0800dc9b
 800c53c:	0800dd0c 	.word	0x0800dd0c

0800c540 <__hi0bits>:
 800c540:	0c02      	lsrs	r2, r0, #16
 800c542:	0412      	lsls	r2, r2, #16
 800c544:	4603      	mov	r3, r0
 800c546:	b9ca      	cbnz	r2, 800c57c <__hi0bits+0x3c>
 800c548:	0403      	lsls	r3, r0, #16
 800c54a:	2010      	movs	r0, #16
 800c54c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c550:	bf04      	itt	eq
 800c552:	021b      	lsleq	r3, r3, #8
 800c554:	3008      	addeq	r0, #8
 800c556:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c55a:	bf04      	itt	eq
 800c55c:	011b      	lsleq	r3, r3, #4
 800c55e:	3004      	addeq	r0, #4
 800c560:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c564:	bf04      	itt	eq
 800c566:	009b      	lsleq	r3, r3, #2
 800c568:	3002      	addeq	r0, #2
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	db05      	blt.n	800c57a <__hi0bits+0x3a>
 800c56e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c572:	f100 0001 	add.w	r0, r0, #1
 800c576:	bf08      	it	eq
 800c578:	2020      	moveq	r0, #32
 800c57a:	4770      	bx	lr
 800c57c:	2000      	movs	r0, #0
 800c57e:	e7e5      	b.n	800c54c <__hi0bits+0xc>

0800c580 <__lo0bits>:
 800c580:	6803      	ldr	r3, [r0, #0]
 800c582:	4602      	mov	r2, r0
 800c584:	f013 0007 	ands.w	r0, r3, #7
 800c588:	d00b      	beq.n	800c5a2 <__lo0bits+0x22>
 800c58a:	07d9      	lsls	r1, r3, #31
 800c58c:	d421      	bmi.n	800c5d2 <__lo0bits+0x52>
 800c58e:	0798      	lsls	r0, r3, #30
 800c590:	bf49      	itett	mi
 800c592:	085b      	lsrmi	r3, r3, #1
 800c594:	089b      	lsrpl	r3, r3, #2
 800c596:	2001      	movmi	r0, #1
 800c598:	6013      	strmi	r3, [r2, #0]
 800c59a:	bf5c      	itt	pl
 800c59c:	2002      	movpl	r0, #2
 800c59e:	6013      	strpl	r3, [r2, #0]
 800c5a0:	4770      	bx	lr
 800c5a2:	b299      	uxth	r1, r3
 800c5a4:	b909      	cbnz	r1, 800c5aa <__lo0bits+0x2a>
 800c5a6:	2010      	movs	r0, #16
 800c5a8:	0c1b      	lsrs	r3, r3, #16
 800c5aa:	b2d9      	uxtb	r1, r3
 800c5ac:	b909      	cbnz	r1, 800c5b2 <__lo0bits+0x32>
 800c5ae:	3008      	adds	r0, #8
 800c5b0:	0a1b      	lsrs	r3, r3, #8
 800c5b2:	0719      	lsls	r1, r3, #28
 800c5b4:	bf04      	itt	eq
 800c5b6:	091b      	lsreq	r3, r3, #4
 800c5b8:	3004      	addeq	r0, #4
 800c5ba:	0799      	lsls	r1, r3, #30
 800c5bc:	bf04      	itt	eq
 800c5be:	089b      	lsreq	r3, r3, #2
 800c5c0:	3002      	addeq	r0, #2
 800c5c2:	07d9      	lsls	r1, r3, #31
 800c5c4:	d403      	bmi.n	800c5ce <__lo0bits+0x4e>
 800c5c6:	085b      	lsrs	r3, r3, #1
 800c5c8:	f100 0001 	add.w	r0, r0, #1
 800c5cc:	d003      	beq.n	800c5d6 <__lo0bits+0x56>
 800c5ce:	6013      	str	r3, [r2, #0]
 800c5d0:	4770      	bx	lr
 800c5d2:	2000      	movs	r0, #0
 800c5d4:	4770      	bx	lr
 800c5d6:	2020      	movs	r0, #32
 800c5d8:	4770      	bx	lr
	...

0800c5dc <__i2b>:
 800c5dc:	b510      	push	{r4, lr}
 800c5de:	460c      	mov	r4, r1
 800c5e0:	2101      	movs	r1, #1
 800c5e2:	f7ff ff05 	bl	800c3f0 <_Balloc>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	b928      	cbnz	r0, 800c5f6 <__i2b+0x1a>
 800c5ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c5ee:	4b04      	ldr	r3, [pc, #16]	; (800c600 <__i2b+0x24>)
 800c5f0:	4804      	ldr	r0, [pc, #16]	; (800c604 <__i2b+0x28>)
 800c5f2:	f000 ff91 	bl	800d518 <__assert_func>
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	6144      	str	r4, [r0, #20]
 800c5fa:	6103      	str	r3, [r0, #16]
 800c5fc:	bd10      	pop	{r4, pc}
 800c5fe:	bf00      	nop
 800c600:	0800dc9b 	.word	0x0800dc9b
 800c604:	0800dd0c 	.word	0x0800dd0c

0800c608 <__multiply>:
 800c608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60c:	4691      	mov	r9, r2
 800c60e:	690a      	ldr	r2, [r1, #16]
 800c610:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c614:	460c      	mov	r4, r1
 800c616:	429a      	cmp	r2, r3
 800c618:	bfbe      	ittt	lt
 800c61a:	460b      	movlt	r3, r1
 800c61c:	464c      	movlt	r4, r9
 800c61e:	4699      	movlt	r9, r3
 800c620:	6927      	ldr	r7, [r4, #16]
 800c622:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c626:	68a3      	ldr	r3, [r4, #8]
 800c628:	6861      	ldr	r1, [r4, #4]
 800c62a:	eb07 060a 	add.w	r6, r7, sl
 800c62e:	42b3      	cmp	r3, r6
 800c630:	b085      	sub	sp, #20
 800c632:	bfb8      	it	lt
 800c634:	3101      	addlt	r1, #1
 800c636:	f7ff fedb 	bl	800c3f0 <_Balloc>
 800c63a:	b930      	cbnz	r0, 800c64a <__multiply+0x42>
 800c63c:	4602      	mov	r2, r0
 800c63e:	f240 115d 	movw	r1, #349	; 0x15d
 800c642:	4b43      	ldr	r3, [pc, #268]	; (800c750 <__multiply+0x148>)
 800c644:	4843      	ldr	r0, [pc, #268]	; (800c754 <__multiply+0x14c>)
 800c646:	f000 ff67 	bl	800d518 <__assert_func>
 800c64a:	f100 0514 	add.w	r5, r0, #20
 800c64e:	462b      	mov	r3, r5
 800c650:	2200      	movs	r2, #0
 800c652:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c656:	4543      	cmp	r3, r8
 800c658:	d321      	bcc.n	800c69e <__multiply+0x96>
 800c65a:	f104 0314 	add.w	r3, r4, #20
 800c65e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c662:	f109 0314 	add.w	r3, r9, #20
 800c666:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c66a:	9202      	str	r2, [sp, #8]
 800c66c:	1b3a      	subs	r2, r7, r4
 800c66e:	3a15      	subs	r2, #21
 800c670:	f022 0203 	bic.w	r2, r2, #3
 800c674:	3204      	adds	r2, #4
 800c676:	f104 0115 	add.w	r1, r4, #21
 800c67a:	428f      	cmp	r7, r1
 800c67c:	bf38      	it	cc
 800c67e:	2204      	movcc	r2, #4
 800c680:	9201      	str	r2, [sp, #4]
 800c682:	9a02      	ldr	r2, [sp, #8]
 800c684:	9303      	str	r3, [sp, #12]
 800c686:	429a      	cmp	r2, r3
 800c688:	d80c      	bhi.n	800c6a4 <__multiply+0x9c>
 800c68a:	2e00      	cmp	r6, #0
 800c68c:	dd03      	ble.n	800c696 <__multiply+0x8e>
 800c68e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c692:	2b00      	cmp	r3, #0
 800c694:	d059      	beq.n	800c74a <__multiply+0x142>
 800c696:	6106      	str	r6, [r0, #16]
 800c698:	b005      	add	sp, #20
 800c69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c69e:	f843 2b04 	str.w	r2, [r3], #4
 800c6a2:	e7d8      	b.n	800c656 <__multiply+0x4e>
 800c6a4:	f8b3 a000 	ldrh.w	sl, [r3]
 800c6a8:	f1ba 0f00 	cmp.w	sl, #0
 800c6ac:	d023      	beq.n	800c6f6 <__multiply+0xee>
 800c6ae:	46a9      	mov	r9, r5
 800c6b0:	f04f 0c00 	mov.w	ip, #0
 800c6b4:	f104 0e14 	add.w	lr, r4, #20
 800c6b8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c6bc:	f8d9 1000 	ldr.w	r1, [r9]
 800c6c0:	fa1f fb82 	uxth.w	fp, r2
 800c6c4:	b289      	uxth	r1, r1
 800c6c6:	fb0a 110b 	mla	r1, sl, fp, r1
 800c6ca:	4461      	add	r1, ip
 800c6cc:	f8d9 c000 	ldr.w	ip, [r9]
 800c6d0:	0c12      	lsrs	r2, r2, #16
 800c6d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c6d6:	fb0a c202 	mla	r2, sl, r2, ip
 800c6da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c6de:	b289      	uxth	r1, r1
 800c6e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c6e4:	4577      	cmp	r7, lr
 800c6e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c6ea:	f849 1b04 	str.w	r1, [r9], #4
 800c6ee:	d8e3      	bhi.n	800c6b8 <__multiply+0xb0>
 800c6f0:	9a01      	ldr	r2, [sp, #4]
 800c6f2:	f845 c002 	str.w	ip, [r5, r2]
 800c6f6:	9a03      	ldr	r2, [sp, #12]
 800c6f8:	3304      	adds	r3, #4
 800c6fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c6fe:	f1b9 0f00 	cmp.w	r9, #0
 800c702:	d020      	beq.n	800c746 <__multiply+0x13e>
 800c704:	46ae      	mov	lr, r5
 800c706:	f04f 0a00 	mov.w	sl, #0
 800c70a:	6829      	ldr	r1, [r5, #0]
 800c70c:	f104 0c14 	add.w	ip, r4, #20
 800c710:	f8bc b000 	ldrh.w	fp, [ip]
 800c714:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c718:	b289      	uxth	r1, r1
 800c71a:	fb09 220b 	mla	r2, r9, fp, r2
 800c71e:	4492      	add	sl, r2
 800c720:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c724:	f84e 1b04 	str.w	r1, [lr], #4
 800c728:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c72c:	f8be 1000 	ldrh.w	r1, [lr]
 800c730:	0c12      	lsrs	r2, r2, #16
 800c732:	fb09 1102 	mla	r1, r9, r2, r1
 800c736:	4567      	cmp	r7, ip
 800c738:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c73c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c740:	d8e6      	bhi.n	800c710 <__multiply+0x108>
 800c742:	9a01      	ldr	r2, [sp, #4]
 800c744:	50a9      	str	r1, [r5, r2]
 800c746:	3504      	adds	r5, #4
 800c748:	e79b      	b.n	800c682 <__multiply+0x7a>
 800c74a:	3e01      	subs	r6, #1
 800c74c:	e79d      	b.n	800c68a <__multiply+0x82>
 800c74e:	bf00      	nop
 800c750:	0800dc9b 	.word	0x0800dc9b
 800c754:	0800dd0c 	.word	0x0800dd0c

0800c758 <__pow5mult>:
 800c758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c75c:	4615      	mov	r5, r2
 800c75e:	f012 0203 	ands.w	r2, r2, #3
 800c762:	4606      	mov	r6, r0
 800c764:	460f      	mov	r7, r1
 800c766:	d007      	beq.n	800c778 <__pow5mult+0x20>
 800c768:	4c25      	ldr	r4, [pc, #148]	; (800c800 <__pow5mult+0xa8>)
 800c76a:	3a01      	subs	r2, #1
 800c76c:	2300      	movs	r3, #0
 800c76e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c772:	f7ff fe9f 	bl	800c4b4 <__multadd>
 800c776:	4607      	mov	r7, r0
 800c778:	10ad      	asrs	r5, r5, #2
 800c77a:	d03d      	beq.n	800c7f8 <__pow5mult+0xa0>
 800c77c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c77e:	b97c      	cbnz	r4, 800c7a0 <__pow5mult+0x48>
 800c780:	2010      	movs	r0, #16
 800c782:	f7ff fe11 	bl	800c3a8 <malloc>
 800c786:	4602      	mov	r2, r0
 800c788:	6270      	str	r0, [r6, #36]	; 0x24
 800c78a:	b928      	cbnz	r0, 800c798 <__pow5mult+0x40>
 800c78c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c790:	4b1c      	ldr	r3, [pc, #112]	; (800c804 <__pow5mult+0xac>)
 800c792:	481d      	ldr	r0, [pc, #116]	; (800c808 <__pow5mult+0xb0>)
 800c794:	f000 fec0 	bl	800d518 <__assert_func>
 800c798:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c79c:	6004      	str	r4, [r0, #0]
 800c79e:	60c4      	str	r4, [r0, #12]
 800c7a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c7a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7a8:	b94c      	cbnz	r4, 800c7be <__pow5mult+0x66>
 800c7aa:	f240 2171 	movw	r1, #625	; 0x271
 800c7ae:	4630      	mov	r0, r6
 800c7b0:	f7ff ff14 	bl	800c5dc <__i2b>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7bc:	6003      	str	r3, [r0, #0]
 800c7be:	f04f 0900 	mov.w	r9, #0
 800c7c2:	07eb      	lsls	r3, r5, #31
 800c7c4:	d50a      	bpl.n	800c7dc <__pow5mult+0x84>
 800c7c6:	4639      	mov	r1, r7
 800c7c8:	4622      	mov	r2, r4
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	f7ff ff1c 	bl	800c608 <__multiply>
 800c7d0:	4680      	mov	r8, r0
 800c7d2:	4639      	mov	r1, r7
 800c7d4:	4630      	mov	r0, r6
 800c7d6:	f7ff fe4b 	bl	800c470 <_Bfree>
 800c7da:	4647      	mov	r7, r8
 800c7dc:	106d      	asrs	r5, r5, #1
 800c7de:	d00b      	beq.n	800c7f8 <__pow5mult+0xa0>
 800c7e0:	6820      	ldr	r0, [r4, #0]
 800c7e2:	b938      	cbnz	r0, 800c7f4 <__pow5mult+0x9c>
 800c7e4:	4622      	mov	r2, r4
 800c7e6:	4621      	mov	r1, r4
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	f7ff ff0d 	bl	800c608 <__multiply>
 800c7ee:	6020      	str	r0, [r4, #0]
 800c7f0:	f8c0 9000 	str.w	r9, [r0]
 800c7f4:	4604      	mov	r4, r0
 800c7f6:	e7e4      	b.n	800c7c2 <__pow5mult+0x6a>
 800c7f8:	4638      	mov	r0, r7
 800c7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7fe:	bf00      	nop
 800c800:	0800de58 	.word	0x0800de58
 800c804:	0800dc29 	.word	0x0800dc29
 800c808:	0800dd0c 	.word	0x0800dd0c

0800c80c <__lshift>:
 800c80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c810:	460c      	mov	r4, r1
 800c812:	4607      	mov	r7, r0
 800c814:	4691      	mov	r9, r2
 800c816:	6923      	ldr	r3, [r4, #16]
 800c818:	6849      	ldr	r1, [r1, #4]
 800c81a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c81e:	68a3      	ldr	r3, [r4, #8]
 800c820:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c824:	f108 0601 	add.w	r6, r8, #1
 800c828:	42b3      	cmp	r3, r6
 800c82a:	db0b      	blt.n	800c844 <__lshift+0x38>
 800c82c:	4638      	mov	r0, r7
 800c82e:	f7ff fddf 	bl	800c3f0 <_Balloc>
 800c832:	4605      	mov	r5, r0
 800c834:	b948      	cbnz	r0, 800c84a <__lshift+0x3e>
 800c836:	4602      	mov	r2, r0
 800c838:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c83c:	4b29      	ldr	r3, [pc, #164]	; (800c8e4 <__lshift+0xd8>)
 800c83e:	482a      	ldr	r0, [pc, #168]	; (800c8e8 <__lshift+0xdc>)
 800c840:	f000 fe6a 	bl	800d518 <__assert_func>
 800c844:	3101      	adds	r1, #1
 800c846:	005b      	lsls	r3, r3, #1
 800c848:	e7ee      	b.n	800c828 <__lshift+0x1c>
 800c84a:	2300      	movs	r3, #0
 800c84c:	f100 0114 	add.w	r1, r0, #20
 800c850:	f100 0210 	add.w	r2, r0, #16
 800c854:	4618      	mov	r0, r3
 800c856:	4553      	cmp	r3, sl
 800c858:	db37      	blt.n	800c8ca <__lshift+0xbe>
 800c85a:	6920      	ldr	r0, [r4, #16]
 800c85c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c860:	f104 0314 	add.w	r3, r4, #20
 800c864:	f019 091f 	ands.w	r9, r9, #31
 800c868:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c86c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c870:	d02f      	beq.n	800c8d2 <__lshift+0xc6>
 800c872:	468a      	mov	sl, r1
 800c874:	f04f 0c00 	mov.w	ip, #0
 800c878:	f1c9 0e20 	rsb	lr, r9, #32
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	fa02 f209 	lsl.w	r2, r2, r9
 800c882:	ea42 020c 	orr.w	r2, r2, ip
 800c886:	f84a 2b04 	str.w	r2, [sl], #4
 800c88a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c88e:	4298      	cmp	r0, r3
 800c890:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c894:	d8f2      	bhi.n	800c87c <__lshift+0x70>
 800c896:	1b03      	subs	r3, r0, r4
 800c898:	3b15      	subs	r3, #21
 800c89a:	f023 0303 	bic.w	r3, r3, #3
 800c89e:	3304      	adds	r3, #4
 800c8a0:	f104 0215 	add.w	r2, r4, #21
 800c8a4:	4290      	cmp	r0, r2
 800c8a6:	bf38      	it	cc
 800c8a8:	2304      	movcc	r3, #4
 800c8aa:	f841 c003 	str.w	ip, [r1, r3]
 800c8ae:	f1bc 0f00 	cmp.w	ip, #0
 800c8b2:	d001      	beq.n	800c8b8 <__lshift+0xac>
 800c8b4:	f108 0602 	add.w	r6, r8, #2
 800c8b8:	3e01      	subs	r6, #1
 800c8ba:	4638      	mov	r0, r7
 800c8bc:	4621      	mov	r1, r4
 800c8be:	612e      	str	r6, [r5, #16]
 800c8c0:	f7ff fdd6 	bl	800c470 <_Bfree>
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	e7c1      	b.n	800c856 <__lshift+0x4a>
 800c8d2:	3904      	subs	r1, #4
 800c8d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8d8:	4298      	cmp	r0, r3
 800c8da:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8de:	d8f9      	bhi.n	800c8d4 <__lshift+0xc8>
 800c8e0:	e7ea      	b.n	800c8b8 <__lshift+0xac>
 800c8e2:	bf00      	nop
 800c8e4:	0800dc9b 	.word	0x0800dc9b
 800c8e8:	0800dd0c 	.word	0x0800dd0c

0800c8ec <__mcmp>:
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	690a      	ldr	r2, [r1, #16]
 800c8f0:	6900      	ldr	r0, [r0, #16]
 800c8f2:	b530      	push	{r4, r5, lr}
 800c8f4:	1a80      	subs	r0, r0, r2
 800c8f6:	d10d      	bne.n	800c914 <__mcmp+0x28>
 800c8f8:	3314      	adds	r3, #20
 800c8fa:	3114      	adds	r1, #20
 800c8fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c900:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c904:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c908:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c90c:	4295      	cmp	r5, r2
 800c90e:	d002      	beq.n	800c916 <__mcmp+0x2a>
 800c910:	d304      	bcc.n	800c91c <__mcmp+0x30>
 800c912:	2001      	movs	r0, #1
 800c914:	bd30      	pop	{r4, r5, pc}
 800c916:	42a3      	cmp	r3, r4
 800c918:	d3f4      	bcc.n	800c904 <__mcmp+0x18>
 800c91a:	e7fb      	b.n	800c914 <__mcmp+0x28>
 800c91c:	f04f 30ff 	mov.w	r0, #4294967295
 800c920:	e7f8      	b.n	800c914 <__mcmp+0x28>
	...

0800c924 <__mdiff>:
 800c924:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c928:	460d      	mov	r5, r1
 800c92a:	4607      	mov	r7, r0
 800c92c:	4611      	mov	r1, r2
 800c92e:	4628      	mov	r0, r5
 800c930:	4614      	mov	r4, r2
 800c932:	f7ff ffdb 	bl	800c8ec <__mcmp>
 800c936:	1e06      	subs	r6, r0, #0
 800c938:	d111      	bne.n	800c95e <__mdiff+0x3a>
 800c93a:	4631      	mov	r1, r6
 800c93c:	4638      	mov	r0, r7
 800c93e:	f7ff fd57 	bl	800c3f0 <_Balloc>
 800c942:	4602      	mov	r2, r0
 800c944:	b928      	cbnz	r0, 800c952 <__mdiff+0x2e>
 800c946:	f240 2132 	movw	r1, #562	; 0x232
 800c94a:	4b3a      	ldr	r3, [pc, #232]	; (800ca34 <__mdiff+0x110>)
 800c94c:	483a      	ldr	r0, [pc, #232]	; (800ca38 <__mdiff+0x114>)
 800c94e:	f000 fde3 	bl	800d518 <__assert_func>
 800c952:	2301      	movs	r3, #1
 800c954:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c958:	4610      	mov	r0, r2
 800c95a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c95e:	bfa4      	itt	ge
 800c960:	4623      	movge	r3, r4
 800c962:	462c      	movge	r4, r5
 800c964:	4638      	mov	r0, r7
 800c966:	6861      	ldr	r1, [r4, #4]
 800c968:	bfa6      	itte	ge
 800c96a:	461d      	movge	r5, r3
 800c96c:	2600      	movge	r6, #0
 800c96e:	2601      	movlt	r6, #1
 800c970:	f7ff fd3e 	bl	800c3f0 <_Balloc>
 800c974:	4602      	mov	r2, r0
 800c976:	b918      	cbnz	r0, 800c980 <__mdiff+0x5c>
 800c978:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c97c:	4b2d      	ldr	r3, [pc, #180]	; (800ca34 <__mdiff+0x110>)
 800c97e:	e7e5      	b.n	800c94c <__mdiff+0x28>
 800c980:	f102 0814 	add.w	r8, r2, #20
 800c984:	46c2      	mov	sl, r8
 800c986:	f04f 0c00 	mov.w	ip, #0
 800c98a:	6927      	ldr	r7, [r4, #16]
 800c98c:	60c6      	str	r6, [r0, #12]
 800c98e:	692e      	ldr	r6, [r5, #16]
 800c990:	f104 0014 	add.w	r0, r4, #20
 800c994:	f105 0914 	add.w	r9, r5, #20
 800c998:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c99c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c9a0:	3410      	adds	r4, #16
 800c9a2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c9a6:	f859 3b04 	ldr.w	r3, [r9], #4
 800c9aa:	fa1f f18b 	uxth.w	r1, fp
 800c9ae:	448c      	add	ip, r1
 800c9b0:	b299      	uxth	r1, r3
 800c9b2:	0c1b      	lsrs	r3, r3, #16
 800c9b4:	ebac 0101 	sub.w	r1, ip, r1
 800c9b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c9bc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c9c0:	b289      	uxth	r1, r1
 800c9c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c9c6:	454e      	cmp	r6, r9
 800c9c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c9cc:	f84a 3b04 	str.w	r3, [sl], #4
 800c9d0:	d8e7      	bhi.n	800c9a2 <__mdiff+0x7e>
 800c9d2:	1b73      	subs	r3, r6, r5
 800c9d4:	3b15      	subs	r3, #21
 800c9d6:	f023 0303 	bic.w	r3, r3, #3
 800c9da:	3515      	adds	r5, #21
 800c9dc:	3304      	adds	r3, #4
 800c9de:	42ae      	cmp	r6, r5
 800c9e0:	bf38      	it	cc
 800c9e2:	2304      	movcc	r3, #4
 800c9e4:	4418      	add	r0, r3
 800c9e6:	4443      	add	r3, r8
 800c9e8:	461e      	mov	r6, r3
 800c9ea:	4605      	mov	r5, r0
 800c9ec:	4575      	cmp	r5, lr
 800c9ee:	d30e      	bcc.n	800ca0e <__mdiff+0xea>
 800c9f0:	f10e 0103 	add.w	r1, lr, #3
 800c9f4:	1a09      	subs	r1, r1, r0
 800c9f6:	f021 0103 	bic.w	r1, r1, #3
 800c9fa:	3803      	subs	r0, #3
 800c9fc:	4586      	cmp	lr, r0
 800c9fe:	bf38      	it	cc
 800ca00:	2100      	movcc	r1, #0
 800ca02:	4419      	add	r1, r3
 800ca04:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ca08:	b18b      	cbz	r3, 800ca2e <__mdiff+0x10a>
 800ca0a:	6117      	str	r7, [r2, #16]
 800ca0c:	e7a4      	b.n	800c958 <__mdiff+0x34>
 800ca0e:	f855 8b04 	ldr.w	r8, [r5], #4
 800ca12:	fa1f f188 	uxth.w	r1, r8
 800ca16:	4461      	add	r1, ip
 800ca18:	140c      	asrs	r4, r1, #16
 800ca1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ca1e:	b289      	uxth	r1, r1
 800ca20:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ca24:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ca28:	f846 1b04 	str.w	r1, [r6], #4
 800ca2c:	e7de      	b.n	800c9ec <__mdiff+0xc8>
 800ca2e:	3f01      	subs	r7, #1
 800ca30:	e7e8      	b.n	800ca04 <__mdiff+0xe0>
 800ca32:	bf00      	nop
 800ca34:	0800dc9b 	.word	0x0800dc9b
 800ca38:	0800dd0c 	.word	0x0800dd0c

0800ca3c <__d2b>:
 800ca3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ca40:	2101      	movs	r1, #1
 800ca42:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ca46:	4690      	mov	r8, r2
 800ca48:	461d      	mov	r5, r3
 800ca4a:	f7ff fcd1 	bl	800c3f0 <_Balloc>
 800ca4e:	4604      	mov	r4, r0
 800ca50:	b930      	cbnz	r0, 800ca60 <__d2b+0x24>
 800ca52:	4602      	mov	r2, r0
 800ca54:	f240 310a 	movw	r1, #778	; 0x30a
 800ca58:	4b24      	ldr	r3, [pc, #144]	; (800caec <__d2b+0xb0>)
 800ca5a:	4825      	ldr	r0, [pc, #148]	; (800caf0 <__d2b+0xb4>)
 800ca5c:	f000 fd5c 	bl	800d518 <__assert_func>
 800ca60:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ca64:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ca68:	bb2d      	cbnz	r5, 800cab6 <__d2b+0x7a>
 800ca6a:	9301      	str	r3, [sp, #4]
 800ca6c:	f1b8 0300 	subs.w	r3, r8, #0
 800ca70:	d026      	beq.n	800cac0 <__d2b+0x84>
 800ca72:	4668      	mov	r0, sp
 800ca74:	9300      	str	r3, [sp, #0]
 800ca76:	f7ff fd83 	bl	800c580 <__lo0bits>
 800ca7a:	9900      	ldr	r1, [sp, #0]
 800ca7c:	b1f0      	cbz	r0, 800cabc <__d2b+0x80>
 800ca7e:	9a01      	ldr	r2, [sp, #4]
 800ca80:	f1c0 0320 	rsb	r3, r0, #32
 800ca84:	fa02 f303 	lsl.w	r3, r2, r3
 800ca88:	430b      	orrs	r3, r1
 800ca8a:	40c2      	lsrs	r2, r0
 800ca8c:	6163      	str	r3, [r4, #20]
 800ca8e:	9201      	str	r2, [sp, #4]
 800ca90:	9b01      	ldr	r3, [sp, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	bf14      	ite	ne
 800ca96:	2102      	movne	r1, #2
 800ca98:	2101      	moveq	r1, #1
 800ca9a:	61a3      	str	r3, [r4, #24]
 800ca9c:	6121      	str	r1, [r4, #16]
 800ca9e:	b1c5      	cbz	r5, 800cad2 <__d2b+0x96>
 800caa0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800caa4:	4405      	add	r5, r0
 800caa6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800caaa:	603d      	str	r5, [r7, #0]
 800caac:	6030      	str	r0, [r6, #0]
 800caae:	4620      	mov	r0, r4
 800cab0:	b002      	add	sp, #8
 800cab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800caba:	e7d6      	b.n	800ca6a <__d2b+0x2e>
 800cabc:	6161      	str	r1, [r4, #20]
 800cabe:	e7e7      	b.n	800ca90 <__d2b+0x54>
 800cac0:	a801      	add	r0, sp, #4
 800cac2:	f7ff fd5d 	bl	800c580 <__lo0bits>
 800cac6:	2101      	movs	r1, #1
 800cac8:	9b01      	ldr	r3, [sp, #4]
 800caca:	6121      	str	r1, [r4, #16]
 800cacc:	6163      	str	r3, [r4, #20]
 800cace:	3020      	adds	r0, #32
 800cad0:	e7e5      	b.n	800ca9e <__d2b+0x62>
 800cad2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800cad6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cada:	6038      	str	r0, [r7, #0]
 800cadc:	6918      	ldr	r0, [r3, #16]
 800cade:	f7ff fd2f 	bl	800c540 <__hi0bits>
 800cae2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800cae6:	6031      	str	r1, [r6, #0]
 800cae8:	e7e1      	b.n	800caae <__d2b+0x72>
 800caea:	bf00      	nop
 800caec:	0800dc9b 	.word	0x0800dc9b
 800caf0:	0800dd0c 	.word	0x0800dd0c

0800caf4 <_calloc_r>:
 800caf4:	b570      	push	{r4, r5, r6, lr}
 800caf6:	fba1 5402 	umull	r5, r4, r1, r2
 800cafa:	b934      	cbnz	r4, 800cb0a <_calloc_r+0x16>
 800cafc:	4629      	mov	r1, r5
 800cafe:	f000 f875 	bl	800cbec <_malloc_r>
 800cb02:	4606      	mov	r6, r0
 800cb04:	b928      	cbnz	r0, 800cb12 <_calloc_r+0x1e>
 800cb06:	4630      	mov	r0, r6
 800cb08:	bd70      	pop	{r4, r5, r6, pc}
 800cb0a:	220c      	movs	r2, #12
 800cb0c:	2600      	movs	r6, #0
 800cb0e:	6002      	str	r2, [r0, #0]
 800cb10:	e7f9      	b.n	800cb06 <_calloc_r+0x12>
 800cb12:	462a      	mov	r2, r5
 800cb14:	4621      	mov	r1, r4
 800cb16:	f7fe f81b 	bl	800ab50 <memset>
 800cb1a:	e7f4      	b.n	800cb06 <_calloc_r+0x12>

0800cb1c <_free_r>:
 800cb1c:	b538      	push	{r3, r4, r5, lr}
 800cb1e:	4605      	mov	r5, r0
 800cb20:	2900      	cmp	r1, #0
 800cb22:	d040      	beq.n	800cba6 <_free_r+0x8a>
 800cb24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb28:	1f0c      	subs	r4, r1, #4
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	bfb8      	it	lt
 800cb2e:	18e4      	addlt	r4, r4, r3
 800cb30:	f000 fe94 	bl	800d85c <__malloc_lock>
 800cb34:	4a1c      	ldr	r2, [pc, #112]	; (800cba8 <_free_r+0x8c>)
 800cb36:	6813      	ldr	r3, [r2, #0]
 800cb38:	b933      	cbnz	r3, 800cb48 <_free_r+0x2c>
 800cb3a:	6063      	str	r3, [r4, #4]
 800cb3c:	6014      	str	r4, [r2, #0]
 800cb3e:	4628      	mov	r0, r5
 800cb40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb44:	f000 be90 	b.w	800d868 <__malloc_unlock>
 800cb48:	42a3      	cmp	r3, r4
 800cb4a:	d908      	bls.n	800cb5e <_free_r+0x42>
 800cb4c:	6820      	ldr	r0, [r4, #0]
 800cb4e:	1821      	adds	r1, r4, r0
 800cb50:	428b      	cmp	r3, r1
 800cb52:	bf01      	itttt	eq
 800cb54:	6819      	ldreq	r1, [r3, #0]
 800cb56:	685b      	ldreq	r3, [r3, #4]
 800cb58:	1809      	addeq	r1, r1, r0
 800cb5a:	6021      	streq	r1, [r4, #0]
 800cb5c:	e7ed      	b.n	800cb3a <_free_r+0x1e>
 800cb5e:	461a      	mov	r2, r3
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	b10b      	cbz	r3, 800cb68 <_free_r+0x4c>
 800cb64:	42a3      	cmp	r3, r4
 800cb66:	d9fa      	bls.n	800cb5e <_free_r+0x42>
 800cb68:	6811      	ldr	r1, [r2, #0]
 800cb6a:	1850      	adds	r0, r2, r1
 800cb6c:	42a0      	cmp	r0, r4
 800cb6e:	d10b      	bne.n	800cb88 <_free_r+0x6c>
 800cb70:	6820      	ldr	r0, [r4, #0]
 800cb72:	4401      	add	r1, r0
 800cb74:	1850      	adds	r0, r2, r1
 800cb76:	4283      	cmp	r3, r0
 800cb78:	6011      	str	r1, [r2, #0]
 800cb7a:	d1e0      	bne.n	800cb3e <_free_r+0x22>
 800cb7c:	6818      	ldr	r0, [r3, #0]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	4401      	add	r1, r0
 800cb82:	6011      	str	r1, [r2, #0]
 800cb84:	6053      	str	r3, [r2, #4]
 800cb86:	e7da      	b.n	800cb3e <_free_r+0x22>
 800cb88:	d902      	bls.n	800cb90 <_free_r+0x74>
 800cb8a:	230c      	movs	r3, #12
 800cb8c:	602b      	str	r3, [r5, #0]
 800cb8e:	e7d6      	b.n	800cb3e <_free_r+0x22>
 800cb90:	6820      	ldr	r0, [r4, #0]
 800cb92:	1821      	adds	r1, r4, r0
 800cb94:	428b      	cmp	r3, r1
 800cb96:	bf01      	itttt	eq
 800cb98:	6819      	ldreq	r1, [r3, #0]
 800cb9a:	685b      	ldreq	r3, [r3, #4]
 800cb9c:	1809      	addeq	r1, r1, r0
 800cb9e:	6021      	streq	r1, [r4, #0]
 800cba0:	6063      	str	r3, [r4, #4]
 800cba2:	6054      	str	r4, [r2, #4]
 800cba4:	e7cb      	b.n	800cb3e <_free_r+0x22>
 800cba6:	bd38      	pop	{r3, r4, r5, pc}
 800cba8:	2000165c 	.word	0x2000165c

0800cbac <sbrk_aligned>:
 800cbac:	b570      	push	{r4, r5, r6, lr}
 800cbae:	4e0e      	ldr	r6, [pc, #56]	; (800cbe8 <sbrk_aligned+0x3c>)
 800cbb0:	460c      	mov	r4, r1
 800cbb2:	6831      	ldr	r1, [r6, #0]
 800cbb4:	4605      	mov	r5, r0
 800cbb6:	b911      	cbnz	r1, 800cbbe <sbrk_aligned+0x12>
 800cbb8:	f000 fb88 	bl	800d2cc <_sbrk_r>
 800cbbc:	6030      	str	r0, [r6, #0]
 800cbbe:	4621      	mov	r1, r4
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	f000 fb83 	bl	800d2cc <_sbrk_r>
 800cbc6:	1c43      	adds	r3, r0, #1
 800cbc8:	d00a      	beq.n	800cbe0 <sbrk_aligned+0x34>
 800cbca:	1cc4      	adds	r4, r0, #3
 800cbcc:	f024 0403 	bic.w	r4, r4, #3
 800cbd0:	42a0      	cmp	r0, r4
 800cbd2:	d007      	beq.n	800cbe4 <sbrk_aligned+0x38>
 800cbd4:	1a21      	subs	r1, r4, r0
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	f000 fb78 	bl	800d2cc <_sbrk_r>
 800cbdc:	3001      	adds	r0, #1
 800cbde:	d101      	bne.n	800cbe4 <sbrk_aligned+0x38>
 800cbe0:	f04f 34ff 	mov.w	r4, #4294967295
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	bd70      	pop	{r4, r5, r6, pc}
 800cbe8:	20001660 	.word	0x20001660

0800cbec <_malloc_r>:
 800cbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbf0:	1ccd      	adds	r5, r1, #3
 800cbf2:	f025 0503 	bic.w	r5, r5, #3
 800cbf6:	3508      	adds	r5, #8
 800cbf8:	2d0c      	cmp	r5, #12
 800cbfa:	bf38      	it	cc
 800cbfc:	250c      	movcc	r5, #12
 800cbfe:	2d00      	cmp	r5, #0
 800cc00:	4607      	mov	r7, r0
 800cc02:	db01      	blt.n	800cc08 <_malloc_r+0x1c>
 800cc04:	42a9      	cmp	r1, r5
 800cc06:	d905      	bls.n	800cc14 <_malloc_r+0x28>
 800cc08:	230c      	movs	r3, #12
 800cc0a:	2600      	movs	r6, #0
 800cc0c:	603b      	str	r3, [r7, #0]
 800cc0e:	4630      	mov	r0, r6
 800cc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc14:	4e2e      	ldr	r6, [pc, #184]	; (800ccd0 <_malloc_r+0xe4>)
 800cc16:	f000 fe21 	bl	800d85c <__malloc_lock>
 800cc1a:	6833      	ldr	r3, [r6, #0]
 800cc1c:	461c      	mov	r4, r3
 800cc1e:	bb34      	cbnz	r4, 800cc6e <_malloc_r+0x82>
 800cc20:	4629      	mov	r1, r5
 800cc22:	4638      	mov	r0, r7
 800cc24:	f7ff ffc2 	bl	800cbac <sbrk_aligned>
 800cc28:	1c43      	adds	r3, r0, #1
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	d14d      	bne.n	800ccca <_malloc_r+0xde>
 800cc2e:	6834      	ldr	r4, [r6, #0]
 800cc30:	4626      	mov	r6, r4
 800cc32:	2e00      	cmp	r6, #0
 800cc34:	d140      	bne.n	800ccb8 <_malloc_r+0xcc>
 800cc36:	6823      	ldr	r3, [r4, #0]
 800cc38:	4631      	mov	r1, r6
 800cc3a:	4638      	mov	r0, r7
 800cc3c:	eb04 0803 	add.w	r8, r4, r3
 800cc40:	f000 fb44 	bl	800d2cc <_sbrk_r>
 800cc44:	4580      	cmp	r8, r0
 800cc46:	d13a      	bne.n	800ccbe <_malloc_r+0xd2>
 800cc48:	6821      	ldr	r1, [r4, #0]
 800cc4a:	3503      	adds	r5, #3
 800cc4c:	1a6d      	subs	r5, r5, r1
 800cc4e:	f025 0503 	bic.w	r5, r5, #3
 800cc52:	3508      	adds	r5, #8
 800cc54:	2d0c      	cmp	r5, #12
 800cc56:	bf38      	it	cc
 800cc58:	250c      	movcc	r5, #12
 800cc5a:	4638      	mov	r0, r7
 800cc5c:	4629      	mov	r1, r5
 800cc5e:	f7ff ffa5 	bl	800cbac <sbrk_aligned>
 800cc62:	3001      	adds	r0, #1
 800cc64:	d02b      	beq.n	800ccbe <_malloc_r+0xd2>
 800cc66:	6823      	ldr	r3, [r4, #0]
 800cc68:	442b      	add	r3, r5
 800cc6a:	6023      	str	r3, [r4, #0]
 800cc6c:	e00e      	b.n	800cc8c <_malloc_r+0xa0>
 800cc6e:	6822      	ldr	r2, [r4, #0]
 800cc70:	1b52      	subs	r2, r2, r5
 800cc72:	d41e      	bmi.n	800ccb2 <_malloc_r+0xc6>
 800cc74:	2a0b      	cmp	r2, #11
 800cc76:	d916      	bls.n	800cca6 <_malloc_r+0xba>
 800cc78:	1961      	adds	r1, r4, r5
 800cc7a:	42a3      	cmp	r3, r4
 800cc7c:	6025      	str	r5, [r4, #0]
 800cc7e:	bf18      	it	ne
 800cc80:	6059      	strne	r1, [r3, #4]
 800cc82:	6863      	ldr	r3, [r4, #4]
 800cc84:	bf08      	it	eq
 800cc86:	6031      	streq	r1, [r6, #0]
 800cc88:	5162      	str	r2, [r4, r5]
 800cc8a:	604b      	str	r3, [r1, #4]
 800cc8c:	4638      	mov	r0, r7
 800cc8e:	f104 060b 	add.w	r6, r4, #11
 800cc92:	f000 fde9 	bl	800d868 <__malloc_unlock>
 800cc96:	f026 0607 	bic.w	r6, r6, #7
 800cc9a:	1d23      	adds	r3, r4, #4
 800cc9c:	1af2      	subs	r2, r6, r3
 800cc9e:	d0b6      	beq.n	800cc0e <_malloc_r+0x22>
 800cca0:	1b9b      	subs	r3, r3, r6
 800cca2:	50a3      	str	r3, [r4, r2]
 800cca4:	e7b3      	b.n	800cc0e <_malloc_r+0x22>
 800cca6:	6862      	ldr	r2, [r4, #4]
 800cca8:	42a3      	cmp	r3, r4
 800ccaa:	bf0c      	ite	eq
 800ccac:	6032      	streq	r2, [r6, #0]
 800ccae:	605a      	strne	r2, [r3, #4]
 800ccb0:	e7ec      	b.n	800cc8c <_malloc_r+0xa0>
 800ccb2:	4623      	mov	r3, r4
 800ccb4:	6864      	ldr	r4, [r4, #4]
 800ccb6:	e7b2      	b.n	800cc1e <_malloc_r+0x32>
 800ccb8:	4634      	mov	r4, r6
 800ccba:	6876      	ldr	r6, [r6, #4]
 800ccbc:	e7b9      	b.n	800cc32 <_malloc_r+0x46>
 800ccbe:	230c      	movs	r3, #12
 800ccc0:	4638      	mov	r0, r7
 800ccc2:	603b      	str	r3, [r7, #0]
 800ccc4:	f000 fdd0 	bl	800d868 <__malloc_unlock>
 800ccc8:	e7a1      	b.n	800cc0e <_malloc_r+0x22>
 800ccca:	6025      	str	r5, [r4, #0]
 800cccc:	e7de      	b.n	800cc8c <_malloc_r+0xa0>
 800ccce:	bf00      	nop
 800ccd0:	2000165c 	.word	0x2000165c

0800ccd4 <__ssputs_r>:
 800ccd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccd8:	688e      	ldr	r6, [r1, #8]
 800ccda:	4682      	mov	sl, r0
 800ccdc:	429e      	cmp	r6, r3
 800ccde:	460c      	mov	r4, r1
 800cce0:	4690      	mov	r8, r2
 800cce2:	461f      	mov	r7, r3
 800cce4:	d838      	bhi.n	800cd58 <__ssputs_r+0x84>
 800cce6:	898a      	ldrh	r2, [r1, #12]
 800cce8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ccec:	d032      	beq.n	800cd54 <__ssputs_r+0x80>
 800ccee:	6825      	ldr	r5, [r4, #0]
 800ccf0:	6909      	ldr	r1, [r1, #16]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	eba5 0901 	sub.w	r9, r5, r1
 800ccf8:	6965      	ldr	r5, [r4, #20]
 800ccfa:	444b      	add	r3, r9
 800ccfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd04:	106d      	asrs	r5, r5, #1
 800cd06:	429d      	cmp	r5, r3
 800cd08:	bf38      	it	cc
 800cd0a:	461d      	movcc	r5, r3
 800cd0c:	0553      	lsls	r3, r2, #21
 800cd0e:	d531      	bpl.n	800cd74 <__ssputs_r+0xa0>
 800cd10:	4629      	mov	r1, r5
 800cd12:	f7ff ff6b 	bl	800cbec <_malloc_r>
 800cd16:	4606      	mov	r6, r0
 800cd18:	b950      	cbnz	r0, 800cd30 <__ssputs_r+0x5c>
 800cd1a:	230c      	movs	r3, #12
 800cd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd20:	f8ca 3000 	str.w	r3, [sl]
 800cd24:	89a3      	ldrh	r3, [r4, #12]
 800cd26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd2a:	81a3      	strh	r3, [r4, #12]
 800cd2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd30:	464a      	mov	r2, r9
 800cd32:	6921      	ldr	r1, [r4, #16]
 800cd34:	f7ff fb4e 	bl	800c3d4 <memcpy>
 800cd38:	89a3      	ldrh	r3, [r4, #12]
 800cd3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd42:	81a3      	strh	r3, [r4, #12]
 800cd44:	6126      	str	r6, [r4, #16]
 800cd46:	444e      	add	r6, r9
 800cd48:	6026      	str	r6, [r4, #0]
 800cd4a:	463e      	mov	r6, r7
 800cd4c:	6165      	str	r5, [r4, #20]
 800cd4e:	eba5 0509 	sub.w	r5, r5, r9
 800cd52:	60a5      	str	r5, [r4, #8]
 800cd54:	42be      	cmp	r6, r7
 800cd56:	d900      	bls.n	800cd5a <__ssputs_r+0x86>
 800cd58:	463e      	mov	r6, r7
 800cd5a:	4632      	mov	r2, r6
 800cd5c:	4641      	mov	r1, r8
 800cd5e:	6820      	ldr	r0, [r4, #0]
 800cd60:	f000 fd62 	bl	800d828 <memmove>
 800cd64:	68a3      	ldr	r3, [r4, #8]
 800cd66:	2000      	movs	r0, #0
 800cd68:	1b9b      	subs	r3, r3, r6
 800cd6a:	60a3      	str	r3, [r4, #8]
 800cd6c:	6823      	ldr	r3, [r4, #0]
 800cd6e:	4433      	add	r3, r6
 800cd70:	6023      	str	r3, [r4, #0]
 800cd72:	e7db      	b.n	800cd2c <__ssputs_r+0x58>
 800cd74:	462a      	mov	r2, r5
 800cd76:	f000 fd7d 	bl	800d874 <_realloc_r>
 800cd7a:	4606      	mov	r6, r0
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	d1e1      	bne.n	800cd44 <__ssputs_r+0x70>
 800cd80:	4650      	mov	r0, sl
 800cd82:	6921      	ldr	r1, [r4, #16]
 800cd84:	f7ff feca 	bl	800cb1c <_free_r>
 800cd88:	e7c7      	b.n	800cd1a <__ssputs_r+0x46>
	...

0800cd8c <_svfiprintf_r>:
 800cd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd90:	4698      	mov	r8, r3
 800cd92:	898b      	ldrh	r3, [r1, #12]
 800cd94:	4607      	mov	r7, r0
 800cd96:	061b      	lsls	r3, r3, #24
 800cd98:	460d      	mov	r5, r1
 800cd9a:	4614      	mov	r4, r2
 800cd9c:	b09d      	sub	sp, #116	; 0x74
 800cd9e:	d50e      	bpl.n	800cdbe <_svfiprintf_r+0x32>
 800cda0:	690b      	ldr	r3, [r1, #16]
 800cda2:	b963      	cbnz	r3, 800cdbe <_svfiprintf_r+0x32>
 800cda4:	2140      	movs	r1, #64	; 0x40
 800cda6:	f7ff ff21 	bl	800cbec <_malloc_r>
 800cdaa:	6028      	str	r0, [r5, #0]
 800cdac:	6128      	str	r0, [r5, #16]
 800cdae:	b920      	cbnz	r0, 800cdba <_svfiprintf_r+0x2e>
 800cdb0:	230c      	movs	r3, #12
 800cdb2:	603b      	str	r3, [r7, #0]
 800cdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb8:	e0d1      	b.n	800cf5e <_svfiprintf_r+0x1d2>
 800cdba:	2340      	movs	r3, #64	; 0x40
 800cdbc:	616b      	str	r3, [r5, #20]
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	9309      	str	r3, [sp, #36]	; 0x24
 800cdc2:	2320      	movs	r3, #32
 800cdc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cdc8:	2330      	movs	r3, #48	; 0x30
 800cdca:	f04f 0901 	mov.w	r9, #1
 800cdce:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cf78 <_svfiprintf_r+0x1ec>
 800cdd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cdda:	4623      	mov	r3, r4
 800cddc:	469a      	mov	sl, r3
 800cdde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cde2:	b10a      	cbz	r2, 800cde8 <_svfiprintf_r+0x5c>
 800cde4:	2a25      	cmp	r2, #37	; 0x25
 800cde6:	d1f9      	bne.n	800cddc <_svfiprintf_r+0x50>
 800cde8:	ebba 0b04 	subs.w	fp, sl, r4
 800cdec:	d00b      	beq.n	800ce06 <_svfiprintf_r+0x7a>
 800cdee:	465b      	mov	r3, fp
 800cdf0:	4622      	mov	r2, r4
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	4638      	mov	r0, r7
 800cdf6:	f7ff ff6d 	bl	800ccd4 <__ssputs_r>
 800cdfa:	3001      	adds	r0, #1
 800cdfc:	f000 80aa 	beq.w	800cf54 <_svfiprintf_r+0x1c8>
 800ce00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce02:	445a      	add	r2, fp
 800ce04:	9209      	str	r2, [sp, #36]	; 0x24
 800ce06:	f89a 3000 	ldrb.w	r3, [sl]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	f000 80a2 	beq.w	800cf54 <_svfiprintf_r+0x1c8>
 800ce10:	2300      	movs	r3, #0
 800ce12:	f04f 32ff 	mov.w	r2, #4294967295
 800ce16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce1a:	f10a 0a01 	add.w	sl, sl, #1
 800ce1e:	9304      	str	r3, [sp, #16]
 800ce20:	9307      	str	r3, [sp, #28]
 800ce22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce26:	931a      	str	r3, [sp, #104]	; 0x68
 800ce28:	4654      	mov	r4, sl
 800ce2a:	2205      	movs	r2, #5
 800ce2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce30:	4851      	ldr	r0, [pc, #324]	; (800cf78 <_svfiprintf_r+0x1ec>)
 800ce32:	f7ff fac1 	bl	800c3b8 <memchr>
 800ce36:	9a04      	ldr	r2, [sp, #16]
 800ce38:	b9d8      	cbnz	r0, 800ce72 <_svfiprintf_r+0xe6>
 800ce3a:	06d0      	lsls	r0, r2, #27
 800ce3c:	bf44      	itt	mi
 800ce3e:	2320      	movmi	r3, #32
 800ce40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce44:	0711      	lsls	r1, r2, #28
 800ce46:	bf44      	itt	mi
 800ce48:	232b      	movmi	r3, #43	; 0x2b
 800ce4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ce52:	2b2a      	cmp	r3, #42	; 0x2a
 800ce54:	d015      	beq.n	800ce82 <_svfiprintf_r+0xf6>
 800ce56:	4654      	mov	r4, sl
 800ce58:	2000      	movs	r0, #0
 800ce5a:	f04f 0c0a 	mov.w	ip, #10
 800ce5e:	9a07      	ldr	r2, [sp, #28]
 800ce60:	4621      	mov	r1, r4
 800ce62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce66:	3b30      	subs	r3, #48	; 0x30
 800ce68:	2b09      	cmp	r3, #9
 800ce6a:	d94e      	bls.n	800cf0a <_svfiprintf_r+0x17e>
 800ce6c:	b1b0      	cbz	r0, 800ce9c <_svfiprintf_r+0x110>
 800ce6e:	9207      	str	r2, [sp, #28]
 800ce70:	e014      	b.n	800ce9c <_svfiprintf_r+0x110>
 800ce72:	eba0 0308 	sub.w	r3, r0, r8
 800ce76:	fa09 f303 	lsl.w	r3, r9, r3
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	46a2      	mov	sl, r4
 800ce7e:	9304      	str	r3, [sp, #16]
 800ce80:	e7d2      	b.n	800ce28 <_svfiprintf_r+0x9c>
 800ce82:	9b03      	ldr	r3, [sp, #12]
 800ce84:	1d19      	adds	r1, r3, #4
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	9103      	str	r1, [sp, #12]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	bfbb      	ittet	lt
 800ce8e:	425b      	neglt	r3, r3
 800ce90:	f042 0202 	orrlt.w	r2, r2, #2
 800ce94:	9307      	strge	r3, [sp, #28]
 800ce96:	9307      	strlt	r3, [sp, #28]
 800ce98:	bfb8      	it	lt
 800ce9a:	9204      	strlt	r2, [sp, #16]
 800ce9c:	7823      	ldrb	r3, [r4, #0]
 800ce9e:	2b2e      	cmp	r3, #46	; 0x2e
 800cea0:	d10c      	bne.n	800cebc <_svfiprintf_r+0x130>
 800cea2:	7863      	ldrb	r3, [r4, #1]
 800cea4:	2b2a      	cmp	r3, #42	; 0x2a
 800cea6:	d135      	bne.n	800cf14 <_svfiprintf_r+0x188>
 800cea8:	9b03      	ldr	r3, [sp, #12]
 800ceaa:	3402      	adds	r4, #2
 800ceac:	1d1a      	adds	r2, r3, #4
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	9203      	str	r2, [sp, #12]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	bfb8      	it	lt
 800ceb6:	f04f 33ff 	movlt.w	r3, #4294967295
 800ceba:	9305      	str	r3, [sp, #20]
 800cebc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800cf7c <_svfiprintf_r+0x1f0>
 800cec0:	2203      	movs	r2, #3
 800cec2:	4650      	mov	r0, sl
 800cec4:	7821      	ldrb	r1, [r4, #0]
 800cec6:	f7ff fa77 	bl	800c3b8 <memchr>
 800ceca:	b140      	cbz	r0, 800cede <_svfiprintf_r+0x152>
 800cecc:	2340      	movs	r3, #64	; 0x40
 800cece:	eba0 000a 	sub.w	r0, r0, sl
 800ced2:	fa03 f000 	lsl.w	r0, r3, r0
 800ced6:	9b04      	ldr	r3, [sp, #16]
 800ced8:	3401      	adds	r4, #1
 800ceda:	4303      	orrs	r3, r0
 800cedc:	9304      	str	r3, [sp, #16]
 800cede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cee2:	2206      	movs	r2, #6
 800cee4:	4826      	ldr	r0, [pc, #152]	; (800cf80 <_svfiprintf_r+0x1f4>)
 800cee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ceea:	f7ff fa65 	bl	800c3b8 <memchr>
 800ceee:	2800      	cmp	r0, #0
 800cef0:	d038      	beq.n	800cf64 <_svfiprintf_r+0x1d8>
 800cef2:	4b24      	ldr	r3, [pc, #144]	; (800cf84 <_svfiprintf_r+0x1f8>)
 800cef4:	bb1b      	cbnz	r3, 800cf3e <_svfiprintf_r+0x1b2>
 800cef6:	9b03      	ldr	r3, [sp, #12]
 800cef8:	3307      	adds	r3, #7
 800cefa:	f023 0307 	bic.w	r3, r3, #7
 800cefe:	3308      	adds	r3, #8
 800cf00:	9303      	str	r3, [sp, #12]
 800cf02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf04:	4433      	add	r3, r6
 800cf06:	9309      	str	r3, [sp, #36]	; 0x24
 800cf08:	e767      	b.n	800cdda <_svfiprintf_r+0x4e>
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	2001      	movs	r0, #1
 800cf0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf12:	e7a5      	b.n	800ce60 <_svfiprintf_r+0xd4>
 800cf14:	2300      	movs	r3, #0
 800cf16:	f04f 0c0a 	mov.w	ip, #10
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	3401      	adds	r4, #1
 800cf1e:	9305      	str	r3, [sp, #20]
 800cf20:	4620      	mov	r0, r4
 800cf22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf26:	3a30      	subs	r2, #48	; 0x30
 800cf28:	2a09      	cmp	r2, #9
 800cf2a:	d903      	bls.n	800cf34 <_svfiprintf_r+0x1a8>
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d0c5      	beq.n	800cebc <_svfiprintf_r+0x130>
 800cf30:	9105      	str	r1, [sp, #20]
 800cf32:	e7c3      	b.n	800cebc <_svfiprintf_r+0x130>
 800cf34:	4604      	mov	r4, r0
 800cf36:	2301      	movs	r3, #1
 800cf38:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf3c:	e7f0      	b.n	800cf20 <_svfiprintf_r+0x194>
 800cf3e:	ab03      	add	r3, sp, #12
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	462a      	mov	r2, r5
 800cf44:	4638      	mov	r0, r7
 800cf46:	4b10      	ldr	r3, [pc, #64]	; (800cf88 <_svfiprintf_r+0x1fc>)
 800cf48:	a904      	add	r1, sp, #16
 800cf4a:	f7fd fea7 	bl	800ac9c <_printf_float>
 800cf4e:	1c42      	adds	r2, r0, #1
 800cf50:	4606      	mov	r6, r0
 800cf52:	d1d6      	bne.n	800cf02 <_svfiprintf_r+0x176>
 800cf54:	89ab      	ldrh	r3, [r5, #12]
 800cf56:	065b      	lsls	r3, r3, #25
 800cf58:	f53f af2c 	bmi.w	800cdb4 <_svfiprintf_r+0x28>
 800cf5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf5e:	b01d      	add	sp, #116	; 0x74
 800cf60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf64:	ab03      	add	r3, sp, #12
 800cf66:	9300      	str	r3, [sp, #0]
 800cf68:	462a      	mov	r2, r5
 800cf6a:	4638      	mov	r0, r7
 800cf6c:	4b06      	ldr	r3, [pc, #24]	; (800cf88 <_svfiprintf_r+0x1fc>)
 800cf6e:	a904      	add	r1, sp, #16
 800cf70:	f7fe f930 	bl	800b1d4 <_printf_i>
 800cf74:	e7eb      	b.n	800cf4e <_svfiprintf_r+0x1c2>
 800cf76:	bf00      	nop
 800cf78:	0800de64 	.word	0x0800de64
 800cf7c:	0800de6a 	.word	0x0800de6a
 800cf80:	0800de6e 	.word	0x0800de6e
 800cf84:	0800ac9d 	.word	0x0800ac9d
 800cf88:	0800ccd5 	.word	0x0800ccd5

0800cf8c <__sfputc_r>:
 800cf8c:	6893      	ldr	r3, [r2, #8]
 800cf8e:	b410      	push	{r4}
 800cf90:	3b01      	subs	r3, #1
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	6093      	str	r3, [r2, #8]
 800cf96:	da07      	bge.n	800cfa8 <__sfputc_r+0x1c>
 800cf98:	6994      	ldr	r4, [r2, #24]
 800cf9a:	42a3      	cmp	r3, r4
 800cf9c:	db01      	blt.n	800cfa2 <__sfputc_r+0x16>
 800cf9e:	290a      	cmp	r1, #10
 800cfa0:	d102      	bne.n	800cfa8 <__sfputc_r+0x1c>
 800cfa2:	bc10      	pop	{r4}
 800cfa4:	f000 b9e6 	b.w	800d374 <__swbuf_r>
 800cfa8:	6813      	ldr	r3, [r2, #0]
 800cfaa:	1c58      	adds	r0, r3, #1
 800cfac:	6010      	str	r0, [r2, #0]
 800cfae:	7019      	strb	r1, [r3, #0]
 800cfb0:	4608      	mov	r0, r1
 800cfb2:	bc10      	pop	{r4}
 800cfb4:	4770      	bx	lr

0800cfb6 <__sfputs_r>:
 800cfb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfb8:	4606      	mov	r6, r0
 800cfba:	460f      	mov	r7, r1
 800cfbc:	4614      	mov	r4, r2
 800cfbe:	18d5      	adds	r5, r2, r3
 800cfc0:	42ac      	cmp	r4, r5
 800cfc2:	d101      	bne.n	800cfc8 <__sfputs_r+0x12>
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	e007      	b.n	800cfd8 <__sfputs_r+0x22>
 800cfc8:	463a      	mov	r2, r7
 800cfca:	4630      	mov	r0, r6
 800cfcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfd0:	f7ff ffdc 	bl	800cf8c <__sfputc_r>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	d1f3      	bne.n	800cfc0 <__sfputs_r+0xa>
 800cfd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfdc <_vfiprintf_r>:
 800cfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe0:	460d      	mov	r5, r1
 800cfe2:	4614      	mov	r4, r2
 800cfe4:	4698      	mov	r8, r3
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	b09d      	sub	sp, #116	; 0x74
 800cfea:	b118      	cbz	r0, 800cff4 <_vfiprintf_r+0x18>
 800cfec:	6983      	ldr	r3, [r0, #24]
 800cfee:	b90b      	cbnz	r3, 800cff4 <_vfiprintf_r+0x18>
 800cff0:	f7ff f934 	bl	800c25c <__sinit>
 800cff4:	4b89      	ldr	r3, [pc, #548]	; (800d21c <_vfiprintf_r+0x240>)
 800cff6:	429d      	cmp	r5, r3
 800cff8:	d11b      	bne.n	800d032 <_vfiprintf_r+0x56>
 800cffa:	6875      	ldr	r5, [r6, #4]
 800cffc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cffe:	07d9      	lsls	r1, r3, #31
 800d000:	d405      	bmi.n	800d00e <_vfiprintf_r+0x32>
 800d002:	89ab      	ldrh	r3, [r5, #12]
 800d004:	059a      	lsls	r2, r3, #22
 800d006:	d402      	bmi.n	800d00e <_vfiprintf_r+0x32>
 800d008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d00a:	f7ff f9ca 	bl	800c3a2 <__retarget_lock_acquire_recursive>
 800d00e:	89ab      	ldrh	r3, [r5, #12]
 800d010:	071b      	lsls	r3, r3, #28
 800d012:	d501      	bpl.n	800d018 <_vfiprintf_r+0x3c>
 800d014:	692b      	ldr	r3, [r5, #16]
 800d016:	b9eb      	cbnz	r3, 800d054 <_vfiprintf_r+0x78>
 800d018:	4629      	mov	r1, r5
 800d01a:	4630      	mov	r0, r6
 800d01c:	f000 fa0e 	bl	800d43c <__swsetup_r>
 800d020:	b1c0      	cbz	r0, 800d054 <_vfiprintf_r+0x78>
 800d022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d024:	07dc      	lsls	r4, r3, #31
 800d026:	d50e      	bpl.n	800d046 <_vfiprintf_r+0x6a>
 800d028:	f04f 30ff 	mov.w	r0, #4294967295
 800d02c:	b01d      	add	sp, #116	; 0x74
 800d02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d032:	4b7b      	ldr	r3, [pc, #492]	; (800d220 <_vfiprintf_r+0x244>)
 800d034:	429d      	cmp	r5, r3
 800d036:	d101      	bne.n	800d03c <_vfiprintf_r+0x60>
 800d038:	68b5      	ldr	r5, [r6, #8]
 800d03a:	e7df      	b.n	800cffc <_vfiprintf_r+0x20>
 800d03c:	4b79      	ldr	r3, [pc, #484]	; (800d224 <_vfiprintf_r+0x248>)
 800d03e:	429d      	cmp	r5, r3
 800d040:	bf08      	it	eq
 800d042:	68f5      	ldreq	r5, [r6, #12]
 800d044:	e7da      	b.n	800cffc <_vfiprintf_r+0x20>
 800d046:	89ab      	ldrh	r3, [r5, #12]
 800d048:	0598      	lsls	r0, r3, #22
 800d04a:	d4ed      	bmi.n	800d028 <_vfiprintf_r+0x4c>
 800d04c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d04e:	f7ff f9a9 	bl	800c3a4 <__retarget_lock_release_recursive>
 800d052:	e7e9      	b.n	800d028 <_vfiprintf_r+0x4c>
 800d054:	2300      	movs	r3, #0
 800d056:	9309      	str	r3, [sp, #36]	; 0x24
 800d058:	2320      	movs	r3, #32
 800d05a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d05e:	2330      	movs	r3, #48	; 0x30
 800d060:	f04f 0901 	mov.w	r9, #1
 800d064:	f8cd 800c 	str.w	r8, [sp, #12]
 800d068:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d228 <_vfiprintf_r+0x24c>
 800d06c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d070:	4623      	mov	r3, r4
 800d072:	469a      	mov	sl, r3
 800d074:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d078:	b10a      	cbz	r2, 800d07e <_vfiprintf_r+0xa2>
 800d07a:	2a25      	cmp	r2, #37	; 0x25
 800d07c:	d1f9      	bne.n	800d072 <_vfiprintf_r+0x96>
 800d07e:	ebba 0b04 	subs.w	fp, sl, r4
 800d082:	d00b      	beq.n	800d09c <_vfiprintf_r+0xc0>
 800d084:	465b      	mov	r3, fp
 800d086:	4622      	mov	r2, r4
 800d088:	4629      	mov	r1, r5
 800d08a:	4630      	mov	r0, r6
 800d08c:	f7ff ff93 	bl	800cfb6 <__sfputs_r>
 800d090:	3001      	adds	r0, #1
 800d092:	f000 80aa 	beq.w	800d1ea <_vfiprintf_r+0x20e>
 800d096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d098:	445a      	add	r2, fp
 800d09a:	9209      	str	r2, [sp, #36]	; 0x24
 800d09c:	f89a 3000 	ldrb.w	r3, [sl]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f000 80a2 	beq.w	800d1ea <_vfiprintf_r+0x20e>
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0b0:	f10a 0a01 	add.w	sl, sl, #1
 800d0b4:	9304      	str	r3, [sp, #16]
 800d0b6:	9307      	str	r3, [sp, #28]
 800d0b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0bc:	931a      	str	r3, [sp, #104]	; 0x68
 800d0be:	4654      	mov	r4, sl
 800d0c0:	2205      	movs	r2, #5
 800d0c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0c6:	4858      	ldr	r0, [pc, #352]	; (800d228 <_vfiprintf_r+0x24c>)
 800d0c8:	f7ff f976 	bl	800c3b8 <memchr>
 800d0cc:	9a04      	ldr	r2, [sp, #16]
 800d0ce:	b9d8      	cbnz	r0, 800d108 <_vfiprintf_r+0x12c>
 800d0d0:	06d1      	lsls	r1, r2, #27
 800d0d2:	bf44      	itt	mi
 800d0d4:	2320      	movmi	r3, #32
 800d0d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0da:	0713      	lsls	r3, r2, #28
 800d0dc:	bf44      	itt	mi
 800d0de:	232b      	movmi	r3, #43	; 0x2b
 800d0e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d0e8:	2b2a      	cmp	r3, #42	; 0x2a
 800d0ea:	d015      	beq.n	800d118 <_vfiprintf_r+0x13c>
 800d0ec:	4654      	mov	r4, sl
 800d0ee:	2000      	movs	r0, #0
 800d0f0:	f04f 0c0a 	mov.w	ip, #10
 800d0f4:	9a07      	ldr	r2, [sp, #28]
 800d0f6:	4621      	mov	r1, r4
 800d0f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0fc:	3b30      	subs	r3, #48	; 0x30
 800d0fe:	2b09      	cmp	r3, #9
 800d100:	d94e      	bls.n	800d1a0 <_vfiprintf_r+0x1c4>
 800d102:	b1b0      	cbz	r0, 800d132 <_vfiprintf_r+0x156>
 800d104:	9207      	str	r2, [sp, #28]
 800d106:	e014      	b.n	800d132 <_vfiprintf_r+0x156>
 800d108:	eba0 0308 	sub.w	r3, r0, r8
 800d10c:	fa09 f303 	lsl.w	r3, r9, r3
 800d110:	4313      	orrs	r3, r2
 800d112:	46a2      	mov	sl, r4
 800d114:	9304      	str	r3, [sp, #16]
 800d116:	e7d2      	b.n	800d0be <_vfiprintf_r+0xe2>
 800d118:	9b03      	ldr	r3, [sp, #12]
 800d11a:	1d19      	adds	r1, r3, #4
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	9103      	str	r1, [sp, #12]
 800d120:	2b00      	cmp	r3, #0
 800d122:	bfbb      	ittet	lt
 800d124:	425b      	neglt	r3, r3
 800d126:	f042 0202 	orrlt.w	r2, r2, #2
 800d12a:	9307      	strge	r3, [sp, #28]
 800d12c:	9307      	strlt	r3, [sp, #28]
 800d12e:	bfb8      	it	lt
 800d130:	9204      	strlt	r2, [sp, #16]
 800d132:	7823      	ldrb	r3, [r4, #0]
 800d134:	2b2e      	cmp	r3, #46	; 0x2e
 800d136:	d10c      	bne.n	800d152 <_vfiprintf_r+0x176>
 800d138:	7863      	ldrb	r3, [r4, #1]
 800d13a:	2b2a      	cmp	r3, #42	; 0x2a
 800d13c:	d135      	bne.n	800d1aa <_vfiprintf_r+0x1ce>
 800d13e:	9b03      	ldr	r3, [sp, #12]
 800d140:	3402      	adds	r4, #2
 800d142:	1d1a      	adds	r2, r3, #4
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	9203      	str	r2, [sp, #12]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	bfb8      	it	lt
 800d14c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d150:	9305      	str	r3, [sp, #20]
 800d152:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d22c <_vfiprintf_r+0x250>
 800d156:	2203      	movs	r2, #3
 800d158:	4650      	mov	r0, sl
 800d15a:	7821      	ldrb	r1, [r4, #0]
 800d15c:	f7ff f92c 	bl	800c3b8 <memchr>
 800d160:	b140      	cbz	r0, 800d174 <_vfiprintf_r+0x198>
 800d162:	2340      	movs	r3, #64	; 0x40
 800d164:	eba0 000a 	sub.w	r0, r0, sl
 800d168:	fa03 f000 	lsl.w	r0, r3, r0
 800d16c:	9b04      	ldr	r3, [sp, #16]
 800d16e:	3401      	adds	r4, #1
 800d170:	4303      	orrs	r3, r0
 800d172:	9304      	str	r3, [sp, #16]
 800d174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d178:	2206      	movs	r2, #6
 800d17a:	482d      	ldr	r0, [pc, #180]	; (800d230 <_vfiprintf_r+0x254>)
 800d17c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d180:	f7ff f91a 	bl	800c3b8 <memchr>
 800d184:	2800      	cmp	r0, #0
 800d186:	d03f      	beq.n	800d208 <_vfiprintf_r+0x22c>
 800d188:	4b2a      	ldr	r3, [pc, #168]	; (800d234 <_vfiprintf_r+0x258>)
 800d18a:	bb1b      	cbnz	r3, 800d1d4 <_vfiprintf_r+0x1f8>
 800d18c:	9b03      	ldr	r3, [sp, #12]
 800d18e:	3307      	adds	r3, #7
 800d190:	f023 0307 	bic.w	r3, r3, #7
 800d194:	3308      	adds	r3, #8
 800d196:	9303      	str	r3, [sp, #12]
 800d198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d19a:	443b      	add	r3, r7
 800d19c:	9309      	str	r3, [sp, #36]	; 0x24
 800d19e:	e767      	b.n	800d070 <_vfiprintf_r+0x94>
 800d1a0:	460c      	mov	r4, r1
 800d1a2:	2001      	movs	r0, #1
 800d1a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1a8:	e7a5      	b.n	800d0f6 <_vfiprintf_r+0x11a>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	f04f 0c0a 	mov.w	ip, #10
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	3401      	adds	r4, #1
 800d1b4:	9305      	str	r3, [sp, #20]
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1bc:	3a30      	subs	r2, #48	; 0x30
 800d1be:	2a09      	cmp	r2, #9
 800d1c0:	d903      	bls.n	800d1ca <_vfiprintf_r+0x1ee>
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d0c5      	beq.n	800d152 <_vfiprintf_r+0x176>
 800d1c6:	9105      	str	r1, [sp, #20]
 800d1c8:	e7c3      	b.n	800d152 <_vfiprintf_r+0x176>
 800d1ca:	4604      	mov	r4, r0
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1d2:	e7f0      	b.n	800d1b6 <_vfiprintf_r+0x1da>
 800d1d4:	ab03      	add	r3, sp, #12
 800d1d6:	9300      	str	r3, [sp, #0]
 800d1d8:	462a      	mov	r2, r5
 800d1da:	4630      	mov	r0, r6
 800d1dc:	4b16      	ldr	r3, [pc, #88]	; (800d238 <_vfiprintf_r+0x25c>)
 800d1de:	a904      	add	r1, sp, #16
 800d1e0:	f7fd fd5c 	bl	800ac9c <_printf_float>
 800d1e4:	4607      	mov	r7, r0
 800d1e6:	1c78      	adds	r0, r7, #1
 800d1e8:	d1d6      	bne.n	800d198 <_vfiprintf_r+0x1bc>
 800d1ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1ec:	07d9      	lsls	r1, r3, #31
 800d1ee:	d405      	bmi.n	800d1fc <_vfiprintf_r+0x220>
 800d1f0:	89ab      	ldrh	r3, [r5, #12]
 800d1f2:	059a      	lsls	r2, r3, #22
 800d1f4:	d402      	bmi.n	800d1fc <_vfiprintf_r+0x220>
 800d1f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1f8:	f7ff f8d4 	bl	800c3a4 <__retarget_lock_release_recursive>
 800d1fc:	89ab      	ldrh	r3, [r5, #12]
 800d1fe:	065b      	lsls	r3, r3, #25
 800d200:	f53f af12 	bmi.w	800d028 <_vfiprintf_r+0x4c>
 800d204:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d206:	e711      	b.n	800d02c <_vfiprintf_r+0x50>
 800d208:	ab03      	add	r3, sp, #12
 800d20a:	9300      	str	r3, [sp, #0]
 800d20c:	462a      	mov	r2, r5
 800d20e:	4630      	mov	r0, r6
 800d210:	4b09      	ldr	r3, [pc, #36]	; (800d238 <_vfiprintf_r+0x25c>)
 800d212:	a904      	add	r1, sp, #16
 800d214:	f7fd ffde 	bl	800b1d4 <_printf_i>
 800d218:	e7e4      	b.n	800d1e4 <_vfiprintf_r+0x208>
 800d21a:	bf00      	nop
 800d21c:	0800dccc 	.word	0x0800dccc
 800d220:	0800dcec 	.word	0x0800dcec
 800d224:	0800dcac 	.word	0x0800dcac
 800d228:	0800de64 	.word	0x0800de64
 800d22c:	0800de6a 	.word	0x0800de6a
 800d230:	0800de6e 	.word	0x0800de6e
 800d234:	0800ac9d 	.word	0x0800ac9d
 800d238:	0800cfb7 	.word	0x0800cfb7

0800d23c <_putc_r>:
 800d23c:	b570      	push	{r4, r5, r6, lr}
 800d23e:	460d      	mov	r5, r1
 800d240:	4614      	mov	r4, r2
 800d242:	4606      	mov	r6, r0
 800d244:	b118      	cbz	r0, 800d24e <_putc_r+0x12>
 800d246:	6983      	ldr	r3, [r0, #24]
 800d248:	b90b      	cbnz	r3, 800d24e <_putc_r+0x12>
 800d24a:	f7ff f807 	bl	800c25c <__sinit>
 800d24e:	4b1c      	ldr	r3, [pc, #112]	; (800d2c0 <_putc_r+0x84>)
 800d250:	429c      	cmp	r4, r3
 800d252:	d124      	bne.n	800d29e <_putc_r+0x62>
 800d254:	6874      	ldr	r4, [r6, #4]
 800d256:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d258:	07d8      	lsls	r0, r3, #31
 800d25a:	d405      	bmi.n	800d268 <_putc_r+0x2c>
 800d25c:	89a3      	ldrh	r3, [r4, #12]
 800d25e:	0599      	lsls	r1, r3, #22
 800d260:	d402      	bmi.n	800d268 <_putc_r+0x2c>
 800d262:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d264:	f7ff f89d 	bl	800c3a2 <__retarget_lock_acquire_recursive>
 800d268:	68a3      	ldr	r3, [r4, #8]
 800d26a:	3b01      	subs	r3, #1
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	60a3      	str	r3, [r4, #8]
 800d270:	da05      	bge.n	800d27e <_putc_r+0x42>
 800d272:	69a2      	ldr	r2, [r4, #24]
 800d274:	4293      	cmp	r3, r2
 800d276:	db1c      	blt.n	800d2b2 <_putc_r+0x76>
 800d278:	b2eb      	uxtb	r3, r5
 800d27a:	2b0a      	cmp	r3, #10
 800d27c:	d019      	beq.n	800d2b2 <_putc_r+0x76>
 800d27e:	6823      	ldr	r3, [r4, #0]
 800d280:	1c5a      	adds	r2, r3, #1
 800d282:	6022      	str	r2, [r4, #0]
 800d284:	701d      	strb	r5, [r3, #0]
 800d286:	b2ed      	uxtb	r5, r5
 800d288:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d28a:	07da      	lsls	r2, r3, #31
 800d28c:	d405      	bmi.n	800d29a <_putc_r+0x5e>
 800d28e:	89a3      	ldrh	r3, [r4, #12]
 800d290:	059b      	lsls	r3, r3, #22
 800d292:	d402      	bmi.n	800d29a <_putc_r+0x5e>
 800d294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d296:	f7ff f885 	bl	800c3a4 <__retarget_lock_release_recursive>
 800d29a:	4628      	mov	r0, r5
 800d29c:	bd70      	pop	{r4, r5, r6, pc}
 800d29e:	4b09      	ldr	r3, [pc, #36]	; (800d2c4 <_putc_r+0x88>)
 800d2a0:	429c      	cmp	r4, r3
 800d2a2:	d101      	bne.n	800d2a8 <_putc_r+0x6c>
 800d2a4:	68b4      	ldr	r4, [r6, #8]
 800d2a6:	e7d6      	b.n	800d256 <_putc_r+0x1a>
 800d2a8:	4b07      	ldr	r3, [pc, #28]	; (800d2c8 <_putc_r+0x8c>)
 800d2aa:	429c      	cmp	r4, r3
 800d2ac:	bf08      	it	eq
 800d2ae:	68f4      	ldreq	r4, [r6, #12]
 800d2b0:	e7d1      	b.n	800d256 <_putc_r+0x1a>
 800d2b2:	4629      	mov	r1, r5
 800d2b4:	4622      	mov	r2, r4
 800d2b6:	4630      	mov	r0, r6
 800d2b8:	f000 f85c 	bl	800d374 <__swbuf_r>
 800d2bc:	4605      	mov	r5, r0
 800d2be:	e7e3      	b.n	800d288 <_putc_r+0x4c>
 800d2c0:	0800dccc 	.word	0x0800dccc
 800d2c4:	0800dcec 	.word	0x0800dcec
 800d2c8:	0800dcac 	.word	0x0800dcac

0800d2cc <_sbrk_r>:
 800d2cc:	b538      	push	{r3, r4, r5, lr}
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	4d05      	ldr	r5, [pc, #20]	; (800d2e8 <_sbrk_r+0x1c>)
 800d2d2:	4604      	mov	r4, r0
 800d2d4:	4608      	mov	r0, r1
 800d2d6:	602b      	str	r3, [r5, #0]
 800d2d8:	f7f4 febc 	bl	8002054 <_sbrk>
 800d2dc:	1c43      	adds	r3, r0, #1
 800d2de:	d102      	bne.n	800d2e6 <_sbrk_r+0x1a>
 800d2e0:	682b      	ldr	r3, [r5, #0]
 800d2e2:	b103      	cbz	r3, 800d2e6 <_sbrk_r+0x1a>
 800d2e4:	6023      	str	r3, [r4, #0]
 800d2e6:	bd38      	pop	{r3, r4, r5, pc}
 800d2e8:	20001664 	.word	0x20001664

0800d2ec <__sread>:
 800d2ec:	b510      	push	{r4, lr}
 800d2ee:	460c      	mov	r4, r1
 800d2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2f4:	f000 faee 	bl	800d8d4 <_read_r>
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	bfab      	itete	ge
 800d2fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d2fe:	89a3      	ldrhlt	r3, [r4, #12]
 800d300:	181b      	addge	r3, r3, r0
 800d302:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d306:	bfac      	ite	ge
 800d308:	6563      	strge	r3, [r4, #84]	; 0x54
 800d30a:	81a3      	strhlt	r3, [r4, #12]
 800d30c:	bd10      	pop	{r4, pc}

0800d30e <__swrite>:
 800d30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d312:	461f      	mov	r7, r3
 800d314:	898b      	ldrh	r3, [r1, #12]
 800d316:	4605      	mov	r5, r0
 800d318:	05db      	lsls	r3, r3, #23
 800d31a:	460c      	mov	r4, r1
 800d31c:	4616      	mov	r6, r2
 800d31e:	d505      	bpl.n	800d32c <__swrite+0x1e>
 800d320:	2302      	movs	r3, #2
 800d322:	2200      	movs	r2, #0
 800d324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d328:	f000 f9f4 	bl	800d714 <_lseek_r>
 800d32c:	89a3      	ldrh	r3, [r4, #12]
 800d32e:	4632      	mov	r2, r6
 800d330:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d334:	81a3      	strh	r3, [r4, #12]
 800d336:	4628      	mov	r0, r5
 800d338:	463b      	mov	r3, r7
 800d33a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d33e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d342:	f000 b869 	b.w	800d418 <_write_r>

0800d346 <__sseek>:
 800d346:	b510      	push	{r4, lr}
 800d348:	460c      	mov	r4, r1
 800d34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d34e:	f000 f9e1 	bl	800d714 <_lseek_r>
 800d352:	1c43      	adds	r3, r0, #1
 800d354:	89a3      	ldrh	r3, [r4, #12]
 800d356:	bf15      	itete	ne
 800d358:	6560      	strne	r0, [r4, #84]	; 0x54
 800d35a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d35e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d362:	81a3      	strheq	r3, [r4, #12]
 800d364:	bf18      	it	ne
 800d366:	81a3      	strhne	r3, [r4, #12]
 800d368:	bd10      	pop	{r4, pc}

0800d36a <__sclose>:
 800d36a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d36e:	f000 b8f1 	b.w	800d554 <_close_r>
	...

0800d374 <__swbuf_r>:
 800d374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d376:	460e      	mov	r6, r1
 800d378:	4614      	mov	r4, r2
 800d37a:	4605      	mov	r5, r0
 800d37c:	b118      	cbz	r0, 800d386 <__swbuf_r+0x12>
 800d37e:	6983      	ldr	r3, [r0, #24]
 800d380:	b90b      	cbnz	r3, 800d386 <__swbuf_r+0x12>
 800d382:	f7fe ff6b 	bl	800c25c <__sinit>
 800d386:	4b21      	ldr	r3, [pc, #132]	; (800d40c <__swbuf_r+0x98>)
 800d388:	429c      	cmp	r4, r3
 800d38a:	d12b      	bne.n	800d3e4 <__swbuf_r+0x70>
 800d38c:	686c      	ldr	r4, [r5, #4]
 800d38e:	69a3      	ldr	r3, [r4, #24]
 800d390:	60a3      	str	r3, [r4, #8]
 800d392:	89a3      	ldrh	r3, [r4, #12]
 800d394:	071a      	lsls	r2, r3, #28
 800d396:	d52f      	bpl.n	800d3f8 <__swbuf_r+0x84>
 800d398:	6923      	ldr	r3, [r4, #16]
 800d39a:	b36b      	cbz	r3, 800d3f8 <__swbuf_r+0x84>
 800d39c:	6923      	ldr	r3, [r4, #16]
 800d39e:	6820      	ldr	r0, [r4, #0]
 800d3a0:	b2f6      	uxtb	r6, r6
 800d3a2:	1ac0      	subs	r0, r0, r3
 800d3a4:	6963      	ldr	r3, [r4, #20]
 800d3a6:	4637      	mov	r7, r6
 800d3a8:	4283      	cmp	r3, r0
 800d3aa:	dc04      	bgt.n	800d3b6 <__swbuf_r+0x42>
 800d3ac:	4621      	mov	r1, r4
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	f000 f962 	bl	800d678 <_fflush_r>
 800d3b4:	bb30      	cbnz	r0, 800d404 <__swbuf_r+0x90>
 800d3b6:	68a3      	ldr	r3, [r4, #8]
 800d3b8:	3001      	adds	r0, #1
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	60a3      	str	r3, [r4, #8]
 800d3be:	6823      	ldr	r3, [r4, #0]
 800d3c0:	1c5a      	adds	r2, r3, #1
 800d3c2:	6022      	str	r2, [r4, #0]
 800d3c4:	701e      	strb	r6, [r3, #0]
 800d3c6:	6963      	ldr	r3, [r4, #20]
 800d3c8:	4283      	cmp	r3, r0
 800d3ca:	d004      	beq.n	800d3d6 <__swbuf_r+0x62>
 800d3cc:	89a3      	ldrh	r3, [r4, #12]
 800d3ce:	07db      	lsls	r3, r3, #31
 800d3d0:	d506      	bpl.n	800d3e0 <__swbuf_r+0x6c>
 800d3d2:	2e0a      	cmp	r6, #10
 800d3d4:	d104      	bne.n	800d3e0 <__swbuf_r+0x6c>
 800d3d6:	4621      	mov	r1, r4
 800d3d8:	4628      	mov	r0, r5
 800d3da:	f000 f94d 	bl	800d678 <_fflush_r>
 800d3de:	b988      	cbnz	r0, 800d404 <__swbuf_r+0x90>
 800d3e0:	4638      	mov	r0, r7
 800d3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3e4:	4b0a      	ldr	r3, [pc, #40]	; (800d410 <__swbuf_r+0x9c>)
 800d3e6:	429c      	cmp	r4, r3
 800d3e8:	d101      	bne.n	800d3ee <__swbuf_r+0x7a>
 800d3ea:	68ac      	ldr	r4, [r5, #8]
 800d3ec:	e7cf      	b.n	800d38e <__swbuf_r+0x1a>
 800d3ee:	4b09      	ldr	r3, [pc, #36]	; (800d414 <__swbuf_r+0xa0>)
 800d3f0:	429c      	cmp	r4, r3
 800d3f2:	bf08      	it	eq
 800d3f4:	68ec      	ldreq	r4, [r5, #12]
 800d3f6:	e7ca      	b.n	800d38e <__swbuf_r+0x1a>
 800d3f8:	4621      	mov	r1, r4
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	f000 f81e 	bl	800d43c <__swsetup_r>
 800d400:	2800      	cmp	r0, #0
 800d402:	d0cb      	beq.n	800d39c <__swbuf_r+0x28>
 800d404:	f04f 37ff 	mov.w	r7, #4294967295
 800d408:	e7ea      	b.n	800d3e0 <__swbuf_r+0x6c>
 800d40a:	bf00      	nop
 800d40c:	0800dccc 	.word	0x0800dccc
 800d410:	0800dcec 	.word	0x0800dcec
 800d414:	0800dcac 	.word	0x0800dcac

0800d418 <_write_r>:
 800d418:	b538      	push	{r3, r4, r5, lr}
 800d41a:	4604      	mov	r4, r0
 800d41c:	4608      	mov	r0, r1
 800d41e:	4611      	mov	r1, r2
 800d420:	2200      	movs	r2, #0
 800d422:	4d05      	ldr	r5, [pc, #20]	; (800d438 <_write_r+0x20>)
 800d424:	602a      	str	r2, [r5, #0]
 800d426:	461a      	mov	r2, r3
 800d428:	f7f4 fdc8 	bl	8001fbc <_write>
 800d42c:	1c43      	adds	r3, r0, #1
 800d42e:	d102      	bne.n	800d436 <_write_r+0x1e>
 800d430:	682b      	ldr	r3, [r5, #0]
 800d432:	b103      	cbz	r3, 800d436 <_write_r+0x1e>
 800d434:	6023      	str	r3, [r4, #0]
 800d436:	bd38      	pop	{r3, r4, r5, pc}
 800d438:	20001664 	.word	0x20001664

0800d43c <__swsetup_r>:
 800d43c:	4b32      	ldr	r3, [pc, #200]	; (800d508 <__swsetup_r+0xcc>)
 800d43e:	b570      	push	{r4, r5, r6, lr}
 800d440:	681d      	ldr	r5, [r3, #0]
 800d442:	4606      	mov	r6, r0
 800d444:	460c      	mov	r4, r1
 800d446:	b125      	cbz	r5, 800d452 <__swsetup_r+0x16>
 800d448:	69ab      	ldr	r3, [r5, #24]
 800d44a:	b913      	cbnz	r3, 800d452 <__swsetup_r+0x16>
 800d44c:	4628      	mov	r0, r5
 800d44e:	f7fe ff05 	bl	800c25c <__sinit>
 800d452:	4b2e      	ldr	r3, [pc, #184]	; (800d50c <__swsetup_r+0xd0>)
 800d454:	429c      	cmp	r4, r3
 800d456:	d10f      	bne.n	800d478 <__swsetup_r+0x3c>
 800d458:	686c      	ldr	r4, [r5, #4]
 800d45a:	89a3      	ldrh	r3, [r4, #12]
 800d45c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d460:	0719      	lsls	r1, r3, #28
 800d462:	d42c      	bmi.n	800d4be <__swsetup_r+0x82>
 800d464:	06dd      	lsls	r5, r3, #27
 800d466:	d411      	bmi.n	800d48c <__swsetup_r+0x50>
 800d468:	2309      	movs	r3, #9
 800d46a:	6033      	str	r3, [r6, #0]
 800d46c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d470:	f04f 30ff 	mov.w	r0, #4294967295
 800d474:	81a3      	strh	r3, [r4, #12]
 800d476:	e03e      	b.n	800d4f6 <__swsetup_r+0xba>
 800d478:	4b25      	ldr	r3, [pc, #148]	; (800d510 <__swsetup_r+0xd4>)
 800d47a:	429c      	cmp	r4, r3
 800d47c:	d101      	bne.n	800d482 <__swsetup_r+0x46>
 800d47e:	68ac      	ldr	r4, [r5, #8]
 800d480:	e7eb      	b.n	800d45a <__swsetup_r+0x1e>
 800d482:	4b24      	ldr	r3, [pc, #144]	; (800d514 <__swsetup_r+0xd8>)
 800d484:	429c      	cmp	r4, r3
 800d486:	bf08      	it	eq
 800d488:	68ec      	ldreq	r4, [r5, #12]
 800d48a:	e7e6      	b.n	800d45a <__swsetup_r+0x1e>
 800d48c:	0758      	lsls	r0, r3, #29
 800d48e:	d512      	bpl.n	800d4b6 <__swsetup_r+0x7a>
 800d490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d492:	b141      	cbz	r1, 800d4a6 <__swsetup_r+0x6a>
 800d494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d498:	4299      	cmp	r1, r3
 800d49a:	d002      	beq.n	800d4a2 <__swsetup_r+0x66>
 800d49c:	4630      	mov	r0, r6
 800d49e:	f7ff fb3d 	bl	800cb1c <_free_r>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	6363      	str	r3, [r4, #52]	; 0x34
 800d4a6:	89a3      	ldrh	r3, [r4, #12]
 800d4a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d4ac:	81a3      	strh	r3, [r4, #12]
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	6063      	str	r3, [r4, #4]
 800d4b2:	6923      	ldr	r3, [r4, #16]
 800d4b4:	6023      	str	r3, [r4, #0]
 800d4b6:	89a3      	ldrh	r3, [r4, #12]
 800d4b8:	f043 0308 	orr.w	r3, r3, #8
 800d4bc:	81a3      	strh	r3, [r4, #12]
 800d4be:	6923      	ldr	r3, [r4, #16]
 800d4c0:	b94b      	cbnz	r3, 800d4d6 <__swsetup_r+0x9a>
 800d4c2:	89a3      	ldrh	r3, [r4, #12]
 800d4c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d4c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4cc:	d003      	beq.n	800d4d6 <__swsetup_r+0x9a>
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	f000 f957 	bl	800d784 <__smakebuf_r>
 800d4d6:	89a0      	ldrh	r0, [r4, #12]
 800d4d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4dc:	f010 0301 	ands.w	r3, r0, #1
 800d4e0:	d00a      	beq.n	800d4f8 <__swsetup_r+0xbc>
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	60a3      	str	r3, [r4, #8]
 800d4e6:	6963      	ldr	r3, [r4, #20]
 800d4e8:	425b      	negs	r3, r3
 800d4ea:	61a3      	str	r3, [r4, #24]
 800d4ec:	6923      	ldr	r3, [r4, #16]
 800d4ee:	b943      	cbnz	r3, 800d502 <__swsetup_r+0xc6>
 800d4f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4f4:	d1ba      	bne.n	800d46c <__swsetup_r+0x30>
 800d4f6:	bd70      	pop	{r4, r5, r6, pc}
 800d4f8:	0781      	lsls	r1, r0, #30
 800d4fa:	bf58      	it	pl
 800d4fc:	6963      	ldrpl	r3, [r4, #20]
 800d4fe:	60a3      	str	r3, [r4, #8]
 800d500:	e7f4      	b.n	800d4ec <__swsetup_r+0xb0>
 800d502:	2000      	movs	r0, #0
 800d504:	e7f7      	b.n	800d4f6 <__swsetup_r+0xba>
 800d506:	bf00      	nop
 800d508:	20000188 	.word	0x20000188
 800d50c:	0800dccc 	.word	0x0800dccc
 800d510:	0800dcec 	.word	0x0800dcec
 800d514:	0800dcac 	.word	0x0800dcac

0800d518 <__assert_func>:
 800d518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d51a:	4614      	mov	r4, r2
 800d51c:	461a      	mov	r2, r3
 800d51e:	4b09      	ldr	r3, [pc, #36]	; (800d544 <__assert_func+0x2c>)
 800d520:	4605      	mov	r5, r0
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	68d8      	ldr	r0, [r3, #12]
 800d526:	b14c      	cbz	r4, 800d53c <__assert_func+0x24>
 800d528:	4b07      	ldr	r3, [pc, #28]	; (800d548 <__assert_func+0x30>)
 800d52a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d52e:	9100      	str	r1, [sp, #0]
 800d530:	462b      	mov	r3, r5
 800d532:	4906      	ldr	r1, [pc, #24]	; (800d54c <__assert_func+0x34>)
 800d534:	f000 f8dc 	bl	800d6f0 <fiprintf>
 800d538:	f000 f9eb 	bl	800d912 <abort>
 800d53c:	4b04      	ldr	r3, [pc, #16]	; (800d550 <__assert_func+0x38>)
 800d53e:	461c      	mov	r4, r3
 800d540:	e7f3      	b.n	800d52a <__assert_func+0x12>
 800d542:	bf00      	nop
 800d544:	20000188 	.word	0x20000188
 800d548:	0800de75 	.word	0x0800de75
 800d54c:	0800de82 	.word	0x0800de82
 800d550:	0800deb0 	.word	0x0800deb0

0800d554 <_close_r>:
 800d554:	b538      	push	{r3, r4, r5, lr}
 800d556:	2300      	movs	r3, #0
 800d558:	4d05      	ldr	r5, [pc, #20]	; (800d570 <_close_r+0x1c>)
 800d55a:	4604      	mov	r4, r0
 800d55c:	4608      	mov	r0, r1
 800d55e:	602b      	str	r3, [r5, #0]
 800d560:	f7f4 fd48 	bl	8001ff4 <_close>
 800d564:	1c43      	adds	r3, r0, #1
 800d566:	d102      	bne.n	800d56e <_close_r+0x1a>
 800d568:	682b      	ldr	r3, [r5, #0]
 800d56a:	b103      	cbz	r3, 800d56e <_close_r+0x1a>
 800d56c:	6023      	str	r3, [r4, #0]
 800d56e:	bd38      	pop	{r3, r4, r5, pc}
 800d570:	20001664 	.word	0x20001664

0800d574 <__sflush_r>:
 800d574:	898a      	ldrh	r2, [r1, #12]
 800d576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d578:	4605      	mov	r5, r0
 800d57a:	0710      	lsls	r0, r2, #28
 800d57c:	460c      	mov	r4, r1
 800d57e:	d457      	bmi.n	800d630 <__sflush_r+0xbc>
 800d580:	684b      	ldr	r3, [r1, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	dc04      	bgt.n	800d590 <__sflush_r+0x1c>
 800d586:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d588:	2b00      	cmp	r3, #0
 800d58a:	dc01      	bgt.n	800d590 <__sflush_r+0x1c>
 800d58c:	2000      	movs	r0, #0
 800d58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d590:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d592:	2e00      	cmp	r6, #0
 800d594:	d0fa      	beq.n	800d58c <__sflush_r+0x18>
 800d596:	2300      	movs	r3, #0
 800d598:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d59c:	682f      	ldr	r7, [r5, #0]
 800d59e:	602b      	str	r3, [r5, #0]
 800d5a0:	d032      	beq.n	800d608 <__sflush_r+0x94>
 800d5a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5a4:	89a3      	ldrh	r3, [r4, #12]
 800d5a6:	075a      	lsls	r2, r3, #29
 800d5a8:	d505      	bpl.n	800d5b6 <__sflush_r+0x42>
 800d5aa:	6863      	ldr	r3, [r4, #4]
 800d5ac:	1ac0      	subs	r0, r0, r3
 800d5ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5b0:	b10b      	cbz	r3, 800d5b6 <__sflush_r+0x42>
 800d5b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5b4:	1ac0      	subs	r0, r0, r3
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5bc:	4628      	mov	r0, r5
 800d5be:	6a21      	ldr	r1, [r4, #32]
 800d5c0:	47b0      	blx	r6
 800d5c2:	1c43      	adds	r3, r0, #1
 800d5c4:	89a3      	ldrh	r3, [r4, #12]
 800d5c6:	d106      	bne.n	800d5d6 <__sflush_r+0x62>
 800d5c8:	6829      	ldr	r1, [r5, #0]
 800d5ca:	291d      	cmp	r1, #29
 800d5cc:	d82c      	bhi.n	800d628 <__sflush_r+0xb4>
 800d5ce:	4a29      	ldr	r2, [pc, #164]	; (800d674 <__sflush_r+0x100>)
 800d5d0:	40ca      	lsrs	r2, r1
 800d5d2:	07d6      	lsls	r6, r2, #31
 800d5d4:	d528      	bpl.n	800d628 <__sflush_r+0xb4>
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	6062      	str	r2, [r4, #4]
 800d5da:	6922      	ldr	r2, [r4, #16]
 800d5dc:	04d9      	lsls	r1, r3, #19
 800d5de:	6022      	str	r2, [r4, #0]
 800d5e0:	d504      	bpl.n	800d5ec <__sflush_r+0x78>
 800d5e2:	1c42      	adds	r2, r0, #1
 800d5e4:	d101      	bne.n	800d5ea <__sflush_r+0x76>
 800d5e6:	682b      	ldr	r3, [r5, #0]
 800d5e8:	b903      	cbnz	r3, 800d5ec <__sflush_r+0x78>
 800d5ea:	6560      	str	r0, [r4, #84]	; 0x54
 800d5ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5ee:	602f      	str	r7, [r5, #0]
 800d5f0:	2900      	cmp	r1, #0
 800d5f2:	d0cb      	beq.n	800d58c <__sflush_r+0x18>
 800d5f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5f8:	4299      	cmp	r1, r3
 800d5fa:	d002      	beq.n	800d602 <__sflush_r+0x8e>
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	f7ff fa8d 	bl	800cb1c <_free_r>
 800d602:	2000      	movs	r0, #0
 800d604:	6360      	str	r0, [r4, #52]	; 0x34
 800d606:	e7c2      	b.n	800d58e <__sflush_r+0x1a>
 800d608:	6a21      	ldr	r1, [r4, #32]
 800d60a:	2301      	movs	r3, #1
 800d60c:	4628      	mov	r0, r5
 800d60e:	47b0      	blx	r6
 800d610:	1c41      	adds	r1, r0, #1
 800d612:	d1c7      	bne.n	800d5a4 <__sflush_r+0x30>
 800d614:	682b      	ldr	r3, [r5, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d0c4      	beq.n	800d5a4 <__sflush_r+0x30>
 800d61a:	2b1d      	cmp	r3, #29
 800d61c:	d001      	beq.n	800d622 <__sflush_r+0xae>
 800d61e:	2b16      	cmp	r3, #22
 800d620:	d101      	bne.n	800d626 <__sflush_r+0xb2>
 800d622:	602f      	str	r7, [r5, #0]
 800d624:	e7b2      	b.n	800d58c <__sflush_r+0x18>
 800d626:	89a3      	ldrh	r3, [r4, #12]
 800d628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d62c:	81a3      	strh	r3, [r4, #12]
 800d62e:	e7ae      	b.n	800d58e <__sflush_r+0x1a>
 800d630:	690f      	ldr	r7, [r1, #16]
 800d632:	2f00      	cmp	r7, #0
 800d634:	d0aa      	beq.n	800d58c <__sflush_r+0x18>
 800d636:	0793      	lsls	r3, r2, #30
 800d638:	bf18      	it	ne
 800d63a:	2300      	movne	r3, #0
 800d63c:	680e      	ldr	r6, [r1, #0]
 800d63e:	bf08      	it	eq
 800d640:	694b      	ldreq	r3, [r1, #20]
 800d642:	1bf6      	subs	r6, r6, r7
 800d644:	600f      	str	r7, [r1, #0]
 800d646:	608b      	str	r3, [r1, #8]
 800d648:	2e00      	cmp	r6, #0
 800d64a:	dd9f      	ble.n	800d58c <__sflush_r+0x18>
 800d64c:	4633      	mov	r3, r6
 800d64e:	463a      	mov	r2, r7
 800d650:	4628      	mov	r0, r5
 800d652:	6a21      	ldr	r1, [r4, #32]
 800d654:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d658:	47e0      	blx	ip
 800d65a:	2800      	cmp	r0, #0
 800d65c:	dc06      	bgt.n	800d66c <__sflush_r+0xf8>
 800d65e:	89a3      	ldrh	r3, [r4, #12]
 800d660:	f04f 30ff 	mov.w	r0, #4294967295
 800d664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d668:	81a3      	strh	r3, [r4, #12]
 800d66a:	e790      	b.n	800d58e <__sflush_r+0x1a>
 800d66c:	4407      	add	r7, r0
 800d66e:	1a36      	subs	r6, r6, r0
 800d670:	e7ea      	b.n	800d648 <__sflush_r+0xd4>
 800d672:	bf00      	nop
 800d674:	20400001 	.word	0x20400001

0800d678 <_fflush_r>:
 800d678:	b538      	push	{r3, r4, r5, lr}
 800d67a:	690b      	ldr	r3, [r1, #16]
 800d67c:	4605      	mov	r5, r0
 800d67e:	460c      	mov	r4, r1
 800d680:	b913      	cbnz	r3, 800d688 <_fflush_r+0x10>
 800d682:	2500      	movs	r5, #0
 800d684:	4628      	mov	r0, r5
 800d686:	bd38      	pop	{r3, r4, r5, pc}
 800d688:	b118      	cbz	r0, 800d692 <_fflush_r+0x1a>
 800d68a:	6983      	ldr	r3, [r0, #24]
 800d68c:	b90b      	cbnz	r3, 800d692 <_fflush_r+0x1a>
 800d68e:	f7fe fde5 	bl	800c25c <__sinit>
 800d692:	4b14      	ldr	r3, [pc, #80]	; (800d6e4 <_fflush_r+0x6c>)
 800d694:	429c      	cmp	r4, r3
 800d696:	d11b      	bne.n	800d6d0 <_fflush_r+0x58>
 800d698:	686c      	ldr	r4, [r5, #4]
 800d69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d0ef      	beq.n	800d682 <_fflush_r+0xa>
 800d6a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d6a4:	07d0      	lsls	r0, r2, #31
 800d6a6:	d404      	bmi.n	800d6b2 <_fflush_r+0x3a>
 800d6a8:	0599      	lsls	r1, r3, #22
 800d6aa:	d402      	bmi.n	800d6b2 <_fflush_r+0x3a>
 800d6ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6ae:	f7fe fe78 	bl	800c3a2 <__retarget_lock_acquire_recursive>
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	4621      	mov	r1, r4
 800d6b6:	f7ff ff5d 	bl	800d574 <__sflush_r>
 800d6ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6bc:	4605      	mov	r5, r0
 800d6be:	07da      	lsls	r2, r3, #31
 800d6c0:	d4e0      	bmi.n	800d684 <_fflush_r+0xc>
 800d6c2:	89a3      	ldrh	r3, [r4, #12]
 800d6c4:	059b      	lsls	r3, r3, #22
 800d6c6:	d4dd      	bmi.n	800d684 <_fflush_r+0xc>
 800d6c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6ca:	f7fe fe6b 	bl	800c3a4 <__retarget_lock_release_recursive>
 800d6ce:	e7d9      	b.n	800d684 <_fflush_r+0xc>
 800d6d0:	4b05      	ldr	r3, [pc, #20]	; (800d6e8 <_fflush_r+0x70>)
 800d6d2:	429c      	cmp	r4, r3
 800d6d4:	d101      	bne.n	800d6da <_fflush_r+0x62>
 800d6d6:	68ac      	ldr	r4, [r5, #8]
 800d6d8:	e7df      	b.n	800d69a <_fflush_r+0x22>
 800d6da:	4b04      	ldr	r3, [pc, #16]	; (800d6ec <_fflush_r+0x74>)
 800d6dc:	429c      	cmp	r4, r3
 800d6de:	bf08      	it	eq
 800d6e0:	68ec      	ldreq	r4, [r5, #12]
 800d6e2:	e7da      	b.n	800d69a <_fflush_r+0x22>
 800d6e4:	0800dccc 	.word	0x0800dccc
 800d6e8:	0800dcec 	.word	0x0800dcec
 800d6ec:	0800dcac 	.word	0x0800dcac

0800d6f0 <fiprintf>:
 800d6f0:	b40e      	push	{r1, r2, r3}
 800d6f2:	b503      	push	{r0, r1, lr}
 800d6f4:	4601      	mov	r1, r0
 800d6f6:	ab03      	add	r3, sp, #12
 800d6f8:	4805      	ldr	r0, [pc, #20]	; (800d710 <fiprintf+0x20>)
 800d6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6fe:	6800      	ldr	r0, [r0, #0]
 800d700:	9301      	str	r3, [sp, #4]
 800d702:	f7ff fc6b 	bl	800cfdc <_vfiprintf_r>
 800d706:	b002      	add	sp, #8
 800d708:	f85d eb04 	ldr.w	lr, [sp], #4
 800d70c:	b003      	add	sp, #12
 800d70e:	4770      	bx	lr
 800d710:	20000188 	.word	0x20000188

0800d714 <_lseek_r>:
 800d714:	b538      	push	{r3, r4, r5, lr}
 800d716:	4604      	mov	r4, r0
 800d718:	4608      	mov	r0, r1
 800d71a:	4611      	mov	r1, r2
 800d71c:	2200      	movs	r2, #0
 800d71e:	4d05      	ldr	r5, [pc, #20]	; (800d734 <_lseek_r+0x20>)
 800d720:	602a      	str	r2, [r5, #0]
 800d722:	461a      	mov	r2, r3
 800d724:	f7f4 fc8a 	bl	800203c <_lseek>
 800d728:	1c43      	adds	r3, r0, #1
 800d72a:	d102      	bne.n	800d732 <_lseek_r+0x1e>
 800d72c:	682b      	ldr	r3, [r5, #0]
 800d72e:	b103      	cbz	r3, 800d732 <_lseek_r+0x1e>
 800d730:	6023      	str	r3, [r4, #0]
 800d732:	bd38      	pop	{r3, r4, r5, pc}
 800d734:	20001664 	.word	0x20001664

0800d738 <__swhatbuf_r>:
 800d738:	b570      	push	{r4, r5, r6, lr}
 800d73a:	460e      	mov	r6, r1
 800d73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d740:	4614      	mov	r4, r2
 800d742:	2900      	cmp	r1, #0
 800d744:	461d      	mov	r5, r3
 800d746:	b096      	sub	sp, #88	; 0x58
 800d748:	da08      	bge.n	800d75c <__swhatbuf_r+0x24>
 800d74a:	2200      	movs	r2, #0
 800d74c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d750:	602a      	str	r2, [r5, #0]
 800d752:	061a      	lsls	r2, r3, #24
 800d754:	d410      	bmi.n	800d778 <__swhatbuf_r+0x40>
 800d756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d75a:	e00e      	b.n	800d77a <__swhatbuf_r+0x42>
 800d75c:	466a      	mov	r2, sp
 800d75e:	f000 f8df 	bl	800d920 <_fstat_r>
 800d762:	2800      	cmp	r0, #0
 800d764:	dbf1      	blt.n	800d74a <__swhatbuf_r+0x12>
 800d766:	9a01      	ldr	r2, [sp, #4]
 800d768:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d76c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d770:	425a      	negs	r2, r3
 800d772:	415a      	adcs	r2, r3
 800d774:	602a      	str	r2, [r5, #0]
 800d776:	e7ee      	b.n	800d756 <__swhatbuf_r+0x1e>
 800d778:	2340      	movs	r3, #64	; 0x40
 800d77a:	2000      	movs	r0, #0
 800d77c:	6023      	str	r3, [r4, #0]
 800d77e:	b016      	add	sp, #88	; 0x58
 800d780:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d784 <__smakebuf_r>:
 800d784:	898b      	ldrh	r3, [r1, #12]
 800d786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d788:	079d      	lsls	r5, r3, #30
 800d78a:	4606      	mov	r6, r0
 800d78c:	460c      	mov	r4, r1
 800d78e:	d507      	bpl.n	800d7a0 <__smakebuf_r+0x1c>
 800d790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d794:	6023      	str	r3, [r4, #0]
 800d796:	6123      	str	r3, [r4, #16]
 800d798:	2301      	movs	r3, #1
 800d79a:	6163      	str	r3, [r4, #20]
 800d79c:	b002      	add	sp, #8
 800d79e:	bd70      	pop	{r4, r5, r6, pc}
 800d7a0:	466a      	mov	r2, sp
 800d7a2:	ab01      	add	r3, sp, #4
 800d7a4:	f7ff ffc8 	bl	800d738 <__swhatbuf_r>
 800d7a8:	9900      	ldr	r1, [sp, #0]
 800d7aa:	4605      	mov	r5, r0
 800d7ac:	4630      	mov	r0, r6
 800d7ae:	f7ff fa1d 	bl	800cbec <_malloc_r>
 800d7b2:	b948      	cbnz	r0, 800d7c8 <__smakebuf_r+0x44>
 800d7b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7b8:	059a      	lsls	r2, r3, #22
 800d7ba:	d4ef      	bmi.n	800d79c <__smakebuf_r+0x18>
 800d7bc:	f023 0303 	bic.w	r3, r3, #3
 800d7c0:	f043 0302 	orr.w	r3, r3, #2
 800d7c4:	81a3      	strh	r3, [r4, #12]
 800d7c6:	e7e3      	b.n	800d790 <__smakebuf_r+0xc>
 800d7c8:	4b0d      	ldr	r3, [pc, #52]	; (800d800 <__smakebuf_r+0x7c>)
 800d7ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800d7cc:	89a3      	ldrh	r3, [r4, #12]
 800d7ce:	6020      	str	r0, [r4, #0]
 800d7d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7d4:	81a3      	strh	r3, [r4, #12]
 800d7d6:	9b00      	ldr	r3, [sp, #0]
 800d7d8:	6120      	str	r0, [r4, #16]
 800d7da:	6163      	str	r3, [r4, #20]
 800d7dc:	9b01      	ldr	r3, [sp, #4]
 800d7de:	b15b      	cbz	r3, 800d7f8 <__smakebuf_r+0x74>
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7e6:	f000 f8ad 	bl	800d944 <_isatty_r>
 800d7ea:	b128      	cbz	r0, 800d7f8 <__smakebuf_r+0x74>
 800d7ec:	89a3      	ldrh	r3, [r4, #12]
 800d7ee:	f023 0303 	bic.w	r3, r3, #3
 800d7f2:	f043 0301 	orr.w	r3, r3, #1
 800d7f6:	81a3      	strh	r3, [r4, #12]
 800d7f8:	89a0      	ldrh	r0, [r4, #12]
 800d7fa:	4305      	orrs	r5, r0
 800d7fc:	81a5      	strh	r5, [r4, #12]
 800d7fe:	e7cd      	b.n	800d79c <__smakebuf_r+0x18>
 800d800:	0800c1f5 	.word	0x0800c1f5

0800d804 <__ascii_mbtowc>:
 800d804:	b082      	sub	sp, #8
 800d806:	b901      	cbnz	r1, 800d80a <__ascii_mbtowc+0x6>
 800d808:	a901      	add	r1, sp, #4
 800d80a:	b142      	cbz	r2, 800d81e <__ascii_mbtowc+0x1a>
 800d80c:	b14b      	cbz	r3, 800d822 <__ascii_mbtowc+0x1e>
 800d80e:	7813      	ldrb	r3, [r2, #0]
 800d810:	600b      	str	r3, [r1, #0]
 800d812:	7812      	ldrb	r2, [r2, #0]
 800d814:	1e10      	subs	r0, r2, #0
 800d816:	bf18      	it	ne
 800d818:	2001      	movne	r0, #1
 800d81a:	b002      	add	sp, #8
 800d81c:	4770      	bx	lr
 800d81e:	4610      	mov	r0, r2
 800d820:	e7fb      	b.n	800d81a <__ascii_mbtowc+0x16>
 800d822:	f06f 0001 	mvn.w	r0, #1
 800d826:	e7f8      	b.n	800d81a <__ascii_mbtowc+0x16>

0800d828 <memmove>:
 800d828:	4288      	cmp	r0, r1
 800d82a:	b510      	push	{r4, lr}
 800d82c:	eb01 0402 	add.w	r4, r1, r2
 800d830:	d902      	bls.n	800d838 <memmove+0x10>
 800d832:	4284      	cmp	r4, r0
 800d834:	4623      	mov	r3, r4
 800d836:	d807      	bhi.n	800d848 <memmove+0x20>
 800d838:	1e43      	subs	r3, r0, #1
 800d83a:	42a1      	cmp	r1, r4
 800d83c:	d008      	beq.n	800d850 <memmove+0x28>
 800d83e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d842:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d846:	e7f8      	b.n	800d83a <memmove+0x12>
 800d848:	4601      	mov	r1, r0
 800d84a:	4402      	add	r2, r0
 800d84c:	428a      	cmp	r2, r1
 800d84e:	d100      	bne.n	800d852 <memmove+0x2a>
 800d850:	bd10      	pop	{r4, pc}
 800d852:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d856:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d85a:	e7f7      	b.n	800d84c <memmove+0x24>

0800d85c <__malloc_lock>:
 800d85c:	4801      	ldr	r0, [pc, #4]	; (800d864 <__malloc_lock+0x8>)
 800d85e:	f7fe bda0 	b.w	800c3a2 <__retarget_lock_acquire_recursive>
 800d862:	bf00      	nop
 800d864:	20001659 	.word	0x20001659

0800d868 <__malloc_unlock>:
 800d868:	4801      	ldr	r0, [pc, #4]	; (800d870 <__malloc_unlock+0x8>)
 800d86a:	f7fe bd9b 	b.w	800c3a4 <__retarget_lock_release_recursive>
 800d86e:	bf00      	nop
 800d870:	20001659 	.word	0x20001659

0800d874 <_realloc_r>:
 800d874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d878:	4680      	mov	r8, r0
 800d87a:	4614      	mov	r4, r2
 800d87c:	460e      	mov	r6, r1
 800d87e:	b921      	cbnz	r1, 800d88a <_realloc_r+0x16>
 800d880:	4611      	mov	r1, r2
 800d882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d886:	f7ff b9b1 	b.w	800cbec <_malloc_r>
 800d88a:	b92a      	cbnz	r2, 800d898 <_realloc_r+0x24>
 800d88c:	f7ff f946 	bl	800cb1c <_free_r>
 800d890:	4625      	mov	r5, r4
 800d892:	4628      	mov	r0, r5
 800d894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d898:	f000 f864 	bl	800d964 <_malloc_usable_size_r>
 800d89c:	4284      	cmp	r4, r0
 800d89e:	4607      	mov	r7, r0
 800d8a0:	d802      	bhi.n	800d8a8 <_realloc_r+0x34>
 800d8a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d8a6:	d812      	bhi.n	800d8ce <_realloc_r+0x5a>
 800d8a8:	4621      	mov	r1, r4
 800d8aa:	4640      	mov	r0, r8
 800d8ac:	f7ff f99e 	bl	800cbec <_malloc_r>
 800d8b0:	4605      	mov	r5, r0
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	d0ed      	beq.n	800d892 <_realloc_r+0x1e>
 800d8b6:	42bc      	cmp	r4, r7
 800d8b8:	4622      	mov	r2, r4
 800d8ba:	4631      	mov	r1, r6
 800d8bc:	bf28      	it	cs
 800d8be:	463a      	movcs	r2, r7
 800d8c0:	f7fe fd88 	bl	800c3d4 <memcpy>
 800d8c4:	4631      	mov	r1, r6
 800d8c6:	4640      	mov	r0, r8
 800d8c8:	f7ff f928 	bl	800cb1c <_free_r>
 800d8cc:	e7e1      	b.n	800d892 <_realloc_r+0x1e>
 800d8ce:	4635      	mov	r5, r6
 800d8d0:	e7df      	b.n	800d892 <_realloc_r+0x1e>
	...

0800d8d4 <_read_r>:
 800d8d4:	b538      	push	{r3, r4, r5, lr}
 800d8d6:	4604      	mov	r4, r0
 800d8d8:	4608      	mov	r0, r1
 800d8da:	4611      	mov	r1, r2
 800d8dc:	2200      	movs	r2, #0
 800d8de:	4d05      	ldr	r5, [pc, #20]	; (800d8f4 <_read_r+0x20>)
 800d8e0:	602a      	str	r2, [r5, #0]
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	f7f4 fb4d 	bl	8001f82 <_read>
 800d8e8:	1c43      	adds	r3, r0, #1
 800d8ea:	d102      	bne.n	800d8f2 <_read_r+0x1e>
 800d8ec:	682b      	ldr	r3, [r5, #0]
 800d8ee:	b103      	cbz	r3, 800d8f2 <_read_r+0x1e>
 800d8f0:	6023      	str	r3, [r4, #0]
 800d8f2:	bd38      	pop	{r3, r4, r5, pc}
 800d8f4:	20001664 	.word	0x20001664

0800d8f8 <__ascii_wctomb>:
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	4608      	mov	r0, r1
 800d8fc:	b141      	cbz	r1, 800d910 <__ascii_wctomb+0x18>
 800d8fe:	2aff      	cmp	r2, #255	; 0xff
 800d900:	d904      	bls.n	800d90c <__ascii_wctomb+0x14>
 800d902:	228a      	movs	r2, #138	; 0x8a
 800d904:	f04f 30ff 	mov.w	r0, #4294967295
 800d908:	601a      	str	r2, [r3, #0]
 800d90a:	4770      	bx	lr
 800d90c:	2001      	movs	r0, #1
 800d90e:	700a      	strb	r2, [r1, #0]
 800d910:	4770      	bx	lr

0800d912 <abort>:
 800d912:	2006      	movs	r0, #6
 800d914:	b508      	push	{r3, lr}
 800d916:	f000 f855 	bl	800d9c4 <raise>
 800d91a:	2001      	movs	r0, #1
 800d91c:	f7f4 fb27 	bl	8001f6e <_exit>

0800d920 <_fstat_r>:
 800d920:	b538      	push	{r3, r4, r5, lr}
 800d922:	2300      	movs	r3, #0
 800d924:	4d06      	ldr	r5, [pc, #24]	; (800d940 <_fstat_r+0x20>)
 800d926:	4604      	mov	r4, r0
 800d928:	4608      	mov	r0, r1
 800d92a:	4611      	mov	r1, r2
 800d92c:	602b      	str	r3, [r5, #0]
 800d92e:	f7f4 fb6c 	bl	800200a <_fstat>
 800d932:	1c43      	adds	r3, r0, #1
 800d934:	d102      	bne.n	800d93c <_fstat_r+0x1c>
 800d936:	682b      	ldr	r3, [r5, #0]
 800d938:	b103      	cbz	r3, 800d93c <_fstat_r+0x1c>
 800d93a:	6023      	str	r3, [r4, #0]
 800d93c:	bd38      	pop	{r3, r4, r5, pc}
 800d93e:	bf00      	nop
 800d940:	20001664 	.word	0x20001664

0800d944 <_isatty_r>:
 800d944:	b538      	push	{r3, r4, r5, lr}
 800d946:	2300      	movs	r3, #0
 800d948:	4d05      	ldr	r5, [pc, #20]	; (800d960 <_isatty_r+0x1c>)
 800d94a:	4604      	mov	r4, r0
 800d94c:	4608      	mov	r0, r1
 800d94e:	602b      	str	r3, [r5, #0]
 800d950:	f7f4 fb6a 	bl	8002028 <_isatty>
 800d954:	1c43      	adds	r3, r0, #1
 800d956:	d102      	bne.n	800d95e <_isatty_r+0x1a>
 800d958:	682b      	ldr	r3, [r5, #0]
 800d95a:	b103      	cbz	r3, 800d95e <_isatty_r+0x1a>
 800d95c:	6023      	str	r3, [r4, #0]
 800d95e:	bd38      	pop	{r3, r4, r5, pc}
 800d960:	20001664 	.word	0x20001664

0800d964 <_malloc_usable_size_r>:
 800d964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d968:	1f18      	subs	r0, r3, #4
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	bfbc      	itt	lt
 800d96e:	580b      	ldrlt	r3, [r1, r0]
 800d970:	18c0      	addlt	r0, r0, r3
 800d972:	4770      	bx	lr

0800d974 <_raise_r>:
 800d974:	291f      	cmp	r1, #31
 800d976:	b538      	push	{r3, r4, r5, lr}
 800d978:	4604      	mov	r4, r0
 800d97a:	460d      	mov	r5, r1
 800d97c:	d904      	bls.n	800d988 <_raise_r+0x14>
 800d97e:	2316      	movs	r3, #22
 800d980:	6003      	str	r3, [r0, #0]
 800d982:	f04f 30ff 	mov.w	r0, #4294967295
 800d986:	bd38      	pop	{r3, r4, r5, pc}
 800d988:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d98a:	b112      	cbz	r2, 800d992 <_raise_r+0x1e>
 800d98c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d990:	b94b      	cbnz	r3, 800d9a6 <_raise_r+0x32>
 800d992:	4620      	mov	r0, r4
 800d994:	f000 f830 	bl	800d9f8 <_getpid_r>
 800d998:	462a      	mov	r2, r5
 800d99a:	4601      	mov	r1, r0
 800d99c:	4620      	mov	r0, r4
 800d99e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9a2:	f000 b817 	b.w	800d9d4 <_kill_r>
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d00a      	beq.n	800d9c0 <_raise_r+0x4c>
 800d9aa:	1c59      	adds	r1, r3, #1
 800d9ac:	d103      	bne.n	800d9b6 <_raise_r+0x42>
 800d9ae:	2316      	movs	r3, #22
 800d9b0:	6003      	str	r3, [r0, #0]
 800d9b2:	2001      	movs	r0, #1
 800d9b4:	e7e7      	b.n	800d986 <_raise_r+0x12>
 800d9b6:	2400      	movs	r4, #0
 800d9b8:	4628      	mov	r0, r5
 800d9ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d9be:	4798      	blx	r3
 800d9c0:	2000      	movs	r0, #0
 800d9c2:	e7e0      	b.n	800d986 <_raise_r+0x12>

0800d9c4 <raise>:
 800d9c4:	4b02      	ldr	r3, [pc, #8]	; (800d9d0 <raise+0xc>)
 800d9c6:	4601      	mov	r1, r0
 800d9c8:	6818      	ldr	r0, [r3, #0]
 800d9ca:	f7ff bfd3 	b.w	800d974 <_raise_r>
 800d9ce:	bf00      	nop
 800d9d0:	20000188 	.word	0x20000188

0800d9d4 <_kill_r>:
 800d9d4:	b538      	push	{r3, r4, r5, lr}
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	4d06      	ldr	r5, [pc, #24]	; (800d9f4 <_kill_r+0x20>)
 800d9da:	4604      	mov	r4, r0
 800d9dc:	4608      	mov	r0, r1
 800d9de:	4611      	mov	r1, r2
 800d9e0:	602b      	str	r3, [r5, #0]
 800d9e2:	f7f4 fab4 	bl	8001f4e <_kill>
 800d9e6:	1c43      	adds	r3, r0, #1
 800d9e8:	d102      	bne.n	800d9f0 <_kill_r+0x1c>
 800d9ea:	682b      	ldr	r3, [r5, #0]
 800d9ec:	b103      	cbz	r3, 800d9f0 <_kill_r+0x1c>
 800d9ee:	6023      	str	r3, [r4, #0]
 800d9f0:	bd38      	pop	{r3, r4, r5, pc}
 800d9f2:	bf00      	nop
 800d9f4:	20001664 	.word	0x20001664

0800d9f8 <_getpid_r>:
 800d9f8:	f7f4 baa2 	b.w	8001f40 <_getpid>

0800d9fc <_init>:
 800d9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9fe:	bf00      	nop
 800da00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da02:	bc08      	pop	{r3}
 800da04:	469e      	mov	lr, r3
 800da06:	4770      	bx	lr

0800da08 <_fini>:
 800da08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da0a:	bf00      	nop
 800da0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da0e:	bc08      	pop	{r3}
 800da10:	469e      	mov	lr, r3
 800da12:	4770      	bx	lr
