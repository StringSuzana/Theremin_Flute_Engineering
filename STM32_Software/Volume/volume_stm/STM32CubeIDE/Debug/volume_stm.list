
volume_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800d5d8  0800d5d8  0001d5d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da74  0800da74  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800da74  0800da74  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800da74  0800da74  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da74  0800da74  0001da74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da78  0800da78  0001da78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800da7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c4  20000350  0800ddcc  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001614  0800ddcc  00021614  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012821  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031dd  00000000  00000000  00032b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00035d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00036e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b14d  00000000  00000000  00037de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001416d  00000000  00000000  00052f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e916  00000000  00000000  000670a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f59b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005918  00000000  00000000  000f5a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d5bc 	.word	0x0800d5bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800d5bc 	.word	0x0800d5bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001080:	f001 face 	bl	8002620 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001084:	f000 f852 	bl	800112c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001088:	f000 fa0c 	bl	80014a4 <MX_GPIO_Init>
	MX_TIM2_Init();
 800108c:	f000 f8a8 	bl	80011e0 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 8001090:	f000 fe1c 	bl	8001ccc <MX_USB_DEVICE_Init>
	MX_TIM3_Init();
 8001094:	f000 f914 	bl	80012c0 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001098:	f000 f994 	bl	80013c4 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */

	//Frequency measurement on TIM2_CHANNEL_1
	TIM2->CCMR1 = 50;
 800109c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a0:	2232      	movs	r2, #50	; 0x32
 80010a2:	619a      	str	r2, [r3, #24]
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // INPUT CAPTURE
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); // INPUT CAPTURE
 80010a4:	2100      	movs	r1, #0
 80010a6:	481d      	ldr	r0, [pc, #116]	; (800111c <main+0xa0>)
 80010a8:	f004 f904 	bl	80052b4 <HAL_TIM_IC_Start_IT>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //PWM SERVO
 80010ac:	2100      	movs	r1, #0
 80010ae:	481c      	ldr	r0, [pc, #112]	; (8001120 <main+0xa4>)
 80010b0:	f004 f806 	bl	80050c0 <HAL_TIM_PWM_Start>

	//Initialize servo-motor positions to SILENCE
	htim3.Instance->CCR1 = POS_SILENCE;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <main+0xa4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2219      	movs	r2, #25
 80010ba:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOB, B14_GREEN_VOL_LED_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c2:	4818      	ldr	r0, [pc, #96]	; (8001124 <main+0xa8>)
 80010c4:	f001 fddb 	bl	8002c7e <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		//If switch is in calibrating position, then calibrate antenna.
		if (HAL_GPIO_ReadPin(B12_SWITCH_GPIO_Port, B12_SWITCH_Pin)
 80010c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010cc:	4815      	ldr	r0, [pc, #84]	; (8001124 <main+0xa8>)
 80010ce:	f001 fdbf 	bl	8002c50 <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d10d      	bne.n	80010f4 <main+0x78>
				== GPIO_PIN_SET) {
			HAL_GPIO_WritePin(GPIOB, B13_CALIBRATE_LED_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010de:	4811      	ldr	r0, [pc, #68]	; (8001124 <main+0xa8>)
 80010e0:	f001 fdcd 	bl	8002c7e <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80010e4:	200a      	movs	r0, #10
 80010e6:	f001 fafd 	bl	80026e4 <HAL_Delay>
			vol_calibrate_antenna();
 80010ea:	f000 fa6f 	bl	80015cc <vol_calibrate_antenna>
			print_to_com_port();
 80010ee:	f000 fa31 	bl	8001554 <print_to_com_port>
 80010f2:	e7e9      	b.n	80010c8 <main+0x4c>
		}
		//Play instrument
		else {
			HAL_GPIO_WritePin(GPIOB, B13_CALIBRATE_LED_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fa:	480a      	ldr	r0, [pc, #40]	; (8001124 <main+0xa8>)
 80010fc:	f001 fdbf 	bl	8002c7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, B14_GREEN_VOL_LED_Pin, GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001106:	4807      	ldr	r0, [pc, #28]	; (8001124 <main+0xa8>)
 8001108:	f001 fdb9 	bl	8002c7e <HAL_GPIO_WritePin>
			//test_volume_servo();
			if (vol_finished_one_measurement == 1) {
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <main+0xac>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d1d9      	bne.n	80010c8 <main+0x4c>
				vol_play();
 8001114:	f000 faa8 	bl	8001668 <vol_play>
		if (HAL_GPIO_ReadPin(B12_SWITCH_GPIO_Port, B12_SWITCH_Pin)
 8001118:	e7d6      	b.n	80010c8 <main+0x4c>
 800111a:	bf00      	nop
 800111c:	200003fc 	.word	0x200003fc
 8001120:	200003b4 	.word	0x200003b4
 8001124:	40010c00 	.word	0x40010c00
 8001128:	20000458 	.word	0x20000458

0800112c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	; 0x50
 8001130:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001132:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001136:	2228      	movs	r2, #40	; 0x28
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f009 fae8 	bl	800a710 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800115c:	2301      	movs	r3, #1
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001160:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116a:	2301      	movs	r3, #1
 800116c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116e:	2302      	movs	r3, #2
 8001170:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001172:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001176:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001178:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800117c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800117e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001182:	4618      	mov	r0, r3
 8001184:	f003 fa56 	bl	8004634 <HAL_RCC_OscConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x66>
		Error_Handler();
 800118e:	f000 fb47 	bl	8001820 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001192:	230f      	movs	r3, #15
 8001194:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001196:	2302      	movs	r3, #2
 8001198:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800119e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011a2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2102      	movs	r1, #2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 fcc2 	bl	8004b38 <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0x92>
		Error_Handler();
 80011ba:	f000 fb31 	bl	8001820 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011be:	2310      	movs	r3, #16
 80011c0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	4618      	mov	r0, r3
 80011ca:	f003 fe1b 	bl	8004e04 <HAL_RCCEx_PeriphCLKConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0xac>
		Error_Handler();
 80011d4:	f000 fb24 	bl	8001820 <Error_Handler>
	}
}
 80011d8:	bf00      	nop
 80011da:	3750      	adds	r7, #80	; 0x50
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011e6:	f107 0318 	add.w	r3, r7, #24
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80011fe:	463b      	mov	r3, r7
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800120a:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <MX_TIM2_Init+0xdc>)
 800120c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001210:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001212:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <MX_TIM2_Init+0xdc>)
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b28      	ldr	r3, [pc, #160]	; (80012bc <MX_TIM2_Init+0xdc>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 800121e:	4b27      	ldr	r3, [pc, #156]	; (80012bc <MX_TIM2_Init+0xdc>)
 8001220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001224:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	4b25      	ldr	r3, [pc, #148]	; (80012bc <MX_TIM2_Init+0xdc>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122c:	4b23      	ldr	r3, [pc, #140]	; (80012bc <MX_TIM2_Init+0xdc>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001232:	4822      	ldr	r0, [pc, #136]	; (80012bc <MX_TIM2_Init+0xdc>)
 8001234:	f003 fe9c 	bl	8004f70 <HAL_TIM_Base_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM2_Init+0x62>
		Error_Handler();
 800123e:	f000 faef 	bl	8001820 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001246:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001248:	f107 0318 	add.w	r3, r7, #24
 800124c:	4619      	mov	r1, r3
 800124e:	481b      	ldr	r0, [pc, #108]	; (80012bc <MX_TIM2_Init+0xdc>)
 8001250:	f004 fb90 	bl	8005974 <HAL_TIM_ConfigClockSource>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0x7e>
		Error_Handler();
 800125a:	f000 fae1 	bl	8001820 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800125e:	4817      	ldr	r0, [pc, #92]	; (80012bc <MX_TIM2_Init+0xdc>)
 8001260:	f003 ffd0 	bl	8005204 <HAL_TIM_IC_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM2_Init+0x8e>
		Error_Handler();
 800126a:	f000 fad9 	bl	8001820 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	4619      	mov	r1, r3
 800127c:	480f      	ldr	r0, [pc, #60]	; (80012bc <MX_TIM2_Init+0xdc>)
 800127e:	f005 f857 	bl	8006330 <HAL_TIMEx_MasterConfigSynchronization>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 8001288:	f000 faca 	bl	8001820 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800128c:	2300      	movs	r3, #0
 800128e:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001290:	2301      	movs	r3, #1
 8001292:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800129c:	463b      	mov	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <MX_TIM2_Init+0xdc>)
 80012a4:	f004 fa14 	bl	80056d0 <HAL_TIM_IC_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM2_Init+0xd2>
		Error_Handler();
 80012ae:	f000 fab7 	bl	8001820 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000036c 	.word	0x2000036c

080012c0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08e      	sub	sp, #56	; 0x38
 80012c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012d4:	f107 0320 	add.w	r3, r7, #32
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
 80012ec:	615a      	str	r2, [r3, #20]
 80012ee:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80012f0:	4b32      	ldr	r3, [pc, #200]	; (80013bc <MX_TIM3_Init+0xfc>)
 80012f2:	4a33      	ldr	r2, [pc, #204]	; (80013c0 <MX_TIM3_Init+0x100>)
 80012f4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 1440 - 1;
 80012f6:	4b31      	ldr	r3, [pc, #196]	; (80013bc <MX_TIM3_Init+0xfc>)
 80012f8:	f240 529f 	movw	r2, #1439	; 0x59f
 80012fc:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <MX_TIM3_Init+0xfc>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 8001304:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <MX_TIM3_Init+0xfc>)
 8001306:	f240 32e7 	movw	r2, #999	; 0x3e7
 800130a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <MX_TIM3_Init+0xfc>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001312:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <MX_TIM3_Init+0xfc>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001318:	4828      	ldr	r0, [pc, #160]	; (80013bc <MX_TIM3_Init+0xfc>)
 800131a:	f003 fe29 	bl	8004f70 <HAL_TIM_Base_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM3_Init+0x68>
		Error_Handler();
 8001324:	f000 fa7c 	bl	8001820 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800132e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001332:	4619      	mov	r1, r3
 8001334:	4821      	ldr	r0, [pc, #132]	; (80013bc <MX_TIM3_Init+0xfc>)
 8001336:	f004 fb1d 	bl	8005974 <HAL_TIM_ConfigClockSource>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM3_Init+0x84>
		Error_Handler();
 8001340:	f000 fa6e 	bl	8001820 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001344:	481d      	ldr	r0, [pc, #116]	; (80013bc <MX_TIM3_Init+0xfc>)
 8001346:	f003 fe62 	bl	800500e <HAL_TIM_PWM_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0x94>
		Error_Handler();
 8001350:	f000 fa66 	bl	8001820 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800135c:	f107 0320 	add.w	r3, r7, #32
 8001360:	4619      	mov	r1, r3
 8001362:	4816      	ldr	r0, [pc, #88]	; (80013bc <MX_TIM3_Init+0xfc>)
 8001364:	f004 ffe4 	bl	8006330 <HAL_TIMEx_MasterConfigSynchronization>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800136e:	f000 fa57 	bl	8001820 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001372:	2360      	movs	r3, #96	; 0x60
 8001374:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	4619      	mov	r1, r3
 8001388:	480c      	ldr	r0, [pc, #48]	; (80013bc <MX_TIM3_Init+0xfc>)
 800138a:	f004 fa35 	bl	80057f8 <HAL_TIM_PWM_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8001394:	f000 fa44 	bl	8001820 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2204      	movs	r2, #4
 800139c:	4619      	mov	r1, r3
 800139e:	4807      	ldr	r0, [pc, #28]	; (80013bc <MX_TIM3_Init+0xfc>)
 80013a0:	f004 fa2a 	bl	80057f8 <HAL_TIM_PWM_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM3_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 80013aa:	f000 fa39 	bl	8001820 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80013ae:	4803      	ldr	r0, [pc, #12]	; (80013bc <MX_TIM3_Init+0xfc>)
 80013b0:	f000 fb14 	bl	80019dc <HAL_TIM_MspPostInit>

}
 80013b4:	bf00      	nop
 80013b6:	3738      	adds	r7, #56	; 0x38
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200003b4 	.word	0x200003b4
 80013c0:	40000400 	.word	0x40000400

080013c4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80013ca:	f107 0318 	add.w	r3, r7, #24
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80013e2:	463b      	mov	r3, r7
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80013ee:	4b2b      	ldr	r3, [pc, #172]	; (800149c <MX_TIM4_Init+0xd8>)
 80013f0:	4a2b      	ldr	r2, [pc, #172]	; (80014a0 <MX_TIM4_Init+0xdc>)
 80013f2:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80013f4:	4b29      	ldr	r3, [pc, #164]	; (800149c <MX_TIM4_Init+0xd8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b28      	ldr	r3, [pc, #160]	; (800149c <MX_TIM4_Init+0xd8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001400:	4b26      	ldr	r3, [pc, #152]	; (800149c <MX_TIM4_Init+0xd8>)
 8001402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001406:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <MX_TIM4_Init+0xd8>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <MX_TIM4_Init+0xd8>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001414:	4821      	ldr	r0, [pc, #132]	; (800149c <MX_TIM4_Init+0xd8>)
 8001416:	f003 fdab 	bl	8004f70 <HAL_TIM_Base_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM4_Init+0x60>
		Error_Handler();
 8001420:	f000 f9fe 	bl	8001820 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001428:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 800142a:	f107 0318 	add.w	r3, r7, #24
 800142e:	4619      	mov	r1, r3
 8001430:	481a      	ldr	r0, [pc, #104]	; (800149c <MX_TIM4_Init+0xd8>)
 8001432:	f004 fa9f 	bl	8005974 <HAL_TIM_ConfigClockSource>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM4_Init+0x7c>
		Error_Handler();
 800143c:	f000 f9f0 	bl	8001820 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK) {
 8001440:	4816      	ldr	r0, [pc, #88]	; (800149c <MX_TIM4_Init+0xd8>)
 8001442:	f003 fedf 	bl	8005204 <HAL_TIM_IC_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM4_Init+0x8c>
		Error_Handler();
 800144c:	f000 f9e8 	bl	8001820 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4619      	mov	r1, r3
 800145e:	480f      	ldr	r0, [pc, #60]	; (800149c <MX_TIM4_Init+0xd8>)
 8001460:	f004 ff66 	bl	8006330 <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM4_Init+0xaa>
			!= HAL_OK) {
		Error_Handler();
 800146a:	f000 f9d9 	bl	8001820 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001472:	2301      	movs	r3, #1
 8001474:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800147e:	463b      	mov	r3, r7
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_TIM4_Init+0xd8>)
 8001486:	f004 f923 	bl	80056d0 <HAL_TIM_IC_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM4_Init+0xd0>
		Error_Handler();
 8001490:	f000 f9c6 	bl	8001820 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200003fc 	.word	0x200003fc
 80014a0:	40000800 	.word	0x40000800

080014a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <MX_GPIO_Init+0xa8>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a23      	ldr	r2, [pc, #140]	; (800154c <MX_GPIO_Init+0xa8>)
 80014be:	f043 0320 	orr.w	r3, r3, #32
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <MX_GPIO_Init+0xa8>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0320 	and.w	r3, r3, #32
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <MX_GPIO_Init+0xa8>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a1d      	ldr	r2, [pc, #116]	; (800154c <MX_GPIO_Init+0xa8>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <MX_GPIO_Init+0xa8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80014e8:	4b18      	ldr	r3, [pc, #96]	; (800154c <MX_GPIO_Init+0xa8>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a17      	ldr	r2, [pc, #92]	; (800154c <MX_GPIO_Init+0xa8>)
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <MX_GPIO_Init+0xa8>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, B13_CALIBRATE_LED_Pin | B14_GREEN_VOL_LED_Pin,
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001506:	4812      	ldr	r0, [pc, #72]	; (8001550 <MX_GPIO_Init+0xac>)
 8001508:	f001 fbb9 	bl	8002c7e <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B12_SWITCH_Pin */
	GPIO_InitStruct.Pin = B12_SWITCH_Pin;
 800150c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001510:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001516:	2301      	movs	r3, #1
 8001518:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B12_SWITCH_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	4619      	mov	r1, r3
 8001520:	480b      	ldr	r0, [pc, #44]	; (8001550 <MX_GPIO_Init+0xac>)
 8001522:	f001 fa11 	bl	8002948 <HAL_GPIO_Init>

	/*Configure GPIO pins : B13_CALIBRATE_LED_Pin B14_GREEN_VOL_LED_Pin */
	GPIO_InitStruct.Pin = B13_CALIBRATE_LED_Pin | B14_GREEN_VOL_LED_Pin;
 8001526:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800152a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152c:	2301      	movs	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2302      	movs	r3, #2
 8001536:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	4619      	mov	r1, r3
 800153e:	4804      	ldr	r0, [pc, #16]	; (8001550 <MX_GPIO_Init+0xac>)
 8001540:	f001 fa02 	bl	8002948 <HAL_GPIO_Init>

}
 8001544:	bf00      	nop
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000
 8001550:	40010c00 	.word	0x40010c00

08001554 <print_to_com_port>:

/* USER CODE BEGIN 4 */
void print_to_com_port() {
 8001554:	b580      	push	{r7, lr}
 8001556:	b09c      	sub	sp, #112	; 0x70
 8001558:	af02      	add	r7, sp, #8
	char buffer[100];
	sprintf(buffer, "%f;%lu; \r\n", vol_frequency, vol_period_ticks);
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <print_to_com_port+0x40>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ff62 	bl	8000428 <__aeabi_f2d>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	490b      	ldr	r1, [pc, #44]	; (8001598 <print_to_com_port+0x44>)
 800156a:	6809      	ldr	r1, [r1, #0]
 800156c:	1d38      	adds	r0, r7, #4
 800156e:	9100      	str	r1, [sp, #0]
 8001570:	490a      	ldr	r1, [pc, #40]	; (800159c <print_to_com_port+0x48>)
 8001572:	f009 fd61 	bl	800b038 <siprintf>
	CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe fde9 	bl	8000150 <strlen>
 800157e:	4602      	mov	r2, r0
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f000 fc5f 	bl	8001e48 <CDC_Transmit_FS>

}
 800158a:	bf00      	nop
 800158c:	3768      	adds	r7, #104	; 0x68
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000454 	.word	0x20000454
 8001598:	2000044c 	.word	0x2000044c
 800159c:	0800d5f0 	.word	0x0800d5f0

080015a0 <vol_is_in_range>:
BOOLEAN vol_is_in_range(int lower_limit, int upper_limit, int number) {
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
	return (lower_limit <= number && number <= upper_limit);
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dc05      	bgt.n	80015c0 <vol_is_in_range+0x20>
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dc01      	bgt.n	80015c0 <vol_is_in_range+0x20>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <vol_is_in_range+0x22>
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <vol_calibrate_antenna>:
void vol_calibrate_antenna() {
 80015cc:	b5b0      	push	{r4, r5, r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
	const uint32_t TOLERANCE = 60;
 80015d2:	233c      	movs	r3, #60	; 0x3c
 80015d4:	607b      	str	r3, [r7, #4]
	if (vol_is_in_range(VOL_LOWEST_FREQUENCY, VOL_LOWEST_FREQUENCY + TOLERANCE,
 80015d6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80015da:	461c      	mov	r4, r3
 80015dc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4413      	add	r3, r2
 80015e4:	461d      	mov	r5, r3
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <vol_calibrate_antenna+0x6c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fd20 	bl	8001030 <__aeabi_f2iz>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	4629      	mov	r1, r5
 80015f6:	4620      	mov	r0, r4
 80015f8:	f7ff ffd2 	bl	80015a0 <vol_is_in_range>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d10c      	bne.n	800161c <vol_calibrate_antenna+0x50>
			vol_frequency) == true) {
		current_pos = POS_SILENCE;
 8001602:	2219      	movs	r2, #25
 8001604:	4b0d      	ldr	r3, [pc, #52]	; (800163c <vol_calibrate_antenna+0x70>)
 8001606:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, B14_GREEN_VOL_LED_Pin, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800160e:	480c      	ldr	r0, [pc, #48]	; (8001640 <vol_calibrate_antenna+0x74>)
 8001610:	f001 fb35 	bl	8002c7e <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001614:	200a      	movs	r0, #10
 8001616:	f001 f865 	bl	80026e4 <HAL_Delay>
		//Turn OFF GREEN LED
		HAL_GPIO_WritePin(GPIOB, B14_GREEN_VOL_LED_Pin, GPIO_PIN_SET);
		HAL_Delay(10);
	}

}
 800161a:	e008      	b.n	800162e <vol_calibrate_antenna+0x62>
		HAL_GPIO_WritePin(GPIOB, B14_GREEN_VOL_LED_Pin, GPIO_PIN_SET);
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001622:	4807      	ldr	r0, [pc, #28]	; (8001640 <vol_calibrate_antenna+0x74>)
 8001624:	f001 fb2b 	bl	8002c7e <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001628:	200a      	movs	r0, #10
 800162a:	f001 f85b 	bl	80026e4 <HAL_Delay>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bdb0      	pop	{r4, r5, r7, pc}
 8001636:	bf00      	nop
 8001638:	20000454 	.word	0x20000454
 800163c:	20000000 	.word	0x20000000
 8001640:	40010c00 	.word	0x40010c00

08001644 <vol_play_hw>:
void vol_play_hw(uint32_t vol_position) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	htim3.Instance->CCR1 = vol_position;
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <vol_play_hw+0x20>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(200);
 8001654:	20c8      	movs	r0, #200	; 0xc8
 8001656:	f001 f845 	bl	80026e4 <HAL_Delay>
	//vol_is_first_captured = 0;
	//__HAL_TIM_SET_COUNTER(&htim2, 0);

}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200003b4 	.word	0x200003b4

08001668 <vol_play>:
	for (int i = 25; i < 100; i++) {
		htim3.Instance->CCR1 = i;
		HAL_Delay(200);
	}
}
void vol_play() {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
	const uint32_t STEP_SIZE = 40;
 800166e:	2328      	movs	r3, #40	; 0x28
 8001670:	607b      	str	r3, [r7, #4]
	if ((vol_frequency > VOL_LOWEST_FREQUENCY) && (vol_frequency < 2800)) {
 8001672:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fabc 	bl	8000bf4 <__aeabi_ui2f>
 800167c:	4602      	mov	r2, r0
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <vol_play+0x98>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4619      	mov	r1, r3
 8001684:	4610      	mov	r0, r2
 8001686:	f7ff fcab 	bl	8000fe0 <__aeabi_fcmplt>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d011      	beq.n	80016b4 <vol_play+0x4c>
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <vol_play+0x98>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	491b      	ldr	r1, [pc, #108]	; (8001704 <vol_play+0x9c>)
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fca2 	bl	8000fe0 <__aeabi_fcmplt>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d008      	beq.n	80016b4 <vol_play+0x4c>
		current_pos = POS_SILENCE;
 80016a2:	2219      	movs	r2, #25
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <vol_play+0xa0>)
 80016a6:	601a      	str	r2, [r3, #0]
		vol_play_hw(current_pos);
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <vol_play+0xa0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ffc9 	bl	8001644 <vol_play_hw>
	 vol_play_hw(60);
	 }
	 else if(vol_frequency < VOL_LOWEST_FREQUENCY -50){
	 vol_play_hw(30);
	 }*/
}
 80016b2:	e021      	b.n	80016f8 <vol_play+0x90>
	} else if ((vol_frequency < VOL_LOWEST_FREQUENCY)
 80016b4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fa9b 	bl	8000bf4 <__aeabi_ui2f>
 80016be:	4602      	mov	r2, r0
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <vol_play+0x98>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	4610      	mov	r0, r2
 80016c8:	f7ff fca8 	bl	800101c <__aeabi_fcmpgt>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d100      	bne.n	80016d4 <vol_play+0x6c>
}
 80016d2:	e011      	b.n	80016f8 <vol_play+0x90>
			&& (vol_frequency > 1400)) {
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <vol_play+0x98>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <vol_play+0xa4>)
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fc9e 	bl	800101c <__aeabi_fcmpgt>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d100      	bne.n	80016e8 <vol_play+0x80>
}
 80016e6:	e007      	b.n	80016f8 <vol_play+0x90>
		current_pos = POS_PLAY;
 80016e8:	2223      	movs	r2, #35	; 0x23
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <vol_play+0xa0>)
 80016ec:	601a      	str	r2, [r3, #0]
		vol_play_hw(current_pos);
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <vol_play+0xa0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ffa6 	bl	8001644 <vol_play_hw>
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000454 	.word	0x20000454
 8001704:	452f0000 	.word	0x452f0000
 8001708:	20000000 	.word	0x20000000
 800170c:	44af0000 	.word	0x44af0000

08001710 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

	if (htim == &htim2 || htim == &htim4) {
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a38      	ldr	r2, [pc, #224]	; (80017fc <HAL_TIM_IC_CaptureCallback+0xec>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d003      	beq.n	8001728 <HAL_TIM_IC_CaptureCallback+0x18>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a37      	ldr	r2, [pc, #220]	; (8001800 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d163      	bne.n	80017f0 <HAL_TIM_IC_CaptureCallback+0xe0>

		if (htim->Channel != HAL_TIM_ACTIVE_CHANNEL_1) {
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7f1b      	ldrb	r3, [r3, #28]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d161      	bne.n	80017f4 <HAL_TIM_IC_CaptureCallback+0xe4>
		 accomulator = accomulator / 32;
		 const float refClock = TIMCLOCK / (PRESCALAR);
		 vol_frequency = refClock / accomulator;
		 }*/

		if (vol_is_first_captured == 0) // if the first rising edge is not captured
 8001730:	4b34      	ldr	r3, [pc, #208]	; (8001804 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10d      	bne.n	8001754 <HAL_TIM_IC_CaptureCallback+0x44>
				{
			vol_finished_one_measurement = 0;
 8001738:	4b33      	ldr	r3, [pc, #204]	; (8001808 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
			vol_IC_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800173e:	2100      	movs	r1, #0
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f004 f9db 	bl	8005afc <HAL_TIM_ReadCapturedValue>
 8001746:	4603      	mov	r3, r0
 8001748:	4a30      	ldr	r2, [pc, #192]	; (800180c <HAL_TIM_IC_CaptureCallback+0xfc>)
 800174a:	6013      	str	r3, [r2, #0]
			vol_is_first_captured = 1;  // set the first captured as true
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]
		if (vol_is_first_captured == 0) // if the first rising edge is not captured
 8001752:	e050      	b.n	80017f6 <HAL_TIM_IC_CaptureCallback+0xe6>
		}

		else // If the first rising edge is captured, now we will capture the second edge
		{
			vol_IC_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8001754:	2100      	movs	r1, #0
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f004 f9d0 	bl	8005afc <HAL_TIM_ReadCapturedValue>
 800175c:	4603      	mov	r3, r0
 800175e:	4a2c      	ldr	r2, [pc, #176]	; (8001810 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001760:	6013      	str	r3, [r2, #0]

			if (vol_IC_val2 > vol_IC_val1) {
 8001762:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4b29      	ldr	r3, [pc, #164]	; (800180c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d907      	bls.n	800177e <HAL_TIM_IC_CaptureCallback+0x6e>
				vol_period_ticks = vol_IC_val2 - vol_IC_val1;
 800176e:	4b28      	ldr	r3, [pc, #160]	; (8001810 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b26      	ldr	r3, [pc, #152]	; (800180c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	4a26      	ldr	r2, [pc, #152]	; (8001814 <HAL_TIM_IC_CaptureCallback+0x104>)
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	e00f      	b.n	800179e <HAL_TIM_IC_CaptureCallback+0x8e>
			}

			else if (vol_IC_val1 > vol_IC_val2) {
 800177e:	4b23      	ldr	r3, [pc, #140]	; (800180c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b23      	ldr	r3, [pc, #140]	; (8001810 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d909      	bls.n	800179e <HAL_TIM_IC_CaptureCallback+0x8e>
				vol_period_ticks = (0xffff - vol_IC_val1) + vol_IC_val2; //0xffff 65535
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <HAL_TIM_IC_CaptureCallback+0x100>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b1f      	ldr	r3, [pc, #124]	; (800180c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001798:	33ff      	adds	r3, #255	; 0xff
 800179a:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <HAL_TIM_IC_CaptureCallback+0x104>)
 800179c:	6013      	str	r3, [r2, #0]
			}

			float refClock = TIMCLOCK / (PRESCALAR);
 800179e:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x108>)
 80017a0:	60fb      	str	r3, [r7, #12]

			vol_frequency = refClock / vol_period_ticks;
 80017a2:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <HAL_TIM_IC_CaptureCallback+0x104>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fa24 	bl	8000bf4 <__aeabi_ui2f>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4619      	mov	r1, r3
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f7ff fb2b 	bl	8000e0c <__aeabi_fdiv>
 80017b6:	4603      	mov	r3, r0
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <HAL_TIM_IC_CaptureCallback+0x10c>)
 80017bc:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
			vol_is_first_captured = 0;
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

			if (vol_frequency < 1) {
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <HAL_TIM_IC_CaptureCallback+0x10c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fc03 	bl	8000fe0 <__aeabi_fcmplt>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_TIM_IC_CaptureCallback+0xd8>
				vol_finished_one_measurement = 0;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
		if (vol_is_first_captured == 0) // if the first rising edge is not captured
 80017e6:	e006      	b.n	80017f6 <HAL_TIM_IC_CaptureCallback+0xe6>
			} else {
				vol_finished_one_measurement = 1;
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
		if (vol_is_first_captured == 0) // if the first rising edge is not captured
 80017ee:	e002      	b.n	80017f6 <HAL_TIM_IC_CaptureCallback+0xe6>
			}

		}
	} else {
		return;
 80017f0:	bf00      	nop
 80017f2:	e000      	b.n	80017f6 <HAL_TIM_IC_CaptureCallback+0xe6>
			return;
 80017f4:	bf00      	nop
	}
}
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	2000036c 	.word	0x2000036c
 8001800:	200003fc 	.word	0x200003fc
 8001804:	20000450 	.word	0x20000450
 8001808:	20000458 	.word	0x20000458
 800180c:	20000444 	.word	0x20000444
 8001810:	20000448 	.word	0x20000448
 8001814:	2000044c 	.word	0x2000044c
 8001818:	4c895440 	.word	0x4c895440
 800181c:	20000454 	.word	0x20000454

08001820 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001824:	b672      	cpsid	i
}
 8001826:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001828:	e7fe      	b.n	8001828 <Error_Handler+0x8>
	...

0800182c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <HAL_MspInit+0x7c>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	4a1c      	ldr	r2, [pc, #112]	; (80018a8 <HAL_MspInit+0x7c>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6193      	str	r3, [r2, #24]
 800183e:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <HAL_MspInit+0x7c>)
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <HAL_MspInit+0x7c>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a16      	ldr	r2, [pc, #88]	; (80018a8 <HAL_MspInit+0x7c>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	61d3      	str	r3, [r2, #28]
 8001856:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <HAL_MspInit+0x7c>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	2005      	movs	r0, #5
 8001868:	f001 f837 	bl	80028da <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800186c:	2005      	movs	r0, #5
 800186e:	f001 f850 	bl	8002912 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2005      	movs	r0, #5
 8001878:	f001 f82f 	bl	80028da <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800187c:	2005      	movs	r0, #5
 800187e:	f001 f848 	bl	8002912 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_MspInit+0x80>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <HAL_MspInit+0x80>)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010000 	.word	0x40010000

080018b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08c      	sub	sp, #48	; 0x30
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0320 	add.w	r3, r7, #32
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ce:	d12c      	bne.n	800192a <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d0:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <HAL_TIM_Base_MspInit+0x118>)
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	4a3c      	ldr	r2, [pc, #240]	; (80019c8 <HAL_TIM_Base_MspInit+0x118>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	61d3      	str	r3, [r2, #28]
 80018dc:	4b3a      	ldr	r3, [pc, #232]	; (80019c8 <HAL_TIM_Base_MspInit+0x118>)
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e8:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <HAL_TIM_Base_MspInit+0x118>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a36      	ldr	r2, [pc, #216]	; (80019c8 <HAL_TIM_Base_MspInit+0x118>)
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <HAL_TIM_Base_MspInit+0x118>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001900:	2301      	movs	r3, #1
 8001902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f107 0320 	add.w	r3, r7, #32
 8001910:	4619      	mov	r1, r3
 8001912:	482e      	ldr	r0, [pc, #184]	; (80019cc <HAL_TIM_Base_MspInit+0x11c>)
 8001914:	f001 f818 	bl	8002948 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	201c      	movs	r0, #28
 800191e:	f000 ffdc 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001922:	201c      	movs	r0, #28
 8001924:	f000 fff5 	bl	8002912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001928:	e04a      	b.n	80019c0 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM3)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a28      	ldr	r2, [pc, #160]	; (80019d0 <HAL_TIM_Base_MspInit+0x120>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d114      	bne.n	800195e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <HAL_TIM_Base_MspInit+0x118>)
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <HAL_TIM_Base_MspInit+0x118>)
 800193a:	f043 0302 	orr.w	r3, r3, #2
 800193e:	61d3      	str	r3, [r2, #28]
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <HAL_TIM_Base_MspInit+0x118>)
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	201d      	movs	r0, #29
 8001952:	f000 ffc2 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001956:	201d      	movs	r0, #29
 8001958:	f000 ffdb 	bl	8002912 <HAL_NVIC_EnableIRQ>
}
 800195c:	e030      	b.n	80019c0 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM4)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a1c      	ldr	r2, [pc, #112]	; (80019d4 <HAL_TIM_Base_MspInit+0x124>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d12b      	bne.n	80019c0 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <HAL_TIM_Base_MspInit+0x118>)
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <HAL_TIM_Base_MspInit+0x118>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	61d3      	str	r3, [r2, #28]
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_TIM_Base_MspInit+0x118>)
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_TIM_Base_MspInit+0x118>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <HAL_TIM_Base_MspInit+0x118>)
 8001986:	f043 0308 	orr.w	r3, r3, #8
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <HAL_TIM_Base_MspInit+0x118>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001998:	2340      	movs	r3, #64	; 0x40
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	f107 0320 	add.w	r3, r7, #32
 80019a8:	4619      	mov	r1, r3
 80019aa:	480b      	ldr	r0, [pc, #44]	; (80019d8 <HAL_TIM_Base_MspInit+0x128>)
 80019ac:	f000 ffcc 	bl	8002948 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	201e      	movs	r0, #30
 80019b6:	f000 ff90 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019ba:	201e      	movs	r0, #30
 80019bc:	f000 ffa9 	bl	8002912 <HAL_NVIC_EnableIRQ>
}
 80019c0:	bf00      	nop
 80019c2:	3730      	adds	r7, #48	; 0x30
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010800 	.word	0x40010800
 80019d0:	40000400 	.word	0x40000400
 80019d4:	40000800 	.word	0x40000800
 80019d8:	40010c00 	.word	0x40010c00

080019dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a0f      	ldr	r2, [pc, #60]	; (8001a34 <HAL_TIM_MspPostInit+0x58>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d117      	bne.n	8001a2c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_TIM_MspPostInit+0x5c>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a0d      	ldr	r2, [pc, #52]	; (8001a38 <HAL_TIM_MspPostInit+0x5c>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_TIM_MspPostInit+0x5c>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a14:	23c0      	movs	r3, #192	; 0xc0
 8001a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <HAL_TIM_MspPostInit+0x60>)
 8001a28:	f000 ff8e 	bl	8002948 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a2c:	bf00      	nop
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40000400 	.word	0x40000400
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010800 	.word	0x40010800

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <NMI_Handler+0x4>

08001a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <MemManage_Handler+0x4>

08001a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a86:	f000 fe11 	bl	80026ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
	...

08001a9c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001aa2:	f001 fa35 	bl	8002f10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200010f4 	.word	0x200010f4

08001ab0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001ab6:	f001 fa2b 	bl	8002f10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200010f4 	.word	0x200010f4

08001ac4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <TIM2_IRQHandler+0x10>)
 8001aca:	f003 fcf9 	bl	80054c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000036c 	.word	0x2000036c

08001ad8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <TIM3_IRQHandler+0x10>)
 8001ade:	f003 fcef 	bl	80054c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200003b4 	.word	0x200003b4

08001aec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <TIM4_IRQHandler+0x10>)
 8001af2:	f003 fce5 	bl	80054c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200003fc 	.word	0x200003fc

08001b00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
	return 1;
 8001b04:	2301      	movs	r3, #1
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <_kill>:

int _kill(int pid, int sig)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b18:	f008 fdd0 	bl	800a6bc <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2216      	movs	r2, #22
 8001b20:	601a      	str	r2, [r3, #0]
	return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <_exit>:

void _exit (int status)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b36:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffe7 	bl	8001b0e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b40:	e7fe      	b.n	8001b40 <_exit+0x12>

08001b42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e00a      	b.n	8001b6a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b54:	f3af 8000 	nop.w
 8001b58:	4601      	mov	r1, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	60ba      	str	r2, [r7, #8]
 8001b60:	b2ca      	uxtb	r2, r1
 8001b62:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	dbf0      	blt.n	8001b54 <_read+0x12>
	}

return len;
 8001b72:	687b      	ldr	r3, [r7, #4]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e009      	b.n	8001ba2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	60ba      	str	r2, [r7, #8]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	dbf1      	blt.n	8001b8e <_write+0x12>
	}
	return len;
 8001baa:	687b      	ldr	r3, [r7, #4]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_close>:

int _close(int file)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	return -1;
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bda:	605a      	str	r2, [r3, #4]
	return 0;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <_isatty>:

int _isatty(int file)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	return 1;
 8001bf0:	2301      	movs	r3, #1
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
	return 0;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c1c:	4a14      	ldr	r2, [pc, #80]	; (8001c70 <_sbrk+0x5c>)
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <_sbrk+0x60>)
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <_sbrk+0x64>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <_sbrk+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d207      	bcs.n	8001c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c44:	f008 fd3a 	bl	800a6bc <__errno>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	e009      	b.n	8001c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <_sbrk+0x64>)
 8001c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20005000 	.word	0x20005000
 8001c74:	00000400 	.word	0x00000400
 8001c78:	2000045c 	.word	0x2000045c
 8001c7c:	20001618 	.word	0x20001618

08001c80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c80:	480c      	ldr	r0, [pc, #48]	; (8001cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c82:	490d      	ldr	r1, [pc, #52]	; (8001cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c84:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c98:	4c0a      	ldr	r4, [pc, #40]	; (8001cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ca6:	f000 fcb5 	bl	8002614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001caa:	f008 fd0d 	bl	800a6c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cae:	f7ff f9e5 	bl	800107c <main>
  bx lr
 8001cb2:	4770      	bx	lr
  ldr r0, =_sdata
 8001cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb8:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001cbc:	0800da7c 	.word	0x0800da7c
  ldr r2, =_sbss
 8001cc0:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001cc4:	20001614 	.word	0x20001614

08001cc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC1_2_IRQHandler>
	...

08001ccc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4912      	ldr	r1, [pc, #72]	; (8001d1c <MX_USB_DEVICE_Init+0x50>)
 8001cd4:	4812      	ldr	r0, [pc, #72]	; (8001d20 <MX_USB_DEVICE_Init+0x54>)
 8001cd6:	f007 fc3d 	bl	8009554 <USBD_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8001ce0:	f7ff fd9e 	bl	8001820 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001ce4:	490f      	ldr	r1, [pc, #60]	; (8001d24 <MX_USB_DEVICE_Init+0x58>)
 8001ce6:	480e      	ldr	r0, [pc, #56]	; (8001d20 <MX_USB_DEVICE_Init+0x54>)
 8001ce8:	f007 fc6c 	bl	80095c4 <USBD_RegisterClass>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8001cf2:	f7ff fd95 	bl	8001820 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8001cf6:	490c      	ldr	r1, [pc, #48]	; (8001d28 <MX_USB_DEVICE_Init+0x5c>)
 8001cf8:	4809      	ldr	r0, [pc, #36]	; (8001d20 <MX_USB_DEVICE_Init+0x54>)
 8001cfa:	f007 fb8f 	bl	800941c <USBD_CDC_RegisterInterface>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8001d04:	f7ff fd8c 	bl	8001820 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8001d08:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_USB_DEVICE_Init+0x54>)
 8001d0a:	f007 fc81 	bl	8009610 <USBD_Start>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8001d14:	f7ff fd84 	bl	8001820 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000014 	.word	0x20000014
 8001d20:	20000460 	.word	0x20000460
 8001d24:	2000007c 	.word	0x2000007c
 8001d28:	20000004 	.word	0x20000004

08001d2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8001d30:	2200      	movs	r2, #0
 8001d32:	4905      	ldr	r1, [pc, #20]	; (8001d48 <CDC_Init_FS+0x1c>)
 8001d34:	4805      	ldr	r0, [pc, #20]	; (8001d4c <CDC_Init_FS+0x20>)
 8001d36:	f007 fb87 	bl	8009448 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8001d3a:	4905      	ldr	r1, [pc, #20]	; (8001d50 <CDC_Init_FS+0x24>)
 8001d3c:	4803      	ldr	r0, [pc, #12]	; (8001d4c <CDC_Init_FS+0x20>)
 8001d3e:	f007 fb9c 	bl	800947a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8001d42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000b0c 	.word	0x20000b0c
 8001d4c:	20000460 	.word	0x20000460
 8001d50:	20000724 	.word	0x20000724

08001d54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8001d58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
	...

08001d64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
 8001d70:	4613      	mov	r3, r2
 8001d72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	2b23      	cmp	r3, #35	; 0x23
 8001d78:	d84a      	bhi.n	8001e10 <CDC_Control_FS+0xac>
 8001d7a:	a201      	add	r2, pc, #4	; (adr r2, 8001d80 <CDC_Control_FS+0x1c>)
 8001d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d80:	08001e11 	.word	0x08001e11
 8001d84:	08001e11 	.word	0x08001e11
 8001d88:	08001e11 	.word	0x08001e11
 8001d8c:	08001e11 	.word	0x08001e11
 8001d90:	08001e11 	.word	0x08001e11
 8001d94:	08001e11 	.word	0x08001e11
 8001d98:	08001e11 	.word	0x08001e11
 8001d9c:	08001e11 	.word	0x08001e11
 8001da0:	08001e11 	.word	0x08001e11
 8001da4:	08001e11 	.word	0x08001e11
 8001da8:	08001e11 	.word	0x08001e11
 8001dac:	08001e11 	.word	0x08001e11
 8001db0:	08001e11 	.word	0x08001e11
 8001db4:	08001e11 	.word	0x08001e11
 8001db8:	08001e11 	.word	0x08001e11
 8001dbc:	08001e11 	.word	0x08001e11
 8001dc0:	08001e11 	.word	0x08001e11
 8001dc4:	08001e11 	.word	0x08001e11
 8001dc8:	08001e11 	.word	0x08001e11
 8001dcc:	08001e11 	.word	0x08001e11
 8001dd0:	08001e11 	.word	0x08001e11
 8001dd4:	08001e11 	.word	0x08001e11
 8001dd8:	08001e11 	.word	0x08001e11
 8001ddc:	08001e11 	.word	0x08001e11
 8001de0:	08001e11 	.word	0x08001e11
 8001de4:	08001e11 	.word	0x08001e11
 8001de8:	08001e11 	.word	0x08001e11
 8001dec:	08001e11 	.word	0x08001e11
 8001df0:	08001e11 	.word	0x08001e11
 8001df4:	08001e11 	.word	0x08001e11
 8001df8:	08001e11 	.word	0x08001e11
 8001dfc:	08001e11 	.word	0x08001e11
 8001e00:	08001e11 	.word	0x08001e11
 8001e04:	08001e11 	.word	0x08001e11
 8001e08:	08001e11 	.word	0x08001e11
 8001e0c:	08001e11 	.word	0x08001e11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8001e10:	bf00      	nop
  }

  return (USBD_OK);
 8001e12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop

08001e20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <CDC_Receive_FS+0x24>)
 8001e2e:	f007 fb24 	bl	800947a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8001e32:	4804      	ldr	r0, [pc, #16]	; (8001e44 <CDC_Receive_FS+0x24>)
 8001e34:	f007 fb63 	bl	80094fe <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8001e38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000460 	.word	0x20000460

08001e48 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <CDC_Transmit_FS+0x48>)
 8001e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001e5e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00b      	b.n	8001e86 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8001e6e:	887b      	ldrh	r3, [r7, #2]
 8001e70:	461a      	mov	r2, r3
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4806      	ldr	r0, [pc, #24]	; (8001e90 <CDC_Transmit_FS+0x48>)
 8001e76:	f007 fae7 	bl	8009448 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <CDC_Transmit_FS+0x48>)
 8001e7c:	f007 fb10 	bl	80094a0 <USBD_CDC_TransmitPacket>
 8001e80:	4603      	mov	r3, r0
 8001e82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000460 	.word	0x20000460

08001e94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2212      	movs	r2, #18
 8001ea4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8001ea6:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000030 	.word	0x20000030

08001eb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8001eca:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000044 	.word	0x20000044

08001edc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d105      	bne.n	8001efa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	4907      	ldr	r1, [pc, #28]	; (8001f10 <USBD_FS_ProductStrDescriptor+0x34>)
 8001ef2:	4808      	ldr	r0, [pc, #32]	; (8001f14 <USBD_FS_ProductStrDescriptor+0x38>)
 8001ef4:	f008 fb04 	bl	800a500 <USBD_GetString>
 8001ef8:	e004      	b.n	8001f04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	4904      	ldr	r1, [pc, #16]	; (8001f10 <USBD_FS_ProductStrDescriptor+0x34>)
 8001efe:	4805      	ldr	r0, [pc, #20]	; (8001f14 <USBD_FS_ProductStrDescriptor+0x38>)
 8001f00:	f008 fafe 	bl	800a500 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001f04:	4b02      	ldr	r3, [pc, #8]	; (8001f10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000ef4 	.word	0x20000ef4
 8001f14:	0800d5fc 	.word	0x0800d5fc

08001f18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	4904      	ldr	r1, [pc, #16]	; (8001f38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8001f2a:	f008 fae9 	bl	800a500 <USBD_GetString>
  return USBD_StrDesc;
 8001f2e:	4b02      	ldr	r3, [pc, #8]	; (8001f38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000ef4 	.word	0x20000ef4
 8001f3c:	0800d614 	.word	0x0800d614

08001f40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	221a      	movs	r2, #26
 8001f50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8001f52:	f000 f843 	bl	8001fdc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8001f56:	4b02      	ldr	r3, [pc, #8]	; (8001f60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000048 	.word	0x20000048

08001f64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d105      	bne.n	8001f82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	4907      	ldr	r1, [pc, #28]	; (8001f98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8001f7a:	4808      	ldr	r0, [pc, #32]	; (8001f9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8001f7c:	f008 fac0 	bl	800a500 <USBD_GetString>
 8001f80:	e004      	b.n	8001f8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	4904      	ldr	r1, [pc, #16]	; (8001f98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8001f88:	f008 faba 	bl	800a500 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001f8c:	4b02      	ldr	r3, [pc, #8]	; (8001f98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000ef4 	.word	0x20000ef4
 8001f9c:	0800d628 	.word	0x0800d628

08001fa0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d105      	bne.n	8001fbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	4907      	ldr	r1, [pc, #28]	; (8001fd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8001fb6:	4808      	ldr	r0, [pc, #32]	; (8001fd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001fb8:	f008 faa2 	bl	800a500 <USBD_GetString>
 8001fbc:	e004      	b.n	8001fc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	4904      	ldr	r1, [pc, #16]	; (8001fd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001fc4:	f008 fa9c 	bl	800a500 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001fc8:	4b02      	ldr	r3, [pc, #8]	; (8001fd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000ef4 	.word	0x20000ef4
 8001fd8:	0800d634 	.word	0x0800d634

08001fdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <Get_SerialNum+0x44>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <Get_SerialNum+0x48>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <Get_SerialNum+0x4c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8002002:	2208      	movs	r2, #8
 8002004:	4909      	ldr	r1, [pc, #36]	; (800202c <Get_SerialNum+0x50>)
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f814 	bl	8002034 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800200c:	2204      	movs	r2, #4
 800200e:	4908      	ldr	r1, [pc, #32]	; (8002030 <Get_SerialNum+0x54>)
 8002010:	68b8      	ldr	r0, [r7, #8]
 8002012:	f000 f80f 	bl	8002034 <IntToUnicode>
  }
}
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	1ffff7e8 	.word	0x1ffff7e8
 8002024:	1ffff7ec 	.word	0x1ffff7ec
 8002028:	1ffff7f0 	.word	0x1ffff7f0
 800202c:	2000004a 	.word	0x2000004a
 8002030:	2000005a 	.word	0x2000005a

08002034 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8002034:	b480      	push	{r7}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	4613      	mov	r3, r2
 8002040:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8002046:	2300      	movs	r3, #0
 8002048:	75fb      	strb	r3, [r7, #23]
 800204a:	e027      	b.n	800209c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	0f1b      	lsrs	r3, r3, #28
 8002050:	2b09      	cmp	r3, #9
 8002052:	d80b      	bhi.n	800206c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	0f1b      	lsrs	r3, r3, #28
 8002058:	b2da      	uxtb	r2, r3
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4619      	mov	r1, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	440b      	add	r3, r1
 8002064:	3230      	adds	r2, #48	; 0x30
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	e00a      	b.n	8002082 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	0f1b      	lsrs	r3, r3, #28
 8002070:	b2da      	uxtb	r2, r3
 8002072:	7dfb      	ldrb	r3, [r7, #23]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4619      	mov	r1, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	440b      	add	r3, r1
 800207c:	3237      	adds	r2, #55	; 0x37
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	3301      	adds	r3, #1
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	4413      	add	r3, r2
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8002096:	7dfb      	ldrb	r3, [r7, #23]
 8002098:	3301      	adds	r3, #1
 800209a:	75fb      	strb	r3, [r7, #23]
 800209c:	7dfa      	ldrb	r2, [r7, #23]
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d3d3      	bcc.n	800204c <IntToUnicode+0x18>
  }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	371c      	adds	r7, #28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a11      	ldr	r2, [pc, #68]	; (8002104 <HAL_PCD_MspInit+0x54>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d11b      	bne.n	80020fa <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_PCD_MspInit+0x58>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	4a10      	ldr	r2, [pc, #64]	; (8002108 <HAL_PCD_MspInit+0x58>)
 80020c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020cc:	61d3      	str	r3, [r2, #28]
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_PCD_MspInit+0x58>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	2013      	movs	r0, #19
 80020e0:	f000 fbfb 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80020e4:	2013      	movs	r0, #19
 80020e6:	f000 fc14 	bl	8002912 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2014      	movs	r0, #20
 80020f0:	f000 fbf3 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80020f4:	2014      	movs	r0, #20
 80020f6:	f000 fc0c 	bl	8002912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40005c00 	.word	0x40005c00
 8002108:	40021000 	.word	0x40021000

0800210c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002120:	4619      	mov	r1, r3
 8002122:	4610      	mov	r0, r2
 8002124:	f007 fabc 	bl	80096a0 <USBD_LL_SetupStage>
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	440b      	add	r3, r1
 8002150:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	4619      	mov	r1, r3
 800215a:	f007 faee 	bl	800973a <USBD_LL_DataOutStage>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	333c      	adds	r3, #60	; 0x3c
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	4619      	mov	r1, r3
 800218e:	f007 fb45 	bl	800981c <USBD_LL_DataInStage>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80021a8:	4618      	mov	r0, r3
 80021aa:	f007 fc55 	bl	8009a58 <USBD_LL_SOF>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80021be:	2301      	movs	r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d001      	beq.n	80021ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80021ca:	f7ff fb29 	bl	8001820 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f007 fc05 	bl	80099e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80021e4:	4618      	mov	r0, r3
 80021e6:	f007 fbbe 	bl	8009966 <USBD_LL_Reset>
}
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8002202:	4618      	mov	r0, r3
 8002204:	f007 fbff 	bl	8009a06 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <HAL_PCD_SuspendCallback+0x30>)
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	4a03      	ldr	r2, [pc, #12]	; (8002224 <HAL_PCD_SuspendCallback+0x30>)
 8002216:	f043 0306 	orr.w	r3, r3, #6
 800221a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8002236:	4618      	mov	r0, r3
 8002238:	f007 fbf9 	bl	8009a2e <USBD_LL_Resume>
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800224c:	4a28      	ldr	r2, [pc, #160]	; (80022f0 <USBD_LL_Init+0xac>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <USBD_LL_Init+0xac>)
 8002258:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800225c:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <USBD_LL_Init+0xac>)
 800225e:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <USBD_LL_Init+0xb0>)
 8002260:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002262:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <USBD_LL_Init+0xac>)
 8002264:	2208      	movs	r2, #8
 8002266:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002268:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <USBD_LL_Init+0xac>)
 800226a:	2202      	movs	r2, #2
 800226c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <USBD_LL_Init+0xac>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002274:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <USBD_LL_Init+0xac>)
 8002276:	2200      	movs	r2, #0
 8002278:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800227a:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <USBD_LL_Init+0xac>)
 800227c:	2200      	movs	r2, #0
 800227e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002280:	481b      	ldr	r0, [pc, #108]	; (80022f0 <USBD_LL_Init+0xac>)
 8002282:	f000 fd14 	bl	8002cae <HAL_PCD_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800228c:	f7ff fac8 	bl	8001820 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002296:	2318      	movs	r3, #24
 8002298:	2200      	movs	r2, #0
 800229a:	2100      	movs	r1, #0
 800229c:	f002 f988 	bl	80045b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80022a6:	2358      	movs	r3, #88	; 0x58
 80022a8:	2200      	movs	r2, #0
 80022aa:	2180      	movs	r1, #128	; 0x80
 80022ac:	f002 f980 	bl	80045b0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80022b6:	23c0      	movs	r3, #192	; 0xc0
 80022b8:	2200      	movs	r2, #0
 80022ba:	2181      	movs	r1, #129	; 0x81
 80022bc:	f002 f978 	bl	80045b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80022c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80022ca:	2200      	movs	r2, #0
 80022cc:	2101      	movs	r1, #1
 80022ce:	f002 f96f 	bl	80045b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80022d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022dc:	2200      	movs	r2, #0
 80022de:	2182      	movs	r1, #130	; 0x82
 80022e0:	f002 f966 	bl	80045b0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200010f4 	.word	0x200010f4
 80022f4:	40005c00 	.word	0x40005c00

080022f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800230e:	4618      	mov	r0, r3
 8002310:	f000 fdd8 	bl	8002ec4 <HAL_PCD_Start>
 8002314:	4603      	mov	r3, r0
 8002316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f94e 	bl	80025bc <USBD_Get_USB_Status>
 8002320:	4603      	mov	r3, r0
 8002322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002324:	7bbb      	ldrb	r3, [r7, #14]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	4608      	mov	r0, r1
 8002338:	4611      	mov	r1, r2
 800233a:	461a      	mov	r2, r3
 800233c:	4603      	mov	r3, r0
 800233e:	70fb      	strb	r3, [r7, #3]
 8002340:	460b      	mov	r3, r1
 8002342:	70bb      	strb	r3, [r7, #2]
 8002344:	4613      	mov	r3, r2
 8002346:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002356:	78bb      	ldrb	r3, [r7, #2]
 8002358:	883a      	ldrh	r2, [r7, #0]
 800235a:	78f9      	ldrb	r1, [r7, #3]
 800235c:	f000 ff50 	bl	8003200 <HAL_PCD_EP_Open>
 8002360:	4603      	mov	r3, r0
 8002362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f928 	bl	80025bc <USBD_Get_USB_Status>
 800236c:	4603      	mov	r3, r0
 800236e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002370:	7bbb      	ldrb	r3, [r7, #14]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	460b      	mov	r3, r1
 8002384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f000 ff97 	bl	80032cc <HAL_PCD_EP_Close>
 800239e:	4603      	mov	r3, r0
 80023a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 f909 	bl	80025bc <USBD_Get_USB_Status>
 80023aa:	4603      	mov	r3, r0
 80023ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80023ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f001 f857 	bl	800348a <HAL_PCD_EP_SetStall>
 80023dc:	4603      	mov	r3, r0
 80023de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f8ea 	bl	80025bc <USBD_Get_USB_Status>
 80023e8:	4603      	mov	r3, r0
 80023ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80023ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	460b      	mov	r3, r1
 8002400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f001 f898 	bl	800354a <HAL_PCD_EP_ClrStall>
 800241a:	4603      	mov	r3, r0
 800241c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	4618      	mov	r0, r3
 8002422:	f000 f8cb 	bl	80025bc <USBD_Get_USB_Status>
 8002426:	4603      	mov	r3, r0
 8002428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800242a:	7bbb      	ldrb	r3, [r7, #14]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002446:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8002448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800244c:	2b00      	cmp	r3, #0
 800244e:	da0c      	bge.n	800246a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002456:	68f9      	ldr	r1, [r7, #12]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	3302      	adds	r3, #2
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	e00b      	b.n	8002482 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800246a:	78fb      	ldrb	r3, [r7, #3]
 800246c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002470:	68f9      	ldr	r1, [r7, #12]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8002480:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fe83 	bl	80031b6 <HAL_PCD_SetAddress>
 80024b0:	4603      	mov	r3, r0
 80024b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f880 	bl	80025bc <USBD_Get_USB_Status>
 80024bc:	4603      	mov	r3, r0
 80024be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80024c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	461a      	mov	r2, r3
 80024d6:	460b      	mov	r3, r1
 80024d8:	72fb      	strb	r3, [r7, #11]
 80024da:	4613      	mov	r3, r2
 80024dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80024ec:	893b      	ldrh	r3, [r7, #8]
 80024ee:	7af9      	ldrb	r1, [r7, #11]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	f000 ff87 	bl	8003404 <HAL_PCD_EP_Transmit>
 80024f6:	4603      	mov	r3, r0
 80024f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 f85d 	bl	80025bc <USBD_Get_USB_Status>
 8002502:	4603      	mov	r3, r0
 8002504:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8002506:	7dbb      	ldrb	r3, [r7, #22]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	461a      	mov	r2, r3
 800251c:	460b      	mov	r3, r1
 800251e:	72fb      	strb	r3, [r7, #11]
 8002520:	4613      	mov	r3, r2
 8002522:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002532:	893b      	ldrh	r3, [r7, #8]
 8002534:	7af9      	ldrb	r1, [r7, #11]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	f000 ff10 	bl	800335c <HAL_PCD_EP_Receive>
 800253c:	4603      	mov	r3, r0
 800253e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002540:	7dfb      	ldrb	r3, [r7, #23]
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f83a 	bl	80025bc <USBD_Get_USB_Status>
 8002548:	4603      	mov	r3, r0
 800254a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800254c:	7dbb      	ldrb	r3, [r7, #22]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f000 ff32 	bl	80033d6 <HAL_PCD_EP_GetRxCount>
 8002572:	4603      	mov	r3, r0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8002584:	4b02      	ldr	r3, [pc, #8]	; (8002590 <USBD_static_malloc+0x14>)
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	200013e0 	.word	0x200013e0

08002594 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d817      	bhi.n	8002600 <USBD_Get_USB_Status+0x44>
 80025d0:	a201      	add	r2, pc, #4	; (adr r2, 80025d8 <USBD_Get_USB_Status+0x1c>)
 80025d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d6:	bf00      	nop
 80025d8:	080025e9 	.word	0x080025e9
 80025dc:	080025ef 	.word	0x080025ef
 80025e0:	080025f5 	.word	0x080025f5
 80025e4:	080025fb 	.word	0x080025fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]
    break;
 80025ec:	e00b      	b.n	8002606 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80025ee:	2302      	movs	r3, #2
 80025f0:	73fb      	strb	r3, [r7, #15]
    break;
 80025f2:	e008      	b.n	8002606 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
    break;
 80025f8:	e005      	b.n	8002606 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80025fa:	2302      	movs	r3, #2
 80025fc:	73fb      	strb	r3, [r7, #15]
    break;
 80025fe:	e002      	b.n	8002606 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8002600:	2302      	movs	r3, #2
 8002602:	73fb      	strb	r3, [r7, #15]
    break;
 8002604:	bf00      	nop
  }
  return usb_status;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop

08002614 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_Init+0x28>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a07      	ldr	r2, [pc, #28]	; (8002648 <HAL_Init+0x28>)
 800262a:	f043 0310 	orr.w	r3, r3, #16
 800262e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002630:	2003      	movs	r0, #3
 8002632:	f000 f947 	bl	80028c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002636:	200f      	movs	r0, #15
 8002638:	f000 f808 	bl	800264c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800263c:	f7ff f8f6 	bl	800182c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40022000 	.word	0x40022000

0800264c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_InitTick+0x54>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <HAL_InitTick+0x58>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	4619      	mov	r1, r3
 800265e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002662:	fbb3 f3f1 	udiv	r3, r3, r1
 8002666:	fbb2 f3f3 	udiv	r3, r2, r3
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f95f 	bl	800292e <HAL_SYSTICK_Config>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e00e      	b.n	8002698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b0f      	cmp	r3, #15
 800267e:	d80a      	bhi.n	8002696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002680:	2200      	movs	r2, #0
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f000 f927 	bl	80028da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800268c:	4a06      	ldr	r2, [pc, #24]	; (80026a8 <HAL_InitTick+0x5c>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
}
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000064 	.word	0x20000064
 80026a4:	2000006c 	.word	0x2000006c
 80026a8:	20000068 	.word	0x20000068

080026ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_IncTick+0x1c>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_IncTick+0x20>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	4a03      	ldr	r2, [pc, #12]	; (80026cc <HAL_IncTick+0x20>)
 80026be:	6013      	str	r3, [r2, #0]
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	2000006c 	.word	0x2000006c
 80026cc:	20001600 	.word	0x20001600

080026d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return uwTick;
 80026d4:	4b02      	ldr	r3, [pc, #8]	; (80026e0 <HAL_GetTick+0x10>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	20001600 	.word	0x20001600

080026e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff fff0 	bl	80026d0 <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d005      	beq.n	800270a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_Delay+0x44>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800270a:	bf00      	nop
 800270c:	f7ff ffe0 	bl	80026d0 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d8f7      	bhi.n	800270c <HAL_Delay+0x28>
  {
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	2000006c 	.word	0x2000006c

0800272c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275e:	4a04      	ldr	r2, [pc, #16]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	60d3      	str	r3, [r2, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db0b      	blt.n	80027ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4906      	ldr	r1, [pc, #24]	; (80027c4 <__NVIC_EnableIRQ+0x34>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	e000e100 	.word	0xe000e100

080027c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	6039      	str	r1, [r7, #0]
 80027d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	db0a      	blt.n	80027f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	490c      	ldr	r1, [pc, #48]	; (8002814 <__NVIC_SetPriority+0x4c>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	0112      	lsls	r2, r2, #4
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	440b      	add	r3, r1
 80027ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f0:	e00a      	b.n	8002808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4908      	ldr	r1, [pc, #32]	; (8002818 <__NVIC_SetPriority+0x50>)
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	3b04      	subs	r3, #4
 8002800:	0112      	lsls	r2, r2, #4
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	440b      	add	r3, r1
 8002806:	761a      	strb	r2, [r3, #24]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000e100 	.word	0xe000e100
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f1c3 0307 	rsb	r3, r3, #7
 8002836:	2b04      	cmp	r3, #4
 8002838:	bf28      	it	cs
 800283a:	2304      	movcs	r3, #4
 800283c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3304      	adds	r3, #4
 8002842:	2b06      	cmp	r3, #6
 8002844:	d902      	bls.n	800284c <NVIC_EncodePriority+0x30>
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3b03      	subs	r3, #3
 800284a:	e000      	b.n	800284e <NVIC_EncodePriority+0x32>
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	f04f 32ff 	mov.w	r2, #4294967295
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	401a      	ands	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002864:	f04f 31ff 	mov.w	r1, #4294967295
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	43d9      	mvns	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002874:	4313      	orrs	r3, r2
         );
}
 8002876:	4618      	mov	r0, r3
 8002878:	3724      	adds	r7, #36	; 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002890:	d301      	bcc.n	8002896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002892:	2301      	movs	r3, #1
 8002894:	e00f      	b.n	80028b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002896:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <SysTick_Config+0x40>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289e:	210f      	movs	r1, #15
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	f7ff ff90 	bl	80027c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <SysTick_Config+0x40>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ae:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <SysTick_Config+0x40>)
 80028b0:	2207      	movs	r2, #7
 80028b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	e000e010 	.word	0xe000e010

080028c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff2d 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ec:	f7ff ff42 	bl	8002774 <__NVIC_GetPriorityGrouping>
 80028f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	6978      	ldr	r0, [r7, #20]
 80028f8:	f7ff ff90 	bl	800281c <NVIC_EncodePriority>
 80028fc:	4602      	mov	r2, r0
 80028fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff5f 	bl	80027c8 <__NVIC_SetPriority>
}
 800290a:	bf00      	nop
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff35 	bl	8002790 <__NVIC_EnableIRQ>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ffa2 	bl	8002880 <SysTick_Config>
 800293c:	4603      	mov	r3, r0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002948:	b480      	push	{r7}
 800294a:	b08b      	sub	sp, #44	; 0x2c
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295a:	e169      	b.n	8002c30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800295c:	2201      	movs	r2, #1
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	429a      	cmp	r2, r3
 8002976:	f040 8158 	bne.w	8002c2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4a9a      	ldr	r2, [pc, #616]	; (8002be8 <HAL_GPIO_Init+0x2a0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d05e      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 8002984:	4a98      	ldr	r2, [pc, #608]	; (8002be8 <HAL_GPIO_Init+0x2a0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d875      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 800298a:	4a98      	ldr	r2, [pc, #608]	; (8002bec <HAL_GPIO_Init+0x2a4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d058      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 8002990:	4a96      	ldr	r2, [pc, #600]	; (8002bec <HAL_GPIO_Init+0x2a4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d86f      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 8002996:	4a96      	ldr	r2, [pc, #600]	; (8002bf0 <HAL_GPIO_Init+0x2a8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d052      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 800299c:	4a94      	ldr	r2, [pc, #592]	; (8002bf0 <HAL_GPIO_Init+0x2a8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d869      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 80029a2:	4a94      	ldr	r2, [pc, #592]	; (8002bf4 <HAL_GPIO_Init+0x2ac>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d04c      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 80029a8:	4a92      	ldr	r2, [pc, #584]	; (8002bf4 <HAL_GPIO_Init+0x2ac>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d863      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 80029ae:	4a92      	ldr	r2, [pc, #584]	; (8002bf8 <HAL_GPIO_Init+0x2b0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d046      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 80029b4:	4a90      	ldr	r2, [pc, #576]	; (8002bf8 <HAL_GPIO_Init+0x2b0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d85d      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 80029ba:	2b12      	cmp	r3, #18
 80029bc:	d82a      	bhi.n	8002a14 <HAL_GPIO_Init+0xcc>
 80029be:	2b12      	cmp	r3, #18
 80029c0:	d859      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 80029c2:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <HAL_GPIO_Init+0x80>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	08002a43 	.word	0x08002a43
 80029cc:	08002a1d 	.word	0x08002a1d
 80029d0:	08002a2f 	.word	0x08002a2f
 80029d4:	08002a71 	.word	0x08002a71
 80029d8:	08002a77 	.word	0x08002a77
 80029dc:	08002a77 	.word	0x08002a77
 80029e0:	08002a77 	.word	0x08002a77
 80029e4:	08002a77 	.word	0x08002a77
 80029e8:	08002a77 	.word	0x08002a77
 80029ec:	08002a77 	.word	0x08002a77
 80029f0:	08002a77 	.word	0x08002a77
 80029f4:	08002a77 	.word	0x08002a77
 80029f8:	08002a77 	.word	0x08002a77
 80029fc:	08002a77 	.word	0x08002a77
 8002a00:	08002a77 	.word	0x08002a77
 8002a04:	08002a77 	.word	0x08002a77
 8002a08:	08002a77 	.word	0x08002a77
 8002a0c:	08002a25 	.word	0x08002a25
 8002a10:	08002a39 	.word	0x08002a39
 8002a14:	4a79      	ldr	r2, [pc, #484]	; (8002bfc <HAL_GPIO_Init+0x2b4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a1a:	e02c      	b.n	8002a76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	623b      	str	r3, [r7, #32]
          break;
 8002a22:	e029      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	623b      	str	r3, [r7, #32]
          break;
 8002a2c:	e024      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	3308      	adds	r3, #8
 8002a34:	623b      	str	r3, [r7, #32]
          break;
 8002a36:	e01f      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	330c      	adds	r3, #12
 8002a3e:	623b      	str	r3, [r7, #32]
          break;
 8002a40:	e01a      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d102      	bne.n	8002a50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	623b      	str	r3, [r7, #32]
          break;
 8002a4e:	e013      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d105      	bne.n	8002a64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a58:	2308      	movs	r3, #8
 8002a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	611a      	str	r2, [r3, #16]
          break;
 8002a62:	e009      	b.n	8002a78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a64:	2308      	movs	r3, #8
 8002a66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	615a      	str	r2, [r3, #20]
          break;
 8002a6e:	e003      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a70:	2300      	movs	r3, #0
 8002a72:	623b      	str	r3, [r7, #32]
          break;
 8002a74:	e000      	b.n	8002a78 <HAL_GPIO_Init+0x130>
          break;
 8002a76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	2bff      	cmp	r3, #255	; 0xff
 8002a7c:	d801      	bhi.n	8002a82 <HAL_GPIO_Init+0x13a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	e001      	b.n	8002a86 <HAL_GPIO_Init+0x13e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3304      	adds	r3, #4
 8002a86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2bff      	cmp	r3, #255	; 0xff
 8002a8c:	d802      	bhi.n	8002a94 <HAL_GPIO_Init+0x14c>
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	e002      	b.n	8002a9a <HAL_GPIO_Init+0x152>
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	3b08      	subs	r3, #8
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	210f      	movs	r1, #15
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	401a      	ands	r2, r3
 8002aac:	6a39      	ldr	r1, [r7, #32]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 80b1 	beq.w	8002c2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ac8:	4b4d      	ldr	r3, [pc, #308]	; (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4a4c      	ldr	r2, [pc, #304]	; (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6193      	str	r3, [r2, #24]
 8002ad4:	4b4a      	ldr	r3, [pc, #296]	; (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ae0:	4a48      	ldr	r2, [pc, #288]	; (8002c04 <HAL_GPIO_Init+0x2bc>)
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	220f      	movs	r2, #15
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4013      	ands	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a40      	ldr	r2, [pc, #256]	; (8002c08 <HAL_GPIO_Init+0x2c0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d013      	beq.n	8002b34 <HAL_GPIO_Init+0x1ec>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a3f      	ldr	r2, [pc, #252]	; (8002c0c <HAL_GPIO_Init+0x2c4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d00d      	beq.n	8002b30 <HAL_GPIO_Init+0x1e8>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a3e      	ldr	r2, [pc, #248]	; (8002c10 <HAL_GPIO_Init+0x2c8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d007      	beq.n	8002b2c <HAL_GPIO_Init+0x1e4>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a3d      	ldr	r2, [pc, #244]	; (8002c14 <HAL_GPIO_Init+0x2cc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d101      	bne.n	8002b28 <HAL_GPIO_Init+0x1e0>
 8002b24:	2303      	movs	r3, #3
 8002b26:	e006      	b.n	8002b36 <HAL_GPIO_Init+0x1ee>
 8002b28:	2304      	movs	r3, #4
 8002b2a:	e004      	b.n	8002b36 <HAL_GPIO_Init+0x1ee>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e002      	b.n	8002b36 <HAL_GPIO_Init+0x1ee>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <HAL_GPIO_Init+0x1ee>
 8002b34:	2300      	movs	r3, #0
 8002b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b38:	f002 0203 	and.w	r2, r2, #3
 8002b3c:	0092      	lsls	r2, r2, #2
 8002b3e:	4093      	lsls	r3, r2
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b46:	492f      	ldr	r1, [pc, #188]	; (8002c04 <HAL_GPIO_Init+0x2bc>)
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b60:	4b2d      	ldr	r3, [pc, #180]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	492c      	ldr	r1, [pc, #176]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]
 8002b6c:	e006      	b.n	8002b7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b6e:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	4928      	ldr	r1, [pc, #160]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d006      	beq.n	8002b96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b88:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	4922      	ldr	r1, [pc, #136]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
 8002b94:	e006      	b.n	8002ba4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	491e      	ldr	r1, [pc, #120]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d006      	beq.n	8002bbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bb0:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	4918      	ldr	r1, [pc, #96]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	608b      	str	r3, [r1, #8]
 8002bbc:	e006      	b.n	8002bcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bbe:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	4914      	ldr	r1, [pc, #80]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d021      	beq.n	8002c1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	490e      	ldr	r1, [pc, #56]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60cb      	str	r3, [r1, #12]
 8002be4:	e021      	b.n	8002c2a <HAL_GPIO_Init+0x2e2>
 8002be6:	bf00      	nop
 8002be8:	10320000 	.word	0x10320000
 8002bec:	10310000 	.word	0x10310000
 8002bf0:	10220000 	.word	0x10220000
 8002bf4:	10210000 	.word	0x10210000
 8002bf8:	10120000 	.word	0x10120000
 8002bfc:	10110000 	.word	0x10110000
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40010000 	.word	0x40010000
 8002c08:	40010800 	.word	0x40010800
 8002c0c:	40010c00 	.word	0x40010c00
 8002c10:	40011000 	.word	0x40011000
 8002c14:	40011400 	.word	0x40011400
 8002c18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_GPIO_Init+0x304>)
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	4909      	ldr	r1, [pc, #36]	; (8002c4c <HAL_GPIO_Init+0x304>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f47f ae8e 	bne.w	800295c <HAL_GPIO_Init+0x14>
  }
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	372c      	adds	r7, #44	; 0x2c
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	40010400 	.word	0x40010400

08002c50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	887b      	ldrh	r3, [r7, #2]
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
 8002c6c:	e001      	b.n	8002c72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	460b      	mov	r3, r1
 8002c88:	807b      	strh	r3, [r7, #2]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c8e:	787b      	ldrb	r3, [r7, #1]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c94:	887a      	ldrh	r2, [r7, #2]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c9a:	e003      	b.n	8002ca4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c9c:	887b      	ldrh	r3, [r7, #2]
 8002c9e:	041a      	lsls	r2, r3, #16
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	611a      	str	r2, [r3, #16]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb0:	b08b      	sub	sp, #44	; 0x2c
 8002cb2:	af06      	add	r7, sp, #24
 8002cb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0fd      	b.n	8002ebc <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d106      	bne.n	8002cda <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff f9eb 	bl	80020b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2203      	movs	r2, #3
 8002cde:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f003 fbb8 	bl	800645c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	687e      	ldr	r6, [r7, #4]
 8002cf4:	466d      	mov	r5, sp
 8002cf6:	f106 0410 	add.w	r4, r6, #16
 8002cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	602b      	str	r3, [r5, #0]
 8002d02:	1d33      	adds	r3, r6, #4
 8002d04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d06:	6838      	ldr	r0, [r7, #0]
 8002d08:	f003 fb82 	bl	8006410 <USB_CoreInit>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2202      	movs	r2, #2
 8002d16:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e0ce      	b.n	8002ebc <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2100      	movs	r1, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f003 fbb3 	bl	8006490 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	73fb      	strb	r3, [r7, #15]
 8002d2e:	e04c      	b.n	8002dca <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	3301      	adds	r3, #1
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	7bfa      	ldrb	r2, [r7, #15]
 8002d58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	b298      	uxth	r0, r3
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3336      	adds	r3, #54	; 0x36
 8002d6e:	4602      	mov	r2, r0
 8002d70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	3303      	adds	r3, #3
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d88:	7bfa      	ldrb	r2, [r7, #15]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	440b      	add	r3, r1
 8002d96:	3338      	adds	r3, #56	; 0x38
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d9c:	7bfa      	ldrb	r2, [r7, #15]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	333c      	adds	r3, #60	; 0x3c
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3340      	adds	r3, #64	; 0x40
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
 8002dca:	7bfa      	ldrb	r2, [r7, #15]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d3ad      	bcc.n	8002d30 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	73fb      	strb	r3, [r7, #15]
 8002dd8:	e044      	b.n	8002e64 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dda:	7bfa      	ldrb	r2, [r7, #15]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	440b      	add	r3, r1
 8002de8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002df0:	7bfa      	ldrb	r2, [r7, #15]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	440b      	add	r3, r1
 8002dfe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e02:	7bfa      	ldrb	r2, [r7, #15]
 8002e04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e06:	7bfa      	ldrb	r2, [r7, #15]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	440b      	add	r3, r1
 8002e14:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e1c:	7bfa      	ldrb	r2, [r7, #15]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	440b      	add	r3, r1
 8002e2a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e32:	7bfa      	ldrb	r2, [r7, #15]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	440b      	add	r3, r1
 8002e40:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	440b      	add	r3, r1
 8002e56:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	3301      	adds	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d3b5      	bcc.n	8002dda <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	687e      	ldr	r6, [r7, #4]
 8002e76:	466d      	mov	r5, sp
 8002e78:	f106 0410 	add.w	r4, r6, #16
 8002e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	602b      	str	r3, [r5, #0]
 8002e84:	1d33      	adds	r3, r6, #4
 8002e86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e88:	6838      	ldr	r0, [r7, #0]
 8002e8a:	f003 fb0d 	bl	80064a8 <USB_DevInit>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e00d      	b.n	8002ebc <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f005 ffbf 	bl	8008e38 <USB_DevDisconnect>

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ec4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_PCD_Start+0x16>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e016      	b.n	8002f08 <HAL_PCD_Start+0x44>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f003 faa2 	bl	8006430 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002eec:	2101      	movs	r1, #1
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff fb59 	bl	80025a6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f005 ff93 	bl	8008e24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f005 ff95 	bl	8008e4c <USB_ReadInterrupts>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f2c:	d102      	bne.n	8002f34 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fb5f 	bl	80035f2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f005 ff87 	bl	8008e4c <USB_ReadInterrupts>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f48:	d112      	bne.n	8002f70 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f5c:	b292      	uxth	r2, r2
 8002f5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff f927 	bl	80021b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002f68:	2100      	movs	r1, #0
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f923 	bl	80031b6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f005 ff69 	bl	8008e4c <USB_ReadInterrupts>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f84:	d10b      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f98:	b292      	uxth	r2, r2
 8002f9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f005 ff52 	bl	8008e4c <USB_ReadInterrupts>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb2:	d10b      	bne.n	8002fcc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fc6:	b292      	uxth	r2, r2
 8002fc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f005 ff3b 	bl	8008e4c <USB_ReadInterrupts>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe0:	d126      	bne.n	8003030 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0204 	bic.w	r2, r2, #4
 8002ff4:	b292      	uxth	r2, r2
 8002ff6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003002:	b29a      	uxth	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0208 	bic.w	r2, r2, #8
 800300c:	b292      	uxth	r2, r2
 800300e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff f908 	bl	8002228 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003020:	b29a      	uxth	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800302a:	b292      	uxth	r2, r2
 800302c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f005 ff09 	bl	8008e4c <USB_ReadInterrupts>
 800303a:	4603      	mov	r3, r0
 800303c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003044:	f040 8082 	bne.w	800314c <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003048:	2300      	movs	r3, #0
 800304a:	77fb      	strb	r3, [r7, #31]
 800304c:	e010      	b.n	8003070 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	7ffb      	ldrb	r3, [r7, #31]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	441a      	add	r2, r3
 800305a:	7ffb      	ldrb	r3, [r7, #31]
 800305c:	8812      	ldrh	r2, [r2, #0]
 800305e:	b292      	uxth	r2, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	3320      	adds	r3, #32
 8003064:	443b      	add	r3, r7
 8003066:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800306a:	7ffb      	ldrb	r3, [r7, #31]
 800306c:	3301      	adds	r3, #1
 800306e:	77fb      	strb	r3, [r7, #31]
 8003070:	7ffb      	ldrb	r3, [r7, #31]
 8003072:	2b07      	cmp	r3, #7
 8003074:	d9eb      	bls.n	800304e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800307e:	b29a      	uxth	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	b292      	uxth	r2, r2
 800308a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003096:	b29a      	uxth	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	b292      	uxth	r2, r2
 80030a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80030a6:	bf00      	nop
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f6      	beq.n	80030a8 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030cc:	b292      	uxth	r2, r2
 80030ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80030d2:	2300      	movs	r3, #0
 80030d4:	77fb      	strb	r3, [r7, #31]
 80030d6:	e00f      	b.n	80030f8 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80030d8:	7ffb      	ldrb	r3, [r7, #31]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	4611      	mov	r1, r2
 80030e0:	7ffa      	ldrb	r2, [r7, #31]
 80030e2:	0092      	lsls	r2, r2, #2
 80030e4:	440a      	add	r2, r1
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	3320      	adds	r3, #32
 80030ea:	443b      	add	r3, r7
 80030ec:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80030f0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80030f2:	7ffb      	ldrb	r3, [r7, #31]
 80030f4:	3301      	adds	r3, #1
 80030f6:	77fb      	strb	r3, [r7, #31]
 80030f8:	7ffb      	ldrb	r3, [r7, #31]
 80030fa:	2b07      	cmp	r3, #7
 80030fc:	d9ec      	bls.n	80030d8 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003106:	b29a      	uxth	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0208 	orr.w	r2, r2, #8
 8003110:	b292      	uxth	r2, r2
 8003112:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800311e:	b29a      	uxth	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003128:	b292      	uxth	r2, r2
 800312a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003136:	b29a      	uxth	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0204 	orr.w	r2, r2, #4
 8003140:	b292      	uxth	r2, r2
 8003142:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff f854 	bl	80021f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f005 fe7b 	bl	8008e4c <USB_ReadInterrupts>
 8003156:	4603      	mov	r3, r0
 8003158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800315c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003160:	d10e      	bne.n	8003180 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800316a:	b29a      	uxth	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003174:	b292      	uxth	r2, r2
 8003176:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff f80d 	bl	800219a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f005 fe61 	bl	8008e4c <USB_ReadInterrupts>
 800318a:	4603      	mov	r3, r0
 800318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003194:	d10b      	bne.n	80031ae <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800319e:	b29a      	uxth	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031a8:	b292      	uxth	r2, r2
 80031aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80031ae:	bf00      	nop
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_PCD_SetAddress+0x1a>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e013      	b.n	80031f8 <HAL_PCD_SetAddress+0x42>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f005 fe08 	bl	8008dfe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	4608      	mov	r0, r1
 800320a:	4611      	mov	r1, r2
 800320c:	461a      	mov	r2, r3
 800320e:	4603      	mov	r3, r0
 8003210:	70fb      	strb	r3, [r7, #3]
 8003212:	460b      	mov	r3, r1
 8003214:	803b      	strh	r3, [r7, #0]
 8003216:	4613      	mov	r3, r2
 8003218:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800321e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003222:	2b00      	cmp	r3, #0
 8003224:	da0e      	bge.n	8003244 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	705a      	strb	r2, [r3, #1]
 8003242:	e00e      	b.n	8003262 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	f003 0207 	and.w	r2, r3, #7
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	b2da      	uxtb	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800326e:	883a      	ldrh	r2, [r7, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	78ba      	ldrb	r2, [r7, #2]
 8003278:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	785b      	ldrb	r3, [r3, #1]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d004      	beq.n	800328c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800328c:	78bb      	ldrb	r3, [r7, #2]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d102      	bne.n	8003298 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_PCD_EP_Open+0xa6>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e00e      	b.n	80032c4 <HAL_PCD_EP_Open+0xc4>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68f9      	ldr	r1, [r7, #12]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f003 f917 	bl	80064e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80032c2:	7afb      	ldrb	r3, [r7, #11]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	da0e      	bge.n	80032fe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	4413      	add	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	705a      	strb	r2, [r3, #1]
 80032fc:	e00e      	b.n	800331c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032fe:	78fb      	ldrb	r3, [r7, #3]
 8003300:	f003 0207 	and.w	r2, r3, #7
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	b2da      	uxtb	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_PCD_EP_Close+0x6a>
 8003332:	2302      	movs	r3, #2
 8003334:	e00e      	b.n	8003354 <HAL_PCD_EP_Close+0x88>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68f9      	ldr	r1, [r7, #12]
 8003344:	4618      	mov	r0, r3
 8003346:	f003 fc39 	bl	8006bbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	460b      	mov	r3, r1
 800336a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800336c:	7afb      	ldrb	r3, [r7, #11]
 800336e:	f003 0207 	and.w	r2, r3, #7
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4413      	add	r3, r2
 8003382:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2200      	movs	r2, #0
 8003394:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2200      	movs	r2, #0
 800339a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800339c:	7afb      	ldrb	r3, [r7, #11]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033a8:	7afb      	ldrb	r3, [r7, #11]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6979      	ldr	r1, [r7, #20]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f003 fdeb 	bl	8006f94 <USB_EPStartXfer>
 80033be:	e005      	b.n	80033cc <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6979      	ldr	r1, [r7, #20]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f003 fde4 	bl	8006f94 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	460b      	mov	r3, r1
 80033e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033e2:	78fb      	ldrb	r3, [r7, #3]
 80033e4:	f003 0207 	and.w	r2, r3, #7
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	440b      	add	r3, r1
 80033f4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80033f8:	681b      	ldr	r3, [r3, #0]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	460b      	mov	r3, r1
 8003412:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003414:	7afb      	ldrb	r3, [r7, #11]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2200      	movs	r2, #0
 8003448:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2201      	movs	r2, #1
 800344e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003450:	7afb      	ldrb	r3, [r7, #11]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	b2da      	uxtb	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800345c:	7afb      	ldrb	r3, [r7, #11]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6979      	ldr	r1, [r7, #20]
 800346c:	4618      	mov	r0, r3
 800346e:	f003 fd91 	bl	8006f94 <USB_EPStartXfer>
 8003472:	e005      	b.n	8003480 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6979      	ldr	r1, [r7, #20]
 800347a:	4618      	mov	r0, r3
 800347c:	f003 fd8a 	bl	8006f94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	460b      	mov	r3, r1
 8003494:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003496:	78fb      	ldrb	r3, [r7, #3]
 8003498:	f003 0207 	and.w	r2, r3, #7
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d901      	bls.n	80034a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e04c      	b.n	8003542 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	da0e      	bge.n	80034ce <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	4413      	add	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	705a      	strb	r2, [r3, #1]
 80034cc:	e00c      	b.n	80034e8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	4413      	add	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_PCD_EP_SetStall+0x7e>
 8003504:	2302      	movs	r3, #2
 8003506:	e01c      	b.n	8003542 <HAL_PCD_EP_SetStall+0xb8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68f9      	ldr	r1, [r7, #12]
 8003516:	4618      	mov	r0, r3
 8003518:	f005 fb74 	bl	8008c04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	2b00      	cmp	r3, #0
 8003524:	d108      	bne.n	8003538 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f005 fc99 	bl	8008e6a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	460b      	mov	r3, r1
 8003554:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	f003 020f 	and.w	r2, r3, #15
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	d901      	bls.n	8003568 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e040      	b.n	80035ea <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800356c:	2b00      	cmp	r3, #0
 800356e:	da0e      	bge.n	800358e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4413      	add	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	705a      	strb	r2, [r3, #1]
 800358c:	e00e      	b.n	80035ac <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800358e:	78fb      	ldrb	r3, [r7, #3]
 8003590:	f003 0207 	and.w	r2, r3, #7
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4413      	add	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035b2:	78fb      	ldrb	r3, [r7, #3]
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_PCD_EP_ClrStall+0x82>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e00e      	b.n	80035ea <HAL_PCD_EP_ClrStall+0xa0>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68f9      	ldr	r1, [r7, #12]
 80035da:	4618      	mov	r0, r3
 80035dc:	f005 fb62 	bl	8008ca4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b08e      	sub	sp, #56	; 0x38
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035fa:	e2ec      	b.n	8003bd6 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003604:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003606:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003608:	b2db      	uxtb	r3, r3
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003612:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 8161 	bne.w	80038de <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800361c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	d152      	bne.n	80036cc <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	81fb      	strh	r3, [r7, #14]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	89fb      	ldrh	r3, [r7, #14]
 800363e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003646:	b29b      	uxth	r3, r3
 8003648:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3328      	adds	r3, #40	; 0x28
 800364e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003658:	b29b      	uxth	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	3302      	adds	r3, #2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	441a      	add	r2, r3
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800368a:	2100      	movs	r1, #0
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7fe fd6a 	bl	8002166 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 829b 	beq.w	8003bd6 <PCD_EP_ISR_Handler+0x5e4>
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f040 8296 	bne.w	8003bd6 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	b292      	uxth	r2, r2
 80036be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80036ca:	e284      	b.n	8003bd6 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80036dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d034      	beq.n	8003750 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	3306      	adds	r3, #6
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003724:	b29b      	uxth	r3, r3
 8003726:	f005 fbf0 	bl	8008f0a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	b29a      	uxth	r2, r3
 8003732:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003736:	4013      	ands	r3, r2
 8003738:	823b      	strh	r3, [r7, #16]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	8a3a      	ldrh	r2, [r7, #16]
 8003740:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003744:	b292      	uxth	r2, r2
 8003746:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7fe fcdf 	bl	800210c <HAL_PCD_SetupStageCallback>
 800374e:	e242      	b.n	8003bd6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003750:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003754:	2b00      	cmp	r3, #0
 8003756:	f280 823e 	bge.w	8003bd6 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	b29a      	uxth	r2, r3
 8003762:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003766:	4013      	ands	r3, r2
 8003768:	83bb      	strh	r3, [r7, #28]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	8bba      	ldrh	r2, [r7, #28]
 8003770:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003774:	b292      	uxth	r2, r2
 8003776:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003780:	b29b      	uxth	r3, r3
 8003782:	461a      	mov	r2, r3
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	3306      	adds	r3, #6
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d019      	beq.n	80037e0 <PCD_EP_ISR_Handler+0x1ee>
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d015      	beq.n	80037e0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	6959      	ldr	r1, [r3, #20]
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f005 fba0 	bl	8008f0a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	441a      	add	r2, r3
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80037d8:	2100      	movs	r1, #0
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fe fca8 	bl	8002130 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f040 81f2 	bne.w	8003bd6 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003800:	b29b      	uxth	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	4413      	add	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d112      	bne.n	8003840 <PCD_EP_ISR_Handler+0x24e>
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	b29b      	uxth	r3, r3
 8003820:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003824:	b29a      	uxth	r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	801a      	strh	r2, [r3, #0]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003838:	b29a      	uxth	r2, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	801a      	strh	r2, [r3, #0]
 800383e:	e02f      	b.n	80038a0 <PCD_EP_ISR_Handler+0x2ae>
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b3e      	cmp	r3, #62	; 0x3e
 8003846:	d813      	bhi.n	8003870 <PCD_EP_ISR_Handler+0x27e>
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	085b      	lsrs	r3, r3, #1
 800384e:	633b      	str	r3, [r7, #48]	; 0x30
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <PCD_EP_ISR_Handler+0x270>
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	3301      	adds	r3, #1
 8003860:	633b      	str	r3, [r7, #48]	; 0x30
 8003862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003864:	b29b      	uxth	r3, r3
 8003866:	029b      	lsls	r3, r3, #10
 8003868:	b29a      	uxth	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	801a      	strh	r2, [r3, #0]
 800386e:	e017      	b.n	80038a0 <PCD_EP_ISR_Handler+0x2ae>
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	633b      	str	r3, [r7, #48]	; 0x30
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <PCD_EP_ISR_Handler+0x298>
 8003884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003886:	3b01      	subs	r3, #1
 8003888:	633b      	str	r3, [r7, #48]	; 0x30
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	b29b      	uxth	r3, r3
 800388e:	029b      	lsls	r3, r3, #10
 8003890:	b29b      	uxth	r3, r3
 8003892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800389a:	b29a      	uxth	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b0:	827b      	strh	r3, [r7, #18]
 80038b2:	8a7b      	ldrh	r3, [r7, #18]
 80038b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80038b8:	827b      	strh	r3, [r7, #18]
 80038ba:	8a7b      	ldrh	r3, [r7, #18]
 80038bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80038c0:	827b      	strh	r3, [r7, #18]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	8a7b      	ldrh	r3, [r7, #18]
 80038c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d8:	b29b      	uxth	r3, r3
 80038da:	8013      	strh	r3, [r2, #0]
 80038dc:	e17b      	b.n	8003bd6 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038f0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f280 80ea 	bge.w	8003ace <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	b29a      	uxth	r2, r3
 800390c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003910:	4013      	ands	r3, r2
 8003912:	853b      	strh	r3, [r7, #40]	; 0x28
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003924:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003928:	b292      	uxth	r2, r2
 800392a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800392c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	7b1b      	ldrb	r3, [r3, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d122      	bne.n	8003990 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003952:	b29b      	uxth	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4413      	add	r3, r2
 800395e:	3306      	adds	r3, #6
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6812      	ldr	r2, [r2, #0]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003972:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003974:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8087 	beq.w	8003a8a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	6959      	ldr	r1, [r3, #20]
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	88da      	ldrh	r2, [r3, #6]
 8003988:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800398a:	f005 fabe 	bl	8008f0a <USB_ReadPMA>
 800398e:	e07c      	b.n	8003a8a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	78db      	ldrb	r3, [r3, #3]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d108      	bne.n	80039aa <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003998:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800399a:	461a      	mov	r2, r3
 800399c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f927 	bl	8003bf2 <HAL_PCD_EP_DB_Receive>
 80039a4:	4603      	mov	r3, r0
 80039a6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80039a8:	e06f      	b.n	8003a8a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c4:	847b      	strh	r3, [r7, #34]	; 0x22
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	441a      	add	r2, r3
 80039d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d021      	beq.n	8003a48 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	4413      	add	r3, r2
 8003a18:	3302      	adds	r3, #2
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a2c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003a2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d02a      	beq.n	8003a8a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	6959      	ldr	r1, [r3, #20]
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	891a      	ldrh	r2, [r3, #8]
 8003a40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a42:	f005 fa62 	bl	8008f0a <USB_ReadPMA>
 8003a46:	e020      	b.n	8003a8a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	461a      	mov	r2, r3
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3306      	adds	r3, #6
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a70:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003a72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	6959      	ldr	r1, [r3, #20]
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	895a      	ldrh	r2, [r3, #10]
 8003a84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a86:	f005 fa40 	bl	8008f0a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	69da      	ldr	r2, [r3, #28]
 8003a8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a90:	441a      	add	r2, r3
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a9c:	441a      	add	r2, r3
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <PCD_EP_ISR_Handler+0x4c2>
 8003aaa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d206      	bcs.n	8003ac2 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	4619      	mov	r1, r3
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fe fb38 	bl	8002130 <HAL_PCD_DataOutStageCallback>
 8003ac0:	e005      	b.n	8003ace <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f003 fa63 	bl	8006f94 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003ace:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d07e      	beq.n	8003bd6 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003ad8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	4613      	mov	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	4413      	add	r3, r2
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b06:	843b      	strh	r3, [r7, #32]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	441a      	add	r2, r3
 8003b16:	8c3b      	ldrh	r3, [r7, #32]
 8003b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	78db      	ldrb	r3, [r3, #3]
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d00c      	beq.n	8003b46 <PCD_EP_ISR_Handler+0x554>
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	78db      	ldrb	r3, [r3, #3]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d146      	bne.n	8003bca <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003b3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d141      	bne.n	8003bca <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4413      	add	r3, r2
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b6e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	8bfb      	ldrh	r3, [r7, #30]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d906      	bls.n	8003b88 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	8bfb      	ldrh	r3, [r7, #30]
 8003b80:	1ad2      	subs	r2, r2, r3
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	619a      	str	r2, [r3, #24]
 8003b86:	e002      	b.n	8003b8e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7fe fae2 	bl	8002166 <HAL_PCD_DataInStageCallback>
 8003ba2:	e018      	b.n	8003bd6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	8bfb      	ldrh	r3, [r7, #30]
 8003baa:	441a      	add	r2, r3
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	69da      	ldr	r2, [r3, #28]
 8003bb4:	8bfb      	ldrh	r3, [r7, #30]
 8003bb6:	441a      	add	r2, r3
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f003 f9e6 	bl	8006f94 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003bc8:	e005      	b.n	8003bd6 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003bca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003bcc:	461a      	mov	r2, r3
 8003bce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f91b 	bl	8003e0c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	b21b      	sxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f6ff ad0a 	blt.w	80035fc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3738      	adds	r7, #56	; 0x38
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b088      	sub	sp, #32
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d07e      	beq.n	8003d08 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3302      	adds	r3, #2
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c32:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	699a      	ldr	r2, [r3, #24]
 8003c38:	8b7b      	ldrh	r3, [r7, #26]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d306      	bcc.n	8003c4c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	8b7b      	ldrh	r3, [r7, #26]
 8003c44:	1ad2      	subs	r2, r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	619a      	str	r2, [r3, #24]
 8003c4a:	e002      	b.n	8003c52 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d123      	bne.n	8003ca2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c74:	833b      	strh	r3, [r7, #24]
 8003c76:	8b3b      	ldrh	r3, [r7, #24]
 8003c78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c7c:	833b      	strh	r3, [r7, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	441a      	add	r2, r3
 8003c8c:	8b3b      	ldrh	r3, [r7, #24]
 8003c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d01f      	beq.n	8003cec <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc6:	82fb      	strh	r3, [r7, #22]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	441a      	add	r2, r3
 8003cd6:	8afb      	ldrh	r3, [r7, #22]
 8003cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003cec:	8b7b      	ldrh	r3, [r7, #26]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 8087 	beq.w	8003e02 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6959      	ldr	r1, [r3, #20]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	891a      	ldrh	r2, [r3, #8]
 8003d00:	8b7b      	ldrh	r3, [r7, #26]
 8003d02:	f005 f902 	bl	8008f0a <USB_ReadPMA>
 8003d06:	e07c      	b.n	8003e02 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3306      	adds	r3, #6
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d30:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	8b7b      	ldrh	r3, [r7, #26]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d306      	bcc.n	8003d4a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	699a      	ldr	r2, [r3, #24]
 8003d40:	8b7b      	ldrh	r3, [r7, #26]
 8003d42:	1ad2      	subs	r2, r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	619a      	str	r2, [r3, #24]
 8003d48:	e002      	b.n	8003d50 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d123      	bne.n	8003da0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d72:	83fb      	strh	r3, [r7, #30]
 8003d74:	8bfb      	ldrh	r3, [r7, #30]
 8003d76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d7a:	83fb      	strh	r3, [r7, #30]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	441a      	add	r2, r3
 8003d8a:	8bfb      	ldrh	r3, [r7, #30]
 8003d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d11f      	bne.n	8003dea <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc4:	83bb      	strh	r3, [r7, #28]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	441a      	add	r2, r3
 8003dd4:	8bbb      	ldrh	r3, [r7, #28]
 8003dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003dea:	8b7b      	ldrh	r3, [r7, #26]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	6959      	ldr	r1, [r3, #20]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	895a      	ldrh	r2, [r3, #10]
 8003dfc:	8b7b      	ldrh	r3, [r7, #26]
 8003dfe:	f005 f884 	bl	8008f0a <USB_ReadPMA>
    }
  }

  return count;
 8003e02:	8b7b      	ldrh	r3, [r7, #26]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3720      	adds	r7, #32
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b0a2      	sub	sp, #136	; 0x88
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	4613      	mov	r3, r2
 8003e18:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 81c7 	beq.w	80041b4 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4413      	add	r3, r2
 8003e3a:	3302      	adds	r3, #2
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	6812      	ldr	r2, [r2, #0]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d907      	bls.n	8003e6e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e66:	1ad2      	subs	r2, r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	619a      	str	r2, [r3, #24]
 8003e6c:	e002      	b.n	8003e74 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2200      	movs	r2, #0
 8003e72:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f040 80b9 	bne.w	8003ff0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	785b      	ldrb	r3, [r3, #1]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d126      	bne.n	8003ed4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	4413      	add	r3, r2
 8003e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	011a      	lsls	r2, r3, #4
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	801a      	strh	r2, [r3, #0]
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	801a      	strh	r2, [r3, #0]
 8003ed2:	e01a      	b.n	8003f0a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	785b      	ldrb	r3, [r3, #1]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d116      	bne.n	8003f0a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	461a      	mov	r2, r3
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	4413      	add	r3, r2
 8003ef2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	011a      	lsls	r2, r3, #4
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	4413      	add	r3, r2
 8003efe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	2200      	movs	r2, #0
 8003f08:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	623b      	str	r3, [r7, #32]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	785b      	ldrb	r3, [r3, #1]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d126      	bne.n	8003f66 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	011a      	lsls	r2, r3, #4
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	801a      	strh	r2, [r3, #0]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	801a      	strh	r2, [r3, #0]
 8003f64:	e017      	b.n	8003f96 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	785b      	ldrb	r3, [r3, #1]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d113      	bne.n	8003f96 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	623b      	str	r3, [r7, #32]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	011a      	lsls	r2, r3, #4
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2200      	movs	r2, #0
 8003f94:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f7fe f8e2 	bl	8002166 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 82d4 	beq.w	8004556 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc8:	827b      	strh	r3, [r7, #18]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	441a      	add	r2, r3
 8003fd8:	8a7b      	ldrh	r3, [r7, #18]
 8003fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fe2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	8013      	strh	r3, [r2, #0]
 8003fee:	e2b2      	b.n	8004556 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d021      	beq.n	800403e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	b29b      	uxth	r3, r3
 800400c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004014:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	441a      	add	r2, r3
 8004026:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800402a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800402e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004032:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800403a:	b29b      	uxth	r3, r3
 800403c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004044:	2b01      	cmp	r3, #1
 8004046:	f040 8286 	bne.w	8004556 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004052:	441a      	add	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004060:	441a      	add	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6a1a      	ldr	r2, [r3, #32]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	429a      	cmp	r2, r3
 8004070:	d309      	bcc.n	8004086 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	6a1a      	ldr	r2, [r3, #32]
 800407c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800407e:	1ad2      	subs	r2, r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	621a      	str	r2, [r3, #32]
 8004084:	e015      	b.n	80040b2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d107      	bne.n	800409e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800408e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004092:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800409c:	e009      	b.n	80040b2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2200      	movs	r2, #0
 80040b0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	785b      	ldrb	r3, [r3, #1]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d155      	bne.n	8004166 <HAL_PCD_EP_DB_Transmit+0x35a>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	63bb      	str	r3, [r7, #56]	; 0x38
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ce:	4413      	add	r3, r2
 80040d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	011a      	lsls	r2, r3, #4
 80040d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040da:	4413      	add	r3, r2
 80040dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040e0:	637b      	str	r3, [r7, #52]	; 0x34
 80040e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d112      	bne.n	800410e <HAL_PCD_EP_DB_Transmit+0x302>
 80040e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f6:	801a      	strh	r2, [r3, #0]
 80040f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004106:	b29a      	uxth	r2, r3
 8004108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410a:	801a      	strh	r2, [r3, #0]
 800410c:	e047      	b.n	800419e <HAL_PCD_EP_DB_Transmit+0x392>
 800410e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004110:	2b3e      	cmp	r3, #62	; 0x3e
 8004112:	d811      	bhi.n	8004138 <HAL_PCD_EP_DB_Transmit+0x32c>
 8004114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004116:	085b      	lsrs	r3, r3, #1
 8004118:	64bb      	str	r3, [r7, #72]	; 0x48
 800411a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_PCD_EP_DB_Transmit+0x31e>
 8004124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004126:	3301      	adds	r3, #1
 8004128:	64bb      	str	r3, [r7, #72]	; 0x48
 800412a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800412c:	b29b      	uxth	r3, r3
 800412e:	029b      	lsls	r3, r3, #10
 8004130:	b29a      	uxth	r2, r3
 8004132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004134:	801a      	strh	r2, [r3, #0]
 8004136:	e032      	b.n	800419e <HAL_PCD_EP_DB_Transmit+0x392>
 8004138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	64bb      	str	r3, [r7, #72]	; 0x48
 800413e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004140:	f003 031f 	and.w	r3, r3, #31
 8004144:	2b00      	cmp	r3, #0
 8004146:	d102      	bne.n	800414e <HAL_PCD_EP_DB_Transmit+0x342>
 8004148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800414a:	3b01      	subs	r3, #1
 800414c:	64bb      	str	r3, [r7, #72]	; 0x48
 800414e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004150:	b29b      	uxth	r3, r3
 8004152:	029b      	lsls	r3, r3, #10
 8004154:	b29b      	uxth	r3, r3
 8004156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800415a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800415e:	b29a      	uxth	r2, r3
 8004160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004162:	801a      	strh	r2, [r3, #0]
 8004164:	e01b      	b.n	800419e <HAL_PCD_EP_DB_Transmit+0x392>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	785b      	ldrb	r3, [r3, #1]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d117      	bne.n	800419e <HAL_PCD_EP_DB_Transmit+0x392>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	643b      	str	r3, [r7, #64]	; 0x40
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800417c:	b29b      	uxth	r3, r3
 800417e:	461a      	mov	r2, r3
 8004180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004182:	4413      	add	r3, r2
 8004184:	643b      	str	r3, [r7, #64]	; 0x40
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	011a      	lsls	r2, r3, #4
 800418c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800418e:	4413      	add	r3, r2
 8004190:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004198:	b29a      	uxth	r2, r3
 800419a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	6959      	ldr	r1, [r3, #20]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	891a      	ldrh	r2, [r3, #8]
 80041aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	f004 fe67 	bl	8008e80 <USB_WritePMA>
 80041b2:	e1d0      	b.n	8004556 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041bc:	b29b      	uxth	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	3306      	adds	r3, #6
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	699a      	ldr	r2, [r3, #24]
 80041e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d307      	bcc.n	80041fc <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041f4:	1ad2      	subs	r2, r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	619a      	str	r2, [r3, #24]
 80041fa:	e002      	b.n	8004202 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2200      	movs	r2, #0
 8004200:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f040 80c4 	bne.w	8004394 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	785b      	ldrb	r3, [r3, #1]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d126      	bne.n	8004262 <HAL_PCD_EP_DB_Transmit+0x456>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	66fb      	str	r3, [r7, #108]	; 0x6c
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004222:	b29b      	uxth	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004228:	4413      	add	r3, r2
 800422a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	011a      	lsls	r2, r3, #4
 8004232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004234:	4413      	add	r3, r2
 8004236:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800423a:	66bb      	str	r3, [r7, #104]	; 0x68
 800423c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	b29b      	uxth	r3, r3
 8004242:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004246:	b29a      	uxth	r2, r3
 8004248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800424a:	801a      	strh	r2, [r3, #0]
 800424c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800425a:	b29a      	uxth	r2, r3
 800425c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800425e:	801a      	strh	r2, [r3, #0]
 8004260:	e01a      	b.n	8004298 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	785b      	ldrb	r3, [r3, #1]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d116      	bne.n	8004298 <HAL_PCD_EP_DB_Transmit+0x48c>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	677b      	str	r3, [r7, #116]	; 0x74
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004278:	b29b      	uxth	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800427e:	4413      	add	r3, r2
 8004280:	677b      	str	r3, [r7, #116]	; 0x74
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	011a      	lsls	r2, r3, #4
 8004288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800428a:	4413      	add	r3, r2
 800428c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004290:	673b      	str	r3, [r7, #112]	; 0x70
 8004292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004294:	2200      	movs	r2, #0
 8004296:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	67bb      	str	r3, [r7, #120]	; 0x78
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	785b      	ldrb	r3, [r3, #1]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d12f      	bne.n	8004306 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	461a      	mov	r2, r3
 80042ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042be:	4413      	add	r3, r2
 80042c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	011a      	lsls	r2, r3, #4
 80042ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042ce:	4413      	add	r3, r2
 80042d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042ea:	801a      	strh	r2, [r3, #0]
 80042ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004302:	801a      	strh	r2, [r3, #0]
 8004304:	e017      	b.n	8004336 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	785b      	ldrb	r3, [r3, #1]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d113      	bne.n	8004336 <HAL_PCD_EP_DB_Transmit+0x52a>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004316:	b29b      	uxth	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800431c:	4413      	add	r3, r2
 800431e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	011a      	lsls	r2, r3, #4
 8004326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004328:	4413      	add	r3, r2
 800432a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800432e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004332:	2200      	movs	r2, #0
 8004334:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	4619      	mov	r1, r3
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f7fd ff12 	bl	8002166 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004348:	2b00      	cmp	r3, #0
 800434a:	f040 8104 	bne.w	8004556 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004368:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	441a      	add	r2, r3
 800437a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800437e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004386:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800438a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800438e:	b29b      	uxth	r3, r3
 8004390:	8013      	strh	r3, [r2, #0]
 8004392:	e0e0      	b.n	8004556 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004394:	88fb      	ldrh	r3, [r7, #6]
 8004396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d121      	bne.n	80043e2 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	441a      	add	r2, r3
 80043ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80043ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043de:	b29b      	uxth	r3, r3
 80043e0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	f040 80b4 	bne.w	8004556 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	695a      	ldr	r2, [r3, #20]
 80043f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043f6:	441a      	add	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004404:	441a      	add	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	6a1a      	ldr	r2, [r3, #32]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	429a      	cmp	r2, r3
 8004414:	d309      	bcc.n	800442a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	6a1a      	ldr	r2, [r3, #32]
 8004420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004422:	1ad2      	subs	r2, r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	621a      	str	r2, [r3, #32]
 8004428:	e015      	b.n	8004456 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d107      	bne.n	8004442 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004432:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004436:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004440:	e009      	b.n	8004456 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2200      	movs	r2, #0
 800444c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	667b      	str	r3, [r7, #100]	; 0x64
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	785b      	ldrb	r3, [r3, #1]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d155      	bne.n	8004510 <HAL_PCD_EP_DB_Transmit+0x704>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	65fb      	str	r3, [r7, #92]	; 0x5c
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004472:	b29b      	uxth	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004478:	4413      	add	r3, r2
 800447a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	011a      	lsls	r2, r3, #4
 8004482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004484:	4413      	add	r3, r2
 8004486:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800448a:	65bb      	str	r3, [r7, #88]	; 0x58
 800448c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800448e:	2b00      	cmp	r3, #0
 8004490:	d112      	bne.n	80044b8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800449c:	b29a      	uxth	r2, r3
 800449e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044a0:	801a      	strh	r2, [r3, #0]
 80044a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044b4:	801a      	strh	r2, [r3, #0]
 80044b6:	e044      	b.n	8004542 <HAL_PCD_EP_DB_Transmit+0x736>
 80044b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ba:	2b3e      	cmp	r3, #62	; 0x3e
 80044bc:	d811      	bhi.n	80044e2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80044be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c0:	085b      	lsrs	r3, r3, #1
 80044c2:	657b      	str	r3, [r7, #84]	; 0x54
 80044c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80044ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d0:	3301      	adds	r3, #1
 80044d2:	657b      	str	r3, [r7, #84]	; 0x54
 80044d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	029b      	lsls	r3, r3, #10
 80044da:	b29a      	uxth	r2, r3
 80044dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044de:	801a      	strh	r2, [r3, #0]
 80044e0:	e02f      	b.n	8004542 <HAL_PCD_EP_DB_Transmit+0x736>
 80044e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	657b      	str	r3, [r7, #84]	; 0x54
 80044e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d102      	bne.n	80044f8 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80044f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f4:	3b01      	subs	r3, #1
 80044f6:	657b      	str	r3, [r7, #84]	; 0x54
 80044f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	029b      	lsls	r3, r3, #10
 80044fe:	b29b      	uxth	r3, r3
 8004500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004508:	b29a      	uxth	r2, r3
 800450a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800450c:	801a      	strh	r2, [r3, #0]
 800450e:	e018      	b.n	8004542 <HAL_PCD_EP_DB_Transmit+0x736>
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	785b      	ldrb	r3, [r3, #1]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d114      	bne.n	8004542 <HAL_PCD_EP_DB_Transmit+0x736>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004520:	b29b      	uxth	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004526:	4413      	add	r3, r2
 8004528:	667b      	str	r3, [r7, #100]	; 0x64
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	011a      	lsls	r2, r3, #4
 8004530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004532:	4413      	add	r3, r2
 8004534:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004538:	663b      	str	r3, [r7, #96]	; 0x60
 800453a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800453c:	b29a      	uxth	r2, r3
 800453e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004540:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6959      	ldr	r1, [r3, #20]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	895a      	ldrh	r2, [r3, #10]
 800454e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004550:	b29b      	uxth	r3, r3
 8004552:	f004 fc95 	bl	8008e80 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800456c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004570:	823b      	strh	r3, [r7, #16]
 8004572:	8a3b      	ldrh	r3, [r7, #16]
 8004574:	f083 0310 	eor.w	r3, r3, #16
 8004578:	823b      	strh	r3, [r7, #16]
 800457a:	8a3b      	ldrh	r3, [r7, #16]
 800457c:	f083 0320 	eor.w	r3, r3, #32
 8004580:	823b      	strh	r3, [r7, #16]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	441a      	add	r2, r3
 8004590:	8a3b      	ldrh	r3, [r7, #16]
 8004592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800459a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800459e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3788      	adds	r7, #136	; 0x88
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	607b      	str	r3, [r7, #4]
 80045ba:	460b      	mov	r3, r1
 80045bc:	817b      	strh	r3, [r7, #10]
 80045be:	4613      	mov	r3, r2
 80045c0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80045c2:	897b      	ldrh	r3, [r7, #10]
 80045c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00b      	beq.n	80045e6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045ce:	897b      	ldrh	r3, [r7, #10]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4413      	add	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	e009      	b.n	80045fa <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045e6:	897a      	ldrh	r2, [r7, #10]
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80045fa:	893b      	ldrh	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d107      	bne.n	8004610 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2200      	movs	r2, #0
 8004604:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	b29a      	uxth	r2, r3
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	80da      	strh	r2, [r3, #6]
 800460e:	e00b      	b.n	8004628 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2201      	movs	r2, #1
 8004614:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	b29a      	uxth	r2, r3
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	0c1b      	lsrs	r3, r3, #16
 8004622:	b29a      	uxth	r2, r3
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr

08004634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e272      	b.n	8004b2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 8087 	beq.w	8004762 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004654:	4b92      	ldr	r3, [pc, #584]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 030c 	and.w	r3, r3, #12
 800465c:	2b04      	cmp	r3, #4
 800465e:	d00c      	beq.n	800467a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004660:	4b8f      	ldr	r3, [pc, #572]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 030c 	and.w	r3, r3, #12
 8004668:	2b08      	cmp	r3, #8
 800466a:	d112      	bne.n	8004692 <HAL_RCC_OscConfig+0x5e>
 800466c:	4b8c      	ldr	r3, [pc, #560]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004678:	d10b      	bne.n	8004692 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467a:	4b89      	ldr	r3, [pc, #548]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d06c      	beq.n	8004760 <HAL_RCC_OscConfig+0x12c>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d168      	bne.n	8004760 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e24c      	b.n	8004b2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469a:	d106      	bne.n	80046aa <HAL_RCC_OscConfig+0x76>
 800469c:	4b80      	ldr	r3, [pc, #512]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a7f      	ldr	r2, [pc, #508]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	e02e      	b.n	8004708 <HAL_RCC_OscConfig+0xd4>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10c      	bne.n	80046cc <HAL_RCC_OscConfig+0x98>
 80046b2:	4b7b      	ldr	r3, [pc, #492]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a7a      	ldr	r2, [pc, #488]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	4b78      	ldr	r3, [pc, #480]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a77      	ldr	r2, [pc, #476]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e01d      	b.n	8004708 <HAL_RCC_OscConfig+0xd4>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCC_OscConfig+0xbc>
 80046d6:	4b72      	ldr	r3, [pc, #456]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a71      	ldr	r2, [pc, #452]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	4b6f      	ldr	r3, [pc, #444]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a6e      	ldr	r2, [pc, #440]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	e00b      	b.n	8004708 <HAL_RCC_OscConfig+0xd4>
 80046f0:	4b6b      	ldr	r3, [pc, #428]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a6a      	ldr	r2, [pc, #424]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	4b68      	ldr	r3, [pc, #416]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a67      	ldr	r2, [pc, #412]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 8004702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004706:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d013      	beq.n	8004738 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fd ffde 	bl	80026d0 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004718:	f7fd ffda 	bl	80026d0 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	; 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e200      	b.n	8004b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472a:	4b5d      	ldr	r3, [pc, #372]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0xe4>
 8004736:	e014      	b.n	8004762 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7fd ffca 	bl	80026d0 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004740:	f7fd ffc6 	bl	80026d0 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b64      	cmp	r3, #100	; 0x64
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e1ec      	b.n	8004b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004752:	4b53      	ldr	r3, [pc, #332]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x10c>
 800475e:	e000      	b.n	8004762 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d063      	beq.n	8004836 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800476e:	4b4c      	ldr	r3, [pc, #304]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f003 030c 	and.w	r3, r3, #12
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00b      	beq.n	8004792 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800477a:	4b49      	ldr	r3, [pc, #292]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	2b08      	cmp	r3, #8
 8004784:	d11c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x18c>
 8004786:	4b46      	ldr	r3, [pc, #280]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d116      	bne.n	80047c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004792:	4b43      	ldr	r3, [pc, #268]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <HAL_RCC_OscConfig+0x176>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d001      	beq.n	80047aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e1c0      	b.n	8004b2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047aa:	4b3d      	ldr	r3, [pc, #244]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	4939      	ldr	r1, [pc, #228]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047be:	e03a      	b.n	8004836 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d020      	beq.n	800480a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c8:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <HAL_RCC_OscConfig+0x270>)
 80047ca:	2201      	movs	r2, #1
 80047cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ce:	f7fd ff7f 	bl	80026d0 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d6:	f7fd ff7b 	bl	80026d0 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e1a1      	b.n	8004b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e8:	4b2d      	ldr	r3, [pc, #180]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0f0      	beq.n	80047d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f4:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	4927      	ldr	r1, [pc, #156]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 8004804:	4313      	orrs	r3, r2
 8004806:	600b      	str	r3, [r1, #0]
 8004808:	e015      	b.n	8004836 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800480a:	4b26      	ldr	r3, [pc, #152]	; (80048a4 <HAL_RCC_OscConfig+0x270>)
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004810:	f7fd ff5e 	bl	80026d0 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004818:	f7fd ff5a 	bl	80026d0 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e180      	b.n	8004b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482a:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f0      	bne.n	8004818 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d03a      	beq.n	80048b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d019      	beq.n	800487e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800484a:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <HAL_RCC_OscConfig+0x274>)
 800484c:	2201      	movs	r2, #1
 800484e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004850:	f7fd ff3e 	bl	80026d0 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004858:	f7fd ff3a 	bl	80026d0 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e160      	b.n	8004b2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486a:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f0      	beq.n	8004858 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004876:	2001      	movs	r0, #1
 8004878:	f000 faa6 	bl	8004dc8 <RCC_Delay>
 800487c:	e01c      	b.n	80048b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800487e:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <HAL_RCC_OscConfig+0x274>)
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004884:	f7fd ff24 	bl	80026d0 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800488a:	e00f      	b.n	80048ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800488c:	f7fd ff20 	bl	80026d0 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d908      	bls.n	80048ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e146      	b.n	8004b2c <HAL_RCC_OscConfig+0x4f8>
 800489e:	bf00      	nop
 80048a0:	40021000 	.word	0x40021000
 80048a4:	42420000 	.word	0x42420000
 80048a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ac:	4b92      	ldr	r3, [pc, #584]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e9      	bne.n	800488c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80a6 	beq.w	8004a12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048c6:	2300      	movs	r3, #0
 80048c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ca:	4b8b      	ldr	r3, [pc, #556]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10d      	bne.n	80048f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048d6:	4b88      	ldr	r3, [pc, #544]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	4a87      	ldr	r2, [pc, #540]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 80048dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e0:	61d3      	str	r3, [r2, #28]
 80048e2:	4b85      	ldr	r3, [pc, #532]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ee:	2301      	movs	r3, #1
 80048f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f2:	4b82      	ldr	r3, [pc, #520]	; (8004afc <HAL_RCC_OscConfig+0x4c8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d118      	bne.n	8004930 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048fe:	4b7f      	ldr	r3, [pc, #508]	; (8004afc <HAL_RCC_OscConfig+0x4c8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a7e      	ldr	r2, [pc, #504]	; (8004afc <HAL_RCC_OscConfig+0x4c8>)
 8004904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800490a:	f7fd fee1 	bl	80026d0 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004912:	f7fd fedd 	bl	80026d0 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b64      	cmp	r3, #100	; 0x64
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e103      	b.n	8004b2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004924:	4b75      	ldr	r3, [pc, #468]	; (8004afc <HAL_RCC_OscConfig+0x4c8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f0      	beq.n	8004912 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d106      	bne.n	8004946 <HAL_RCC_OscConfig+0x312>
 8004938:	4b6f      	ldr	r3, [pc, #444]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	4a6e      	ldr	r2, [pc, #440]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	6213      	str	r3, [r2, #32]
 8004944:	e02d      	b.n	80049a2 <HAL_RCC_OscConfig+0x36e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10c      	bne.n	8004968 <HAL_RCC_OscConfig+0x334>
 800494e:	4b6a      	ldr	r3, [pc, #424]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	4a69      	ldr	r2, [pc, #420]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004954:	f023 0301 	bic.w	r3, r3, #1
 8004958:	6213      	str	r3, [r2, #32]
 800495a:	4b67      	ldr	r3, [pc, #412]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	4a66      	ldr	r2, [pc, #408]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004960:	f023 0304 	bic.w	r3, r3, #4
 8004964:	6213      	str	r3, [r2, #32]
 8004966:	e01c      	b.n	80049a2 <HAL_RCC_OscConfig+0x36e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b05      	cmp	r3, #5
 800496e:	d10c      	bne.n	800498a <HAL_RCC_OscConfig+0x356>
 8004970:	4b61      	ldr	r3, [pc, #388]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	4a60      	ldr	r2, [pc, #384]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004976:	f043 0304 	orr.w	r3, r3, #4
 800497a:	6213      	str	r3, [r2, #32]
 800497c:	4b5e      	ldr	r3, [pc, #376]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	4a5d      	ldr	r2, [pc, #372]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	6213      	str	r3, [r2, #32]
 8004988:	e00b      	b.n	80049a2 <HAL_RCC_OscConfig+0x36e>
 800498a:	4b5b      	ldr	r3, [pc, #364]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	4a5a      	ldr	r2, [pc, #360]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	6213      	str	r3, [r2, #32]
 8004996:	4b58      	ldr	r3, [pc, #352]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	4a57      	ldr	r2, [pc, #348]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 800499c:	f023 0304 	bic.w	r3, r3, #4
 80049a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d015      	beq.n	80049d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049aa:	f7fd fe91 	bl	80026d0 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b2:	f7fd fe8d 	bl	80026d0 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e0b1      	b.n	8004b2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c8:	4b4b      	ldr	r3, [pc, #300]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0ee      	beq.n	80049b2 <HAL_RCC_OscConfig+0x37e>
 80049d4:	e014      	b.n	8004a00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d6:	f7fd fe7b 	bl	80026d0 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049dc:	e00a      	b.n	80049f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049de:	f7fd fe77 	bl	80026d0 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e09b      	b.n	8004b2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049f4:	4b40      	ldr	r3, [pc, #256]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1ee      	bne.n	80049de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a00:	7dfb      	ldrb	r3, [r7, #23]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d105      	bne.n	8004a12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a06:	4b3c      	ldr	r3, [pc, #240]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	4a3b      	ldr	r2, [pc, #236]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 8087 	beq.w	8004b2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a1c:	4b36      	ldr	r3, [pc, #216]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 030c 	and.w	r3, r3, #12
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d061      	beq.n	8004aec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d146      	bne.n	8004abe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a30:	4b33      	ldr	r3, [pc, #204]	; (8004b00 <HAL_RCC_OscConfig+0x4cc>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a36:	f7fd fe4b 	bl	80026d0 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a3e:	f7fd fe47 	bl	80026d0 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e06d      	b.n	8004b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a50:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f0      	bne.n	8004a3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a64:	d108      	bne.n	8004a78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a66:	4b24      	ldr	r3, [pc, #144]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	4921      	ldr	r1, [pc, #132]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a78:	4b1f      	ldr	r3, [pc, #124]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a19      	ldr	r1, [r3, #32]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	491b      	ldr	r1, [pc, #108]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a90:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <HAL_RCC_OscConfig+0x4cc>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a96:	f7fd fe1b 	bl	80026d0 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9e:	f7fd fe17 	bl	80026d0 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e03d      	b.n	8004b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ab0:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCC_OscConfig+0x46a>
 8004abc:	e035      	b.n	8004b2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004abe:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <HAL_RCC_OscConfig+0x4cc>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac4:	f7fd fe04 	bl	80026d0 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004acc:	f7fd fe00 	bl	80026d0 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e026      	b.n	8004b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ade:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <HAL_RCC_OscConfig+0x4c4>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x498>
 8004aea:	e01e      	b.n	8004b2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d107      	bne.n	8004b04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e019      	b.n	8004b2c <HAL_RCC_OscConfig+0x4f8>
 8004af8:	40021000 	.word	0x40021000
 8004afc:	40007000 	.word	0x40007000
 8004b00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b04:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <HAL_RCC_OscConfig+0x500>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d106      	bne.n	8004b26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d001      	beq.n	8004b2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40021000 	.word	0x40021000

08004b38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e0d0      	b.n	8004cee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b4c:	4b6a      	ldr	r3, [pc, #424]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d910      	bls.n	8004b7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5a:	4b67      	ldr	r3, [pc, #412]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f023 0207 	bic.w	r2, r3, #7
 8004b62:	4965      	ldr	r1, [pc, #404]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6a:	4b63      	ldr	r3, [pc, #396]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0b8      	b.n	8004cee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d020      	beq.n	8004bca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b94:	4b59      	ldr	r3, [pc, #356]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	4a58      	ldr	r2, [pc, #352]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004b9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bac:	4b53      	ldr	r3, [pc, #332]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	4a52      	ldr	r2, [pc, #328]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004bb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004bb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb8:	4b50      	ldr	r3, [pc, #320]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	494d      	ldr	r1, [pc, #308]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d040      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d107      	bne.n	8004bee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bde:	4b47      	ldr	r3, [pc, #284]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d115      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e07f      	b.n	8004cee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d107      	bne.n	8004c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf6:	4b41      	ldr	r3, [pc, #260]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e073      	b.n	8004cee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c06:	4b3d      	ldr	r3, [pc, #244]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e06b      	b.n	8004cee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c16:	4b39      	ldr	r3, [pc, #228]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f023 0203 	bic.w	r2, r3, #3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	4936      	ldr	r1, [pc, #216]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c28:	f7fd fd52 	bl	80026d0 <HAL_GetTick>
 8004c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2e:	e00a      	b.n	8004c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c30:	f7fd fd4e 	bl	80026d0 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e053      	b.n	8004cee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c46:	4b2d      	ldr	r3, [pc, #180]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f003 020c 	and.w	r2, r3, #12
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d1eb      	bne.n	8004c30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c58:	4b27      	ldr	r3, [pc, #156]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d210      	bcs.n	8004c88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c66:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f023 0207 	bic.w	r2, r3, #7
 8004c6e:	4922      	ldr	r1, [pc, #136]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c76:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d001      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e032      	b.n	8004cee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d008      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c94:	4b19      	ldr	r3, [pc, #100]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4916      	ldr	r1, [pc, #88]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d009      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cb2:	4b12      	ldr	r3, [pc, #72]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	490e      	ldr	r1, [pc, #56]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cc6:	f000 f821 	bl	8004d0c <HAL_RCC_GetSysClockFreq>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	490a      	ldr	r1, [pc, #40]	; (8004d00 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd8:	5ccb      	ldrb	r3, [r1, r3]
 8004cda:	fa22 f303 	lsr.w	r3, r2, r3
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <HAL_RCC_ClockConfig+0x1cc>)
 8004ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ce2:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <HAL_RCC_ClockConfig+0x1d0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fd fcb0 	bl	800264c <HAL_InitTick>

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40022000 	.word	0x40022000
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	0800d68c 	.word	0x0800d68c
 8004d04:	20000064 	.word	0x20000064
 8004d08:	20000068 	.word	0x20000068

08004d0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d0c:	b490      	push	{r4, r7}
 8004d0e:	b08a      	sub	sp, #40	; 0x28
 8004d10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d12:	4b29      	ldr	r3, [pc, #164]	; (8004db8 <HAL_RCC_GetSysClockFreq+0xac>)
 8004d14:	1d3c      	adds	r4, r7, #4
 8004d16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d1c:	f240 2301 	movw	r3, #513	; 0x201
 8004d20:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	2300      	movs	r3, #0
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2e:	2300      	movs	r3, #0
 8004d30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d36:	4b21      	ldr	r3, [pc, #132]	; (8004dbc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d002      	beq.n	8004d4c <HAL_RCC_GetSysClockFreq+0x40>
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d003      	beq.n	8004d52 <HAL_RCC_GetSysClockFreq+0x46>
 8004d4a:	e02b      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d4c:	4b1c      	ldr	r3, [pc, #112]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d4e:	623b      	str	r3, [r7, #32]
      break;
 8004d50:	e02b      	b.n	8004daa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	0c9b      	lsrs	r3, r3, #18
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	3328      	adds	r3, #40	; 0x28
 8004d5c:	443b      	add	r3, r7
 8004d5e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004d62:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d012      	beq.n	8004d94 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	0c5b      	lsrs	r3, r3, #17
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	3328      	adds	r3, #40	; 0x28
 8004d7a:	443b      	add	r3, r7
 8004d7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004d80:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	4a0e      	ldr	r2, [pc, #56]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d86:	fb03 f202 	mul.w	r2, r3, r2
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
 8004d92:	e004      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	4a0b      	ldr	r2, [pc, #44]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d98:	fb02 f303 	mul.w	r3, r2, r3
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	623b      	str	r3, [r7, #32]
      break;
 8004da2:	e002      	b.n	8004daa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004da6:	623b      	str	r3, [r7, #32]
      break;
 8004da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004daa:	6a3b      	ldr	r3, [r7, #32]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3728      	adds	r7, #40	; 0x28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc90      	pop	{r4, r7}
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	0800d644 	.word	0x0800d644
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	007a1200 	.word	0x007a1200
 8004dc4:	003d0900 	.word	0x003d0900

08004dc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <RCC_Delay+0x34>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a0a      	ldr	r2, [pc, #40]	; (8004e00 <RCC_Delay+0x38>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	0a5b      	lsrs	r3, r3, #9
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004de4:	bf00      	nop
  }
  while (Delay --);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	1e5a      	subs	r2, r3, #1
 8004dea:	60fa      	str	r2, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f9      	bne.n	8004de4 <RCC_Delay+0x1c>
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr
 8004dfc:	20000064 	.word	0x20000064
 8004e00:	10624dd3 	.word	0x10624dd3

08004e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	2300      	movs	r3, #0
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d07d      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e20:	2300      	movs	r3, #0
 8004e22:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e24:	4b4f      	ldr	r3, [pc, #316]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10d      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e30:	4b4c      	ldr	r3, [pc, #304]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	4a4b      	ldr	r2, [pc, #300]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	61d3      	str	r3, [r2, #28]
 8004e3c:	4b49      	ldr	r3, [pc, #292]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4c:	4b46      	ldr	r3, [pc, #280]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d118      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e58:	4b43      	ldr	r3, [pc, #268]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a42      	ldr	r2, [pc, #264]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e64:	f7fd fc34 	bl	80026d0 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6a:	e008      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6c:	f7fd fc30 	bl	80026d0 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	; 0x64
 8004e78:	d901      	bls.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e06d      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e7e:	4b3a      	ldr	r3, [pc, #232]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e8a:	4b36      	ldr	r3, [pc, #216]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d02e      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d027      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea8:	4b2e      	ldr	r3, [pc, #184]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eb2:	4b2e      	ldr	r3, [pc, #184]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb8:	4b2c      	ldr	r3, [pc, #176]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ebe:	4a29      	ldr	r2, [pc, #164]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d014      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ece:	f7fd fbff 	bl	80026d0 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed4:	e00a      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed6:	f7fd fbfb 	bl	80026d0 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e036      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eec:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0ee      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ef8:	4b1a      	ldr	r3, [pc, #104]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	4917      	ldr	r1, [pc, #92]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d105      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f10:	4b14      	ldr	r3, [pc, #80]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	4a13      	ldr	r2, [pc, #76]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f28:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	490b      	ldr	r1, [pc, #44]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0310 	and.w	r3, r3, #16
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d008      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f46:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	4904      	ldr	r1, [pc, #16]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40007000 	.word	0x40007000
 8004f6c:	42420440 	.word	0x42420440

08004f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e041      	b.n	8005006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d106      	bne.n	8004f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7fc fc8a 	bl	80018b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4619      	mov	r1, r3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	f000 fe0c 	bl	8005bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e041      	b.n	80050a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f839 	bl	80050ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2202      	movs	r2, #2
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3304      	adds	r3, #4
 800504a:	4619      	mov	r1, r3
 800504c:	4610      	mov	r0, r2
 800504e:	f000 fdbd 	bl	8005bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr
	...

080050c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d109      	bne.n	80050e4 <HAL_TIM_PWM_Start+0x24>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	bf14      	ite	ne
 80050dc:	2301      	movne	r3, #1
 80050de:	2300      	moveq	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	e022      	b.n	800512a <HAL_TIM_PWM_Start+0x6a>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d109      	bne.n	80050fe <HAL_TIM_PWM_Start+0x3e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	bf14      	ite	ne
 80050f6:	2301      	movne	r3, #1
 80050f8:	2300      	moveq	r3, #0
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	e015      	b.n	800512a <HAL_TIM_PWM_Start+0x6a>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b08      	cmp	r3, #8
 8005102:	d109      	bne.n	8005118 <HAL_TIM_PWM_Start+0x58>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	bf14      	ite	ne
 8005110:	2301      	movne	r3, #1
 8005112:	2300      	moveq	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	e008      	b.n	800512a <HAL_TIM_PWM_Start+0x6a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b01      	cmp	r3, #1
 8005122:	bf14      	ite	ne
 8005124:	2301      	movne	r3, #1
 8005126:	2300      	moveq	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e05e      	b.n	80051f0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d104      	bne.n	8005142 <HAL_TIM_PWM_Start+0x82>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005140:	e013      	b.n	800516a <HAL_TIM_PWM_Start+0xaa>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b04      	cmp	r3, #4
 8005146:	d104      	bne.n	8005152 <HAL_TIM_PWM_Start+0x92>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005150:	e00b      	b.n	800516a <HAL_TIM_PWM_Start+0xaa>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b08      	cmp	r3, #8
 8005156:	d104      	bne.n	8005162 <HAL_TIM_PWM_Start+0xa2>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005160:	e003      	b.n	800516a <HAL_TIM_PWM_Start+0xaa>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2202      	movs	r2, #2
 8005166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2201      	movs	r2, #1
 8005170:	6839      	ldr	r1, [r7, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f001 f8b7 	bl	80062e6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1e      	ldr	r2, [pc, #120]	; (80051f8 <HAL_TIM_PWM_Start+0x138>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d107      	bne.n	8005192 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005190:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a18      	ldr	r2, [pc, #96]	; (80051f8 <HAL_TIM_PWM_Start+0x138>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00e      	beq.n	80051ba <HAL_TIM_PWM_Start+0xfa>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a4:	d009      	beq.n	80051ba <HAL_TIM_PWM_Start+0xfa>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a14      	ldr	r2, [pc, #80]	; (80051fc <HAL_TIM_PWM_Start+0x13c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <HAL_TIM_PWM_Start+0xfa>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a12      	ldr	r2, [pc, #72]	; (8005200 <HAL_TIM_PWM_Start+0x140>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d111      	bne.n	80051de <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b06      	cmp	r3, #6
 80051ca:	d010      	beq.n	80051ee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051dc:	e007      	b.n	80051ee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f042 0201 	orr.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40012c00 	.word	0x40012c00
 80051fc:	40000400 	.word	0x40000400
 8005200:	40000800 	.word	0x40000800

08005204 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e041      	b.n	800529a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f839 	bl	80052a2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3304      	adds	r3, #4
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f000 fcc2 	bl	8005bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr

080052b4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <HAL_TIM_IC_Start_IT+0x1a>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	e013      	b.n	80052f6 <HAL_TIM_IC_Start_IT+0x42>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d104      	bne.n	80052de <HAL_TIM_IC_Start_IT+0x2a>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	e00b      	b.n	80052f6 <HAL_TIM_IC_Start_IT+0x42>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_IC_Start_IT+0x3a>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	e003      	b.n	80052f6 <HAL_TIM_IC_Start_IT+0x42>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d104      	bne.n	8005308 <HAL_TIM_IC_Start_IT+0x54>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005304:	b2db      	uxtb	r3, r3
 8005306:	e013      	b.n	8005330 <HAL_TIM_IC_Start_IT+0x7c>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b04      	cmp	r3, #4
 800530c:	d104      	bne.n	8005318 <HAL_TIM_IC_Start_IT+0x64>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e00b      	b.n	8005330 <HAL_TIM_IC_Start_IT+0x7c>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b08      	cmp	r3, #8
 800531c:	d104      	bne.n	8005328 <HAL_TIM_IC_Start_IT+0x74>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005324:	b2db      	uxtb	r3, r3
 8005326:	e003      	b.n	8005330 <HAL_TIM_IC_Start_IT+0x7c>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800532e:	b2db      	uxtb	r3, r3
 8005330:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005332:	7bfb      	ldrb	r3, [r7, #15]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d102      	bne.n	800533e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005338:	7bbb      	ldrb	r3, [r7, #14]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d001      	beq.n	8005342 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e0b3      	b.n	80054aa <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d104      	bne.n	8005352 <HAL_TIM_IC_Start_IT+0x9e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005350:	e013      	b.n	800537a <HAL_TIM_IC_Start_IT+0xc6>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b04      	cmp	r3, #4
 8005356:	d104      	bne.n	8005362 <HAL_TIM_IC_Start_IT+0xae>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005360:	e00b      	b.n	800537a <HAL_TIM_IC_Start_IT+0xc6>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b08      	cmp	r3, #8
 8005366:	d104      	bne.n	8005372 <HAL_TIM_IC_Start_IT+0xbe>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005370:	e003      	b.n	800537a <HAL_TIM_IC_Start_IT+0xc6>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2202      	movs	r2, #2
 8005376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d104      	bne.n	800538a <HAL_TIM_IC_Start_IT+0xd6>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005388:	e013      	b.n	80053b2 <HAL_TIM_IC_Start_IT+0xfe>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b04      	cmp	r3, #4
 800538e:	d104      	bne.n	800539a <HAL_TIM_IC_Start_IT+0xe6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005398:	e00b      	b.n	80053b2 <HAL_TIM_IC_Start_IT+0xfe>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d104      	bne.n	80053aa <HAL_TIM_IC_Start_IT+0xf6>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a8:	e003      	b.n	80053b2 <HAL_TIM_IC_Start_IT+0xfe>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2202      	movs	r2, #2
 80053ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b0c      	cmp	r3, #12
 80053b6:	d841      	bhi.n	800543c <HAL_TIM_IC_Start_IT+0x188>
 80053b8:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <HAL_TIM_IC_Start_IT+0x10c>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	080053f5 	.word	0x080053f5
 80053c4:	0800543d 	.word	0x0800543d
 80053c8:	0800543d 	.word	0x0800543d
 80053cc:	0800543d 	.word	0x0800543d
 80053d0:	08005407 	.word	0x08005407
 80053d4:	0800543d 	.word	0x0800543d
 80053d8:	0800543d 	.word	0x0800543d
 80053dc:	0800543d 	.word	0x0800543d
 80053e0:	08005419 	.word	0x08005419
 80053e4:	0800543d 	.word	0x0800543d
 80053e8:	0800543d 	.word	0x0800543d
 80053ec:	0800543d 	.word	0x0800543d
 80053f0:	0800542b 	.word	0x0800542b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0202 	orr.w	r2, r2, #2
 8005402:	60da      	str	r2, [r3, #12]
      break;
 8005404:	e01b      	b.n	800543e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0204 	orr.w	r2, r2, #4
 8005414:	60da      	str	r2, [r3, #12]
      break;
 8005416:	e012      	b.n	800543e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0208 	orr.w	r2, r2, #8
 8005426:	60da      	str	r2, [r3, #12]
      break;
 8005428:	e009      	b.n	800543e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f042 0210 	orr.w	r2, r2, #16
 8005438:	60da      	str	r2, [r3, #12]
      break;
 800543a:	e000      	b.n	800543e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800543c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2201      	movs	r2, #1
 8005444:	6839      	ldr	r1, [r7, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f000 ff4d 	bl	80062e6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a18      	ldr	r2, [pc, #96]	; (80054b4 <HAL_TIM_IC_Start_IT+0x200>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00e      	beq.n	8005474 <HAL_TIM_IC_Start_IT+0x1c0>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545e:	d009      	beq.n	8005474 <HAL_TIM_IC_Start_IT+0x1c0>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a14      	ldr	r2, [pc, #80]	; (80054b8 <HAL_TIM_IC_Start_IT+0x204>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d004      	beq.n	8005474 <HAL_TIM_IC_Start_IT+0x1c0>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a13      	ldr	r2, [pc, #76]	; (80054bc <HAL_TIM_IC_Start_IT+0x208>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d111      	bne.n	8005498 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b06      	cmp	r3, #6
 8005484:	d010      	beq.n	80054a8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0201 	orr.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005496:	e007      	b.n	80054a8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40012c00 	.word	0x40012c00
 80054b8:	40000400 	.word	0x40000400
 80054bc:	40000800 	.word	0x40000800

080054c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d122      	bne.n	800551c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d11b      	bne.n	800551c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0202 	mvn.w	r2, #2
 80054ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fc f904 	bl	8001710 <HAL_TIM_IC_CaptureCallback>
 8005508:	e005      	b.n	8005516 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fb43 	bl	8005b96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fb49 	bl	8005ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	2b04      	cmp	r3, #4
 8005528:	d122      	bne.n	8005570 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b04      	cmp	r3, #4
 8005536:	d11b      	bne.n	8005570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0204 	mvn.w	r2, #4
 8005540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2202      	movs	r2, #2
 8005546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fc f8da 	bl	8001710 <HAL_TIM_IC_CaptureCallback>
 800555c:	e005      	b.n	800556a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fb19 	bl	8005b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fb1f 	bl	8005ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b08      	cmp	r3, #8
 800557c:	d122      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b08      	cmp	r3, #8
 800558a:	d11b      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0208 	mvn.w	r2, #8
 8005594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2204      	movs	r2, #4
 800559a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fc f8b0 	bl	8001710 <HAL_TIM_IC_CaptureCallback>
 80055b0:	e005      	b.n	80055be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 faef 	bl	8005b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 faf5 	bl	8005ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0310 	and.w	r3, r3, #16
 80055ce:	2b10      	cmp	r3, #16
 80055d0:	d122      	bne.n	8005618 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0310 	and.w	r3, r3, #16
 80055dc:	2b10      	cmp	r3, #16
 80055de:	d11b      	bne.n	8005618 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0210 	mvn.w	r2, #16
 80055e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2208      	movs	r2, #8
 80055ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fc f886 	bl	8001710 <HAL_TIM_IC_CaptureCallback>
 8005604:	e005      	b.n	8005612 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fac5 	bl	8005b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 facb 	bl	8005ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b01      	cmp	r3, #1
 8005624:	d10e      	bne.n	8005644 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b01      	cmp	r3, #1
 8005632:	d107      	bne.n	8005644 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0201 	mvn.w	r2, #1
 800563c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 faa0 	bl	8005b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564e:	2b80      	cmp	r3, #128	; 0x80
 8005650:	d10e      	bne.n	8005670 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565c:	2b80      	cmp	r3, #128	; 0x80
 800565e:	d107      	bne.n	8005670 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fec7 	bl	80063fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567a:	2b40      	cmp	r3, #64	; 0x40
 800567c:	d10e      	bne.n	800569c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005688:	2b40      	cmp	r3, #64	; 0x40
 800568a:	d107      	bne.n	800569c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fa8f 	bl	8005bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	d10e      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0320 	and.w	r3, r3, #32
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d107      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0220 	mvn.w	r2, #32
 80056c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fe92 	bl	80063ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056c8:	bf00      	nop
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_TIM_IC_ConfigChannel+0x1a>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e082      	b.n	80057f0 <HAL_TIM_IC_ConfigChannel+0x120>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d11b      	bne.n	8005730 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6818      	ldr	r0, [r3, #0]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	6819      	ldr	r1, [r3, #0]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f000 fc4a 	bl	8005fa0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 020c 	bic.w	r2, r2, #12
 800571a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6999      	ldr	r1, [r3, #24]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	619a      	str	r2, [r3, #24]
 800572e:	e05a      	b.n	80057e6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b04      	cmp	r3, #4
 8005734:	d11c      	bne.n	8005770 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	6819      	ldr	r1, [r3, #0]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f000 fcb3 	bl	80060b0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	699a      	ldr	r2, [r3, #24]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005758:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6999      	ldr	r1, [r3, #24]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	021a      	lsls	r2, r3, #8
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	619a      	str	r2, [r3, #24]
 800576e:	e03a      	b.n	80057e6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b08      	cmp	r3, #8
 8005774:	d11b      	bne.n	80057ae <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	6819      	ldr	r1, [r3, #0]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f000 fcfe 	bl	8006186 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 020c 	bic.w	r2, r2, #12
 8005798:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69d9      	ldr	r1, [r3, #28]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	61da      	str	r2, [r3, #28]
 80057ac:	e01b      	b.n	80057e6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	6819      	ldr	r1, [r3, #0]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f000 fd1d 	bl	80061fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69da      	ldr	r2, [r3, #28]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057d0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69d9      	ldr	r1, [r3, #28]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	021a      	lsls	r2, r3, #8
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800580a:	2b01      	cmp	r3, #1
 800580c:	d101      	bne.n	8005812 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800580e:	2302      	movs	r3, #2
 8005810:	e0ac      	b.n	800596c <HAL_TIM_PWM_ConfigChannel+0x174>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b0c      	cmp	r3, #12
 800581e:	f200 809f 	bhi.w	8005960 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005822:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005828:	0800585d 	.word	0x0800585d
 800582c:	08005961 	.word	0x08005961
 8005830:	08005961 	.word	0x08005961
 8005834:	08005961 	.word	0x08005961
 8005838:	0800589d 	.word	0x0800589d
 800583c:	08005961 	.word	0x08005961
 8005840:	08005961 	.word	0x08005961
 8005844:	08005961 	.word	0x08005961
 8005848:	080058df 	.word	0x080058df
 800584c:	08005961 	.word	0x08005961
 8005850:	08005961 	.word	0x08005961
 8005854:	08005961 	.word	0x08005961
 8005858:	0800591f 	.word	0x0800591f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fa14 	bl	8005c90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0208 	orr.w	r2, r2, #8
 8005876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0204 	bic.w	r2, r2, #4
 8005886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6999      	ldr	r1, [r3, #24]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	619a      	str	r2, [r3, #24]
      break;
 800589a:	e062      	b.n	8005962 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fa5a 	bl	8005d5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6999      	ldr	r1, [r3, #24]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	021a      	lsls	r2, r3, #8
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	619a      	str	r2, [r3, #24]
      break;
 80058dc:	e041      	b.n	8005962 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 faa3 	bl	8005e30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0208 	orr.w	r2, r2, #8
 80058f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69da      	ldr	r2, [r3, #28]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0204 	bic.w	r2, r2, #4
 8005908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69d9      	ldr	r1, [r3, #28]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	61da      	str	r2, [r3, #28]
      break;
 800591c:	e021      	b.n	8005962 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	4618      	mov	r0, r3
 8005926:	f000 faed 	bl	8005f04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69da      	ldr	r2, [r3, #28]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69da      	ldr	r2, [r3, #28]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69d9      	ldr	r1, [r3, #28]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	021a      	lsls	r2, r3, #8
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	61da      	str	r2, [r3, #28]
      break;
 800595e:	e000      	b.n	8005962 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005960:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_TIM_ConfigClockSource+0x18>
 8005988:	2302      	movs	r3, #2
 800598a:	e0b3      	b.n	8005af4 <HAL_TIM_ConfigClockSource+0x180>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059c4:	d03e      	beq.n	8005a44 <HAL_TIM_ConfigClockSource+0xd0>
 80059c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ca:	f200 8087 	bhi.w	8005adc <HAL_TIM_ConfigClockSource+0x168>
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d2:	f000 8085 	beq.w	8005ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80059d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059da:	d87f      	bhi.n	8005adc <HAL_TIM_ConfigClockSource+0x168>
 80059dc:	2b70      	cmp	r3, #112	; 0x70
 80059de:	d01a      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0xa2>
 80059e0:	2b70      	cmp	r3, #112	; 0x70
 80059e2:	d87b      	bhi.n	8005adc <HAL_TIM_ConfigClockSource+0x168>
 80059e4:	2b60      	cmp	r3, #96	; 0x60
 80059e6:	d050      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x116>
 80059e8:	2b60      	cmp	r3, #96	; 0x60
 80059ea:	d877      	bhi.n	8005adc <HAL_TIM_ConfigClockSource+0x168>
 80059ec:	2b50      	cmp	r3, #80	; 0x50
 80059ee:	d03c      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0xf6>
 80059f0:	2b50      	cmp	r3, #80	; 0x50
 80059f2:	d873      	bhi.n	8005adc <HAL_TIM_ConfigClockSource+0x168>
 80059f4:	2b40      	cmp	r3, #64	; 0x40
 80059f6:	d058      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x136>
 80059f8:	2b40      	cmp	r3, #64	; 0x40
 80059fa:	d86f      	bhi.n	8005adc <HAL_TIM_ConfigClockSource+0x168>
 80059fc:	2b30      	cmp	r3, #48	; 0x30
 80059fe:	d064      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0x156>
 8005a00:	2b30      	cmp	r3, #48	; 0x30
 8005a02:	d86b      	bhi.n	8005adc <HAL_TIM_ConfigClockSource+0x168>
 8005a04:	2b20      	cmp	r3, #32
 8005a06:	d060      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0x156>
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d867      	bhi.n	8005adc <HAL_TIM_ConfigClockSource+0x168>
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d05c      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0x156>
 8005a10:	2b10      	cmp	r3, #16
 8005a12:	d05a      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005a14:	e062      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6899      	ldr	r1, [r3, #8]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f000 fc3f 	bl	80062a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	609a      	str	r2, [r3, #8]
      break;
 8005a42:	e04e      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	6899      	ldr	r1, [r3, #8]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f000 fc28 	bl	80062a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a66:	609a      	str	r2, [r3, #8]
      break;
 8005a68:	e03b      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6859      	ldr	r1, [r3, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	461a      	mov	r2, r3
 8005a78:	f000 faec 	bl	8006054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2150      	movs	r1, #80	; 0x50
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fbf6 	bl	8006274 <TIM_ITRx_SetConfig>
      break;
 8005a88:	e02b      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6859      	ldr	r1, [r3, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	461a      	mov	r2, r3
 8005a98:	f000 fb46 	bl	8006128 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2160      	movs	r1, #96	; 0x60
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 fbe6 	bl	8006274 <TIM_ITRx_SetConfig>
      break;
 8005aa8:	e01b      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6818      	ldr	r0, [r3, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	6859      	ldr	r1, [r3, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f000 facc 	bl	8006054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2140      	movs	r1, #64	; 0x40
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fbd6 	bl	8006274 <TIM_ITRx_SetConfig>
      break;
 8005ac8:	e00b      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	f000 fbcd 	bl	8006274 <TIM_ITRx_SetConfig>
        break;
 8005ada:	e002      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005adc:	bf00      	nop
 8005ade:	e000      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005ae0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b0c      	cmp	r3, #12
 8005b0e:	d831      	bhi.n	8005b74 <HAL_TIM_ReadCapturedValue+0x78>
 8005b10:	a201      	add	r2, pc, #4	; (adr r2, 8005b18 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b16:	bf00      	nop
 8005b18:	08005b4d 	.word	0x08005b4d
 8005b1c:	08005b75 	.word	0x08005b75
 8005b20:	08005b75 	.word	0x08005b75
 8005b24:	08005b75 	.word	0x08005b75
 8005b28:	08005b57 	.word	0x08005b57
 8005b2c:	08005b75 	.word	0x08005b75
 8005b30:	08005b75 	.word	0x08005b75
 8005b34:	08005b75 	.word	0x08005b75
 8005b38:	08005b61 	.word	0x08005b61
 8005b3c:	08005b75 	.word	0x08005b75
 8005b40:	08005b75 	.word	0x08005b75
 8005b44:	08005b75 	.word	0x08005b75
 8005b48:	08005b6b 	.word	0x08005b6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b52:	60fb      	str	r3, [r7, #12]

      break;
 8005b54:	e00f      	b.n	8005b76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	60fb      	str	r3, [r7, #12]

      break;
 8005b5e:	e00a      	b.n	8005b76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b66:	60fb      	str	r3, [r7, #12]

      break;
 8005b68:	e005      	b.n	8005b76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	60fb      	str	r3, [r7, #12]

      break;
 8005b72:	e000      	b.n	8005b76 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005b74:	bf00      	nop
  }

  return tmpreg;
 8005b76:	68fb      	ldr	r3, [r7, #12]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop

08005b84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bc80      	pop	{r7}
 8005b94:	4770      	bx	lr

08005b96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bc80      	pop	{r7}
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr

08005bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr

08005bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a29      	ldr	r2, [pc, #164]	; (8005c84 <TIM_Base_SetConfig+0xb8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00b      	beq.n	8005bfc <TIM_Base_SetConfig+0x30>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bea:	d007      	beq.n	8005bfc <TIM_Base_SetConfig+0x30>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a26      	ldr	r2, [pc, #152]	; (8005c88 <TIM_Base_SetConfig+0xbc>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d003      	beq.n	8005bfc <TIM_Base_SetConfig+0x30>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a25      	ldr	r2, [pc, #148]	; (8005c8c <TIM_Base_SetConfig+0xc0>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d108      	bne.n	8005c0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a1c      	ldr	r2, [pc, #112]	; (8005c84 <TIM_Base_SetConfig+0xb8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00b      	beq.n	8005c2e <TIM_Base_SetConfig+0x62>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c1c:	d007      	beq.n	8005c2e <TIM_Base_SetConfig+0x62>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a19      	ldr	r2, [pc, #100]	; (8005c88 <TIM_Base_SetConfig+0xbc>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d003      	beq.n	8005c2e <TIM_Base_SetConfig+0x62>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a18      	ldr	r2, [pc, #96]	; (8005c8c <TIM_Base_SetConfig+0xc0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d108      	bne.n	8005c40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a07      	ldr	r2, [pc, #28]	; (8005c84 <TIM_Base_SetConfig+0xb8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d103      	bne.n	8005c74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	615a      	str	r2, [r3, #20]
}
 8005c7a:	bf00      	nop
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bc80      	pop	{r7}
 8005c82:	4770      	bx	lr
 8005c84:	40012c00 	.word	0x40012c00
 8005c88:	40000400 	.word	0x40000400
 8005c8c:	40000800 	.word	0x40000800

08005c90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f023 0201 	bic.w	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f023 0303 	bic.w	r3, r3, #3
 8005cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f023 0302 	bic.w	r3, r3, #2
 8005cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a1c      	ldr	r2, [pc, #112]	; (8005d58 <TIM_OC1_SetConfig+0xc8>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d10c      	bne.n	8005d06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f023 0308 	bic.w	r3, r3, #8
 8005cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f023 0304 	bic.w	r3, r3, #4
 8005d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a13      	ldr	r2, [pc, #76]	; (8005d58 <TIM_OC1_SetConfig+0xc8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d111      	bne.n	8005d32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	621a      	str	r2, [r3, #32]
}
 8005d4c:	bf00      	nop
 8005d4e:	371c      	adds	r7, #28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40012c00 	.word	0x40012c00

08005d5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	f023 0210 	bic.w	r2, r3, #16
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	021b      	lsls	r3, r3, #8
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f023 0320 	bic.w	r3, r3, #32
 8005da6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a1d      	ldr	r2, [pc, #116]	; (8005e2c <TIM_OC2_SetConfig+0xd0>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d10d      	bne.n	8005dd8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a14      	ldr	r2, [pc, #80]	; (8005e2c <TIM_OC2_SetConfig+0xd0>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d113      	bne.n	8005e08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005de6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	621a      	str	r2, [r3, #32]
}
 8005e22:	bf00      	nop
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bc80      	pop	{r7}
 8005e2a:	4770      	bx	lr
 8005e2c:	40012c00 	.word	0x40012c00

08005e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0303 	bic.w	r3, r3, #3
 8005e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	021b      	lsls	r3, r3, #8
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a1d      	ldr	r2, [pc, #116]	; (8005f00 <TIM_OC3_SetConfig+0xd0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d10d      	bne.n	8005eaa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	021b      	lsls	r3, r3, #8
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a14      	ldr	r2, [pc, #80]	; (8005f00 <TIM_OC3_SetConfig+0xd0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d113      	bne.n	8005eda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	011b      	lsls	r3, r3, #4
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	621a      	str	r2, [r3, #32]
}
 8005ef4:	bf00      	nop
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bc80      	pop	{r7}
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	40012c00 	.word	0x40012c00

08005f04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	031b      	lsls	r3, r3, #12
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a0f      	ldr	r2, [pc, #60]	; (8005f9c <TIM_OC4_SetConfig+0x98>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d109      	bne.n	8005f78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	019b      	lsls	r3, r3, #6
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	621a      	str	r2, [r3, #32]
}
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bc80      	pop	{r7}
 8005f9a:	4770      	bx	lr
 8005f9c:	40012c00 	.word	0x40012c00

08005fa0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	f023 0201 	bic.w	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4a1f      	ldr	r2, [pc, #124]	; (8006048 <TIM_TI1_SetConfig+0xa8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00b      	beq.n	8005fe6 <TIM_TI1_SetConfig+0x46>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd4:	d007      	beq.n	8005fe6 <TIM_TI1_SetConfig+0x46>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4a1c      	ldr	r2, [pc, #112]	; (800604c <TIM_TI1_SetConfig+0xac>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d003      	beq.n	8005fe6 <TIM_TI1_SetConfig+0x46>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4a1b      	ldr	r2, [pc, #108]	; (8006050 <TIM_TI1_SetConfig+0xb0>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d101      	bne.n	8005fea <TIM_TI1_SetConfig+0x4a>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e000      	b.n	8005fec <TIM_TI1_SetConfig+0x4c>
 8005fea:	2300      	movs	r3, #0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d008      	beq.n	8006002 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f023 0303 	bic.w	r3, r3, #3
 8005ff6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	e003      	b.n	800600a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f043 0301 	orr.w	r3, r3, #1
 8006008:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006010:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	b2db      	uxtb	r3, r3
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f023 030a 	bic.w	r3, r3, #10
 8006024:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f003 030a 	and.w	r3, r3, #10
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	4313      	orrs	r3, r2
 8006030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	621a      	str	r2, [r3, #32]
}
 800603e:	bf00      	nop
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	bc80      	pop	{r7}
 8006046:	4770      	bx	lr
 8006048:	40012c00 	.word	0x40012c00
 800604c:	40000400 	.word	0x40000400
 8006050:	40000800 	.word	0x40000800

08006054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	f023 0201 	bic.w	r2, r3, #1
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800607e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f023 030a 	bic.w	r3, r3, #10
 8006090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	621a      	str	r2, [r3, #32]
}
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr

080060b0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f023 0210 	bic.w	r2, r3, #16
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	021b      	lsls	r3, r3, #8
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	031b      	lsls	r3, r3, #12
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006102:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr

08006128 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	f023 0210 	bic.w	r2, r3, #16
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006152:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	031b      	lsls	r3, r3, #12
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	4313      	orrs	r3, r2
 800615c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006164:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	621a      	str	r2, [r3, #32]
}
 800617c:	bf00      	nop
 800617e:	371c      	adds	r7, #28
 8006180:	46bd      	mov	sp, r7
 8006182:	bc80      	pop	{r7}
 8006184:	4770      	bx	lr

08006186 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006186:	b480      	push	{r7}
 8006188:	b087      	sub	sp, #28
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	607a      	str	r2, [r7, #4]
 8006192:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f023 0303 	bic.w	r3, r3, #3
 80061b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	621a      	str	r2, [r3, #32]
}
 80061f2:	bf00      	nop
 80061f4:	371c      	adds	r7, #28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr

080061fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006228:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800623a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	031b      	lsls	r3, r3, #12
 8006240:	b29b      	uxth	r3, r3
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	4313      	orrs	r3, r2
 8006246:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800624e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	031b      	lsls	r3, r3, #12
 8006254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	4313      	orrs	r3, r2
 800625c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	f043 0307 	orr.w	r3, r3, #7
 8006296:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	609a      	str	r2, [r3, #8]
}
 800629e:	bf00      	nop
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bc80      	pop	{r7}
 80062a6:	4770      	bx	lr

080062a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	021a      	lsls	r2, r3, #8
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	431a      	orrs	r2, r3
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	609a      	str	r2, [r3, #8]
}
 80062dc:	bf00      	nop
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr

080062e6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b087      	sub	sp, #28
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	60f8      	str	r0, [r7, #12]
 80062ee:	60b9      	str	r1, [r7, #8]
 80062f0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f003 031f 	and.w	r3, r3, #31
 80062f8:	2201      	movs	r2, #1
 80062fa:	fa02 f303 	lsl.w	r3, r2, r3
 80062fe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a1a      	ldr	r2, [r3, #32]
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	43db      	mvns	r3, r3
 8006308:	401a      	ands	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1a      	ldr	r2, [r3, #32]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	fa01 f303 	lsl.w	r3, r1, r3
 800631e:	431a      	orrs	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	621a      	str	r2, [r3, #32]
}
 8006324:	bf00      	nop
 8006326:	371c      	adds	r7, #28
 8006328:	46bd      	mov	sp, r7
 800632a:	bc80      	pop	{r7}
 800632c:	4770      	bx	lr
	...

08006330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006340:	2b01      	cmp	r3, #1
 8006342:	d101      	bne.n	8006348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006344:	2302      	movs	r3, #2
 8006346:	e046      	b.n	80063d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a16      	ldr	r2, [pc, #88]	; (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00e      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006394:	d009      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a12      	ldr	r2, [pc, #72]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d004      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a10      	ldr	r2, [pc, #64]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d10c      	bne.n	80063c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	bc80      	pop	{r7}
 80063de:	4770      	bx	lr
 80063e0:	40012c00 	.word	0x40012c00
 80063e4:	40000400 	.word	0x40000400
 80063e8:	40000800 	.word	0x40000800

080063ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bc80      	pop	{r7}
 80063fc:	4770      	bx	lr

080063fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	bc80      	pop	{r7}
 800640e:	4770      	bx	lr

08006410 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006410:	b084      	sub	sp, #16
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	f107 0014 	add.w	r0, r7, #20
 800641e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	bc80      	pop	{r7}
 800642c:	b004      	add	sp, #16
 800642e:	4770      	bx	lr

08006430 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006440:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006444:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	b29a      	uxth	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	bc80      	pop	{r7}
 800645a:	4770      	bx	lr

0800645c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006464:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006468:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006470:	b29a      	uxth	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	b29b      	uxth	r3, r3
 8006476:	43db      	mvns	r3, r3
 8006478:	b29b      	uxth	r3, r3
 800647a:	4013      	ands	r3, r2
 800647c:	b29a      	uxth	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr

08006490 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bc80      	pop	{r7}
 80064a6:	4770      	bx	lr

080064a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80064a8:	b084      	sub	sp, #16
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	f107 0014 	add.w	r0, r7, #20
 80064b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bc80      	pop	{r7}
 80064e4:	b004      	add	sp, #16
 80064e6:	4770      	bx	lr

080064e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b09b      	sub	sp, #108	; 0x6c
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	b29b      	uxth	r3, r3
 8006506:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800650a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	78db      	ldrb	r3, [r3, #3]
 8006516:	2b03      	cmp	r3, #3
 8006518:	d81f      	bhi.n	800655a <USB_ActivateEndpoint+0x72>
 800651a:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <USB_ActivateEndpoint+0x38>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006531 	.word	0x08006531
 8006524:	0800654d 	.word	0x0800654d
 8006528:	08006563 	.word	0x08006563
 800652c:	0800653f 	.word	0x0800653f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006530:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006534:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006538:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800653c:	e012      	b.n	8006564 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800653e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006542:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006546:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800654a:	e00b      	b.n	8006564 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800654c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006550:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006554:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006558:	e004      	b.n	8006564 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006560:	e000      	b.n	8006564 <USB_ActivateEndpoint+0x7c>
      break;
 8006562:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	441a      	add	r2, r3
 800656e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800657a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800657e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006582:	b29b      	uxth	r3, r3
 8006584:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659c:	b29a      	uxth	r2, r3
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	4313      	orrs	r3, r2
 80065a6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	441a      	add	r2, r3
 80065b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80065b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	7b1b      	ldrb	r3, [r3, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f040 8149 	bne.w	8006868 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 8084 	beq.w	80066e8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	4413      	add	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	011a      	lsls	r2, r3, #4
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	88db      	ldrh	r3, [r3, #6]
 8006608:	085b      	lsrs	r3, r3, #1
 800660a:	b29b      	uxth	r3, r3
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	b29a      	uxth	r2, r3
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	81fb      	strh	r3, [r7, #14]
 8006622:	89fb      	ldrh	r3, [r7, #14]
 8006624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01b      	beq.n	8006664 <USB_ActivateEndpoint+0x17c>
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29b      	uxth	r3, r3
 800663a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006642:	81bb      	strh	r3, [r7, #12]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	441a      	add	r2, r3
 800664e:	89bb      	ldrh	r3, [r7, #12]
 8006650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006660:	b29b      	uxth	r3, r3
 8006662:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	78db      	ldrb	r3, [r3, #3]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d020      	beq.n	80066ae <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	b29b      	uxth	r3, r3
 800667a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006682:	813b      	strh	r3, [r7, #8]
 8006684:	893b      	ldrh	r3, [r7, #8]
 8006686:	f083 0320 	eor.w	r3, r3, #32
 800668a:	813b      	strh	r3, [r7, #8]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	441a      	add	r2, r3
 8006696:	893b      	ldrh	r3, [r7, #8]
 8006698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800669c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	8013      	strh	r3, [r2, #0]
 80066ac:	e27f      	b.n	8006bae <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066c4:	817b      	strh	r3, [r7, #10]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	441a      	add	r2, r3
 80066d0:	897b      	ldrh	r3, [r7, #10]
 80066d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	8013      	strh	r3, [r2, #0]
 80066e6:	e262      	b.n	8006bae <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	461a      	mov	r2, r3
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	4413      	add	r3, r2
 80066fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	011a      	lsls	r2, r3, #4
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	4413      	add	r3, r2
 8006706:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800670a:	62bb      	str	r3, [r7, #40]	; 0x28
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	88db      	ldrh	r3, [r3, #6]
 8006710:	085b      	lsrs	r3, r3, #1
 8006712:	b29b      	uxth	r3, r3
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006726:	b29b      	uxth	r3, r3
 8006728:	461a      	mov	r2, r3
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	4413      	add	r3, r2
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	011a      	lsls	r2, r3, #4
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	4413      	add	r3, r2
 800673a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800673e:	623b      	str	r3, [r7, #32]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d112      	bne.n	800676e <USB_ActivateEndpoint+0x286>
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006752:	b29a      	uxth	r2, r3
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b29b      	uxth	r3, r3
 800675e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006766:	b29a      	uxth	r2, r3
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	e02f      	b.n	80067ce <USB_ActivateEndpoint+0x2e6>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	2b3e      	cmp	r3, #62	; 0x3e
 8006774:	d813      	bhi.n	800679e <USB_ActivateEndpoint+0x2b6>
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	085b      	lsrs	r3, r3, #1
 800677c:	663b      	str	r3, [r7, #96]	; 0x60
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <USB_ActivateEndpoint+0x2a8>
 800678a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800678c:	3301      	adds	r3, #1
 800678e:	663b      	str	r3, [r7, #96]	; 0x60
 8006790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006792:	b29b      	uxth	r3, r3
 8006794:	029b      	lsls	r3, r3, #10
 8006796:	b29a      	uxth	r2, r3
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	801a      	strh	r2, [r3, #0]
 800679c:	e017      	b.n	80067ce <USB_ActivateEndpoint+0x2e6>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	095b      	lsrs	r3, r3, #5
 80067a4:	663b      	str	r3, [r7, #96]	; 0x60
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f003 031f 	and.w	r3, r3, #31
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d102      	bne.n	80067b8 <USB_ActivateEndpoint+0x2d0>
 80067b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067b4:	3b01      	subs	r3, #1
 80067b6:	663b      	str	r3, [r7, #96]	; 0x60
 80067b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	029b      	lsls	r3, r3, #10
 80067be:	b29b      	uxth	r3, r3
 80067c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	83fb      	strh	r3, [r7, #30]
 80067dc:	8bfb      	ldrh	r3, [r7, #30]
 80067de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d01b      	beq.n	800681e <USB_ActivateEndpoint+0x336>
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fc:	83bb      	strh	r3, [r7, #28]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	441a      	add	r2, r3
 8006808:	8bbb      	ldrh	r3, [r7, #28]
 800680a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800680e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681a:	b29b      	uxth	r3, r3
 800681c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006834:	837b      	strh	r3, [r7, #26]
 8006836:	8b7b      	ldrh	r3, [r7, #26]
 8006838:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800683c:	837b      	strh	r3, [r7, #26]
 800683e:	8b7b      	ldrh	r3, [r7, #26]
 8006840:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006844:	837b      	strh	r3, [r7, #26]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	441a      	add	r2, r3
 8006850:	8b7b      	ldrh	r3, [r7, #26]
 8006852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800685a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006862:	b29b      	uxth	r3, r3
 8006864:	8013      	strh	r3, [r2, #0]
 8006866:	e1a2      	b.n	8006bae <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	b29b      	uxth	r3, r3
 8006876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800687a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	441a      	add	r2, r3
 800688c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006898:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800689c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068b4:	4413      	add	r3, r2
 80068b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	011a      	lsls	r2, r3, #4
 80068be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068c6:	657b      	str	r3, [r7, #84]	; 0x54
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	891b      	ldrh	r3, [r3, #8]
 80068cc:	085b      	lsrs	r3, r3, #1
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068d6:	801a      	strh	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	653b      	str	r3, [r7, #80]	; 0x50
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	461a      	mov	r2, r3
 80068e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e8:	4413      	add	r3, r2
 80068ea:	653b      	str	r3, [r7, #80]	; 0x50
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	011a      	lsls	r2, r3, #4
 80068f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80068fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	895b      	ldrh	r3, [r3, #10]
 8006900:	085b      	lsrs	r3, r3, #1
 8006902:	b29b      	uxth	r3, r3
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800690a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	2b00      	cmp	r3, #0
 8006912:	f040 8091 	bne.w	8006a38 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006924:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01b      	beq.n	8006966 <USB_ActivateEndpoint+0x47e>
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006944:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	441a      	add	r2, r3
 8006950:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800695a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800695e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006962:	b29b      	uxth	r3, r3
 8006964:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	873b      	strh	r3, [r7, #56]	; 0x38
 8006974:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697a:	2b00      	cmp	r3, #0
 800697c:	d01b      	beq.n	80069b6 <USB_ActivateEndpoint+0x4ce>
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006994:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	441a      	add	r2, r3
 80069a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80069a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80069ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80069d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	441a      	add	r2, r3
 80069e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a14:	867b      	strh	r3, [r7, #50]	; 0x32
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	441a      	add	r2, r3
 8006a20:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	8013      	strh	r3, [r2, #0]
 8006a36:	e0ba      	b.n	8006bae <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006a48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d01d      	beq.n	8006a90 <USB_ActivateEndpoint+0x5a8>
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	441a      	add	r2, r3
 8006a78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006aa0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d01d      	beq.n	8006ae8 <USB_ActivateEndpoint+0x600>
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	441a      	add	r2, r3
 8006ad0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	78db      	ldrb	r3, [r3, #3]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d024      	beq.n	8006b3a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b0e:	f083 0320 	eor.w	r3, r3, #32
 8006b12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	441a      	add	r2, r3
 8006b20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	8013      	strh	r3, [r2, #0]
 8006b38:	e01d      	b.n	8006b76 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	441a      	add	r2, r3
 8006b5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	441a      	add	r2, r3
 8006b98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006bae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	376c      	adds	r7, #108	; 0x6c
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bc80      	pop	{r7}
 8006bba:	4770      	bx	lr

08006bbc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b08d      	sub	sp, #52	; 0x34
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	7b1b      	ldrb	r3, [r3, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f040 808e 	bne.w	8006cec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	785b      	ldrb	r3, [r3, #1]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d044      	beq.n	8006c62 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	81bb      	strh	r3, [r7, #12]
 8006be6:	89bb      	ldrh	r3, [r7, #12]
 8006be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d01b      	beq.n	8006c28 <USB_DeactivateEndpoint+0x6c>
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c06:	817b      	strh	r3, [r7, #10]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	441a      	add	r2, r3
 8006c12:	897b      	ldrh	r3, [r7, #10]
 8006c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c3e:	813b      	strh	r3, [r7, #8]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	441a      	add	r2, r3
 8006c4a:	893b      	ldrh	r3, [r7, #8]
 8006c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	8013      	strh	r3, [r2, #0]
 8006c60:	e192      	b.n	8006f88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	827b      	strh	r3, [r7, #18]
 8006c70:	8a7b      	ldrh	r3, [r7, #18]
 8006c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d01b      	beq.n	8006cb2 <USB_DeactivateEndpoint+0xf6>
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c90:	823b      	strh	r3, [r7, #16]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	441a      	add	r2, r3
 8006c9c:	8a3b      	ldrh	r3, [r7, #16]
 8006c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc8:	81fb      	strh	r3, [r7, #14]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	441a      	add	r2, r3
 8006cd4:	89fb      	ldrh	r3, [r7, #14]
 8006cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	8013      	strh	r3, [r2, #0]
 8006cea:	e14d      	b.n	8006f88 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	785b      	ldrb	r3, [r3, #1]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f040 80a5 	bne.w	8006e40 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	843b      	strh	r3, [r7, #32]
 8006d04:	8c3b      	ldrh	r3, [r7, #32]
 8006d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01b      	beq.n	8006d46 <USB_DeactivateEndpoint+0x18a>
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d24:	83fb      	strh	r3, [r7, #30]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	441a      	add	r2, r3
 8006d30:	8bfb      	ldrh	r3, [r7, #30]
 8006d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	83bb      	strh	r3, [r7, #28]
 8006d54:	8bbb      	ldrh	r3, [r7, #28]
 8006d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d01b      	beq.n	8006d96 <USB_DeactivateEndpoint+0x1da>
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d74:	837b      	strh	r3, [r7, #26]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	441a      	add	r2, r3
 8006d80:	8b7b      	ldrh	r3, [r7, #26]
 8006d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dac:	833b      	strh	r3, [r7, #24]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	441a      	add	r2, r3
 8006db8:	8b3b      	ldrh	r3, [r7, #24]
 8006dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de4:	82fb      	strh	r3, [r7, #22]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	441a      	add	r2, r3
 8006df0:	8afb      	ldrh	r3, [r7, #22]
 8006df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e1c:	82bb      	strh	r3, [r7, #20]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	441a      	add	r2, r3
 8006e28:	8abb      	ldrh	r3, [r7, #20]
 8006e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	8013      	strh	r3, [r2, #0]
 8006e3e:	e0a3      	b.n	8006f88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006e4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01b      	beq.n	8006e90 <USB_DeactivateEndpoint+0x2d4>
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	441a      	add	r2, r3
 8006e7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006e9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01b      	beq.n	8006ee0 <USB_DeactivateEndpoint+0x324>
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebe:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	441a      	add	r2, r3
 8006eca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ed8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	441a      	add	r2, r3
 8006f02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	441a      	add	r2, r3
 8006f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f66:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	441a      	add	r2, r3
 8006f72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3734      	adds	r7, #52	; 0x34
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bc80      	pop	{r7}
 8006f92:	4770      	bx	lr

08006f94 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b0cc      	sub	sp, #304	; 0x130
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fa2:	6018      	str	r0, [r3, #0]
 8006fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fac:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	785b      	ldrb	r3, [r3, #1]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	f041 817d 	bne.w	80082ba <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	699a      	ldr	r2, [r3, #24]
 8006fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d908      	bls.n	8006fee <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006fec:	e007      	b.n	8006ffe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	7b1b      	ldrb	r3, [r3, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d152      	bne.n	80070b4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800700e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007012:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6959      	ldr	r1, [r3, #20]
 800701a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	88da      	ldrh	r2, [r3, #6]
 8007026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800702a:	b29b      	uxth	r3, r3
 800702c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007030:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007034:	6800      	ldr	r0, [r0, #0]
 8007036:	f001 ff23 	bl	8008e80 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800703a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007042:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007046:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800704a:	6812      	ldr	r2, [r2, #0]
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007052:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705c:	b29b      	uxth	r3, r3
 800705e:	4619      	mov	r1, r3
 8007060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007064:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007068:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800706c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007070:	6812      	ldr	r2, [r2, #0]
 8007072:	440a      	add	r2, r1
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	011a      	lsls	r2, r3, #4
 8007084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007088:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4413      	add	r3, r2
 8007090:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007098:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	801a      	strh	r2, [r3, #0]
 80070b0:	f001 b8b5 	b.w	800821e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80070b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	78db      	ldrb	r3, [r3, #3]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	f040 84c6 	bne.w	8007a52 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80070c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6a1a      	ldr	r2, [r3, #32]
 80070d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	429a      	cmp	r2, r3
 80070e0:	f240 8443 	bls.w	800796a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80070e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	b29b      	uxth	r3, r3
 8007102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800710e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007112:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	441a      	add	r2, r3
 8007128:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800712c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007134:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713c:	b29b      	uxth	r3, r3
 800713e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6a1a      	ldr	r2, [r3, #32]
 800714c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007150:	1ad2      	subs	r2, r2, r3
 8007152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800715e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007162:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	b29b      	uxth	r3, r3
 800717c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 823e 	beq.w	8007602 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800718e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007192:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007196:	6812      	ldr	r2, [r2, #0]
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	785b      	ldrb	r3, [r3, #1]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f040 809a 	bne.w	80072e0 <USB_EPStartXfer+0x34c>
 80071ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071b8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80071bc:	6812      	ldr	r2, [r2, #0]
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	4619      	mov	r1, r3
 80071d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071de:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	440a      	add	r2, r1
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	011a      	lsls	r2, r3, #4
 80071f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4413      	add	r3, r2
 8007202:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007214:	2b00      	cmp	r3, #0
 8007216:	d122      	bne.n	800725e <USB_EPStartXfer+0x2ca>
 8007218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	b29b      	uxth	r3, r3
 8007226:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800722a:	b29a      	uxth	r2, r3
 800722c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007230:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	801a      	strh	r2, [r3, #0]
 8007238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29b      	uxth	r3, r3
 8007246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800724a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800724e:	b29a      	uxth	r2, r3
 8007250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007254:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	801a      	strh	r2, [r3, #0]
 800725c:	e079      	b.n	8007352 <USB_EPStartXfer+0x3be>
 800725e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007262:	2b3e      	cmp	r3, #62	; 0x3e
 8007264:	d81b      	bhi.n	800729e <USB_EPStartXfer+0x30a>
 8007266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800726a:	085b      	lsrs	r3, r3, #1
 800726c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d004      	beq.n	8007286 <USB_EPStartXfer+0x2f2>
 800727c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007280:	3301      	adds	r3, #1
 8007282:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007286:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800728a:	b29b      	uxth	r3, r3
 800728c:	029b      	lsls	r3, r3, #10
 800728e:	b29a      	uxth	r2, r3
 8007290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007294:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	801a      	strh	r2, [r3, #0]
 800729c:	e059      	b.n	8007352 <USB_EPStartXfer+0x3be>
 800729e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a2:	095b      	lsrs	r3, r3, #5
 80072a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d104      	bne.n	80072be <USB_EPStartXfer+0x32a>
 80072b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072b8:	3b01      	subs	r3, #1
 80072ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	029b      	lsls	r3, r3, #10
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	801a      	strh	r2, [r3, #0]
 80072de:	e038      	b.n	8007352 <USB_EPStartXfer+0x3be>
 80072e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	785b      	ldrb	r3, [r3, #1]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d130      	bne.n	8007352 <USB_EPStartXfer+0x3be>
 80072f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072fe:	b29b      	uxth	r3, r3
 8007300:	4619      	mov	r1, r3
 8007302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007306:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800730a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800730e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007312:	6812      	ldr	r2, [r2, #0]
 8007314:	440a      	add	r2, r1
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	011a      	lsls	r2, r3, #4
 8007326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4413      	add	r3, r2
 8007332:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007344:	b29a      	uxth	r2, r3
 8007346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	895b      	ldrh	r3, [r3, #10]
 800735e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6959      	ldr	r1, [r3, #20]
 800736e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007372:	b29b      	uxth	r3, r3
 8007374:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007378:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800737c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007380:	6800      	ldr	r0, [r0, #0]
 8007382:	f001 fd7d 	bl	8008e80 <USB_WritePMA>
            ep->xfer_buff += len;
 8007386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	695a      	ldr	r2, [r3, #20]
 8007392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007396:	441a      	add	r2, r3
 8007398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80073a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6a1a      	ldr	r2, [r3, #32]
 80073b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d90f      	bls.n	80073e0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80073c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6a1a      	ldr	r2, [r3, #32]
 80073cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d0:	1ad2      	subs	r2, r2, r3
 80073d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	621a      	str	r2, [r3, #32]
 80073de:	e00e      	b.n	80073fe <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80073e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80073f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2200      	movs	r2, #0
 80073fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	2b00      	cmp	r3, #0
 800740c:	f040 809a 	bne.w	8007544 <USB_EPStartXfer+0x5b0>
 8007410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007414:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007418:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800741c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007420:	6812      	ldr	r2, [r2, #0]
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007428:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007432:	b29b      	uxth	r3, r3
 8007434:	4619      	mov	r1, r3
 8007436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800743e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007442:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007446:	6812      	ldr	r2, [r2, #0]
 8007448:	440a      	add	r2, r1
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	011a      	lsls	r2, r3, #4
 800745a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4413      	add	r3, r2
 8007466:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800746a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007478:	2b00      	cmp	r3, #0
 800747a:	d122      	bne.n	80074c2 <USB_EPStartXfer+0x52e>
 800747c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007480:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	b29b      	uxth	r3, r3
 800748a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800748e:	b29a      	uxth	r2, r3
 8007490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007494:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	801a      	strh	r2, [r3, #0]
 800749c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	801a      	strh	r2, [r3, #0]
 80074c0:	e083      	b.n	80075ca <USB_EPStartXfer+0x636>
 80074c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c6:	2b3e      	cmp	r3, #62	; 0x3e
 80074c8:	d81b      	bhi.n	8007502 <USB_EPStartXfer+0x56e>
 80074ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ce:	085b      	lsrs	r3, r3, #1
 80074d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80074d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d004      	beq.n	80074ea <USB_EPStartXfer+0x556>
 80074e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80074e4:	3301      	adds	r3, #1
 80074e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80074ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	029b      	lsls	r3, r3, #10
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	801a      	strh	r2, [r3, #0]
 8007500:	e063      	b.n	80075ca <USB_EPStartXfer+0x636>
 8007502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007506:	095b      	lsrs	r3, r3, #5
 8007508:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800750c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007510:	f003 031f 	and.w	r3, r3, #31
 8007514:	2b00      	cmp	r3, #0
 8007516:	d104      	bne.n	8007522 <USB_EPStartXfer+0x58e>
 8007518:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800751c:	3b01      	subs	r3, #1
 800751e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007522:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007526:	b29b      	uxth	r3, r3
 8007528:	029b      	lsls	r3, r3, #10
 800752a:	b29b      	uxth	r3, r3
 800752c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007534:	b29a      	uxth	r2, r3
 8007536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	801a      	strh	r2, [r3, #0]
 8007542:	e042      	b.n	80075ca <USB_EPStartXfer+0x636>
 8007544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	785b      	ldrb	r3, [r3, #1]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d13a      	bne.n	80075ca <USB_EPStartXfer+0x636>
 8007554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007558:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800755c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007560:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007564:	6812      	ldr	r2, [r2, #0]
 8007566:	601a      	str	r2, [r3, #0]
 8007568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007576:	b29b      	uxth	r3, r3
 8007578:	4619      	mov	r1, r3
 800757a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800757e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007582:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007586:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800758a:	6812      	ldr	r2, [r2, #0]
 800758c:	440a      	add	r2, r1
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	011a      	lsls	r2, r3, #4
 800759e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4413      	add	r3, r2
 80075aa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80075ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075bc:	b29a      	uxth	r2, r3
 80075be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80075ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	891b      	ldrh	r3, [r3, #8]
 80075d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6959      	ldr	r1, [r3, #20]
 80075e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80075f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80075f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80075f8:	6800      	ldr	r0, [r0, #0]
 80075fa:	f001 fc41 	bl	8008e80 <USB_WritePMA>
 80075fe:	f000 be0e 	b.w	800821e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	785b      	ldrb	r3, [r3, #1]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d16d      	bne.n	80076ee <USB_EPStartXfer+0x75a>
 8007612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007616:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	64bb      	str	r3, [r7, #72]	; 0x48
 800761e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007622:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800762c:	b29b      	uxth	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007632:	4413      	add	r3, r2
 8007634:	64bb      	str	r3, [r7, #72]	; 0x48
 8007636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	011a      	lsls	r2, r3, #4
 8007644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007646:	4413      	add	r3, r2
 8007648:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800764c:	647b      	str	r3, [r7, #68]	; 0x44
 800764e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007652:	2b00      	cmp	r3, #0
 8007654:	d112      	bne.n	800767c <USB_EPStartXfer+0x6e8>
 8007656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	b29b      	uxth	r3, r3
 800765c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007660:	b29a      	uxth	r2, r3
 8007662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	b29b      	uxth	r3, r3
 800766c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007674:	b29a      	uxth	r2, r3
 8007676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007678:	801a      	strh	r2, [r3, #0]
 800767a:	e063      	b.n	8007744 <USB_EPStartXfer+0x7b0>
 800767c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007680:	2b3e      	cmp	r3, #62	; 0x3e
 8007682:	d817      	bhi.n	80076b4 <USB_EPStartXfer+0x720>
 8007684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007688:	085b      	lsrs	r3, r3, #1
 800768a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800768e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d004      	beq.n	80076a4 <USB_EPStartXfer+0x710>
 800769a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800769e:	3301      	adds	r3, #1
 80076a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	029b      	lsls	r3, r3, #10
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b0:	801a      	strh	r2, [r3, #0]
 80076b2:	e047      	b.n	8007744 <USB_EPStartXfer+0x7b0>
 80076b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b8:	095b      	lsrs	r3, r3, #5
 80076ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c2:	f003 031f 	and.w	r3, r3, #31
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <USB_EPStartXfer+0x740>
 80076ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076ce:	3b01      	subs	r3, #1
 80076d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076d8:	b29b      	uxth	r3, r3
 80076da:	029b      	lsls	r3, r3, #10
 80076dc:	b29b      	uxth	r3, r3
 80076de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ea:	801a      	strh	r2, [r3, #0]
 80076ec:	e02a      	b.n	8007744 <USB_EPStartXfer+0x7b0>
 80076ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	785b      	ldrb	r3, [r3, #1]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d122      	bne.n	8007744 <USB_EPStartXfer+0x7b0>
 80076fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007702:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	653b      	str	r3, [r7, #80]	; 0x50
 800770a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800770e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007718:	b29b      	uxth	r3, r3
 800771a:	461a      	mov	r2, r3
 800771c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800771e:	4413      	add	r3, r2
 8007720:	653b      	str	r3, [r7, #80]	; 0x50
 8007722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	011a      	lsls	r2, r3, #4
 8007730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007732:	4413      	add	r3, r2
 8007734:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007738:	64fb      	str	r3, [r7, #76]	; 0x4c
 800773a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800773e:	b29a      	uxth	r2, r3
 8007740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007742:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	891b      	ldrh	r3, [r3, #8]
 8007750:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6959      	ldr	r1, [r3, #20]
 8007760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007764:	b29b      	uxth	r3, r3
 8007766:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800776a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800776e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007772:	6800      	ldr	r0, [r0, #0]
 8007774:	f001 fb84 	bl	8008e80 <USB_WritePMA>
            ep->xfer_buff += len;
 8007778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	695a      	ldr	r2, [r3, #20]
 8007784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007788:	441a      	add	r2, r3
 800778a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6a1a      	ldr	r2, [r3, #32]
 80077a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d90f      	bls.n	80077d2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80077b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6a1a      	ldr	r2, [r3, #32]
 80077be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c2:	1ad2      	subs	r2, r2, r3
 80077c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	621a      	str	r2, [r3, #32]
 80077d0:	e00e      	b.n	80077f0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80077d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80077e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2200      	movs	r2, #0
 80077ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	643b      	str	r3, [r7, #64]	; 0x40
 80077fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	785b      	ldrb	r3, [r3, #1]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d16d      	bne.n	80078e8 <USB_EPStartXfer+0x954>
 800780c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007810:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	63bb      	str	r3, [r7, #56]	; 0x38
 8007818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007826:	b29b      	uxth	r3, r3
 8007828:	461a      	mov	r2, r3
 800782a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782c:	4413      	add	r3, r2
 800782e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	011a      	lsls	r2, r3, #4
 800783e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007840:	4413      	add	r3, r2
 8007842:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007846:	637b      	str	r3, [r7, #52]	; 0x34
 8007848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800784c:	2b00      	cmp	r3, #0
 800784e:	d112      	bne.n	8007876 <USB_EPStartXfer+0x8e2>
 8007850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	b29b      	uxth	r3, r3
 8007856:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800785a:	b29a      	uxth	r2, r3
 800785c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785e:	801a      	strh	r2, [r3, #0]
 8007860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	b29b      	uxth	r3, r3
 8007866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800786a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800786e:	b29a      	uxth	r2, r3
 8007870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007872:	801a      	strh	r2, [r3, #0]
 8007874:	e05d      	b.n	8007932 <USB_EPStartXfer+0x99e>
 8007876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800787a:	2b3e      	cmp	r3, #62	; 0x3e
 800787c:	d817      	bhi.n	80078ae <USB_EPStartXfer+0x91a>
 800787e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007882:	085b      	lsrs	r3, r3, #1
 8007884:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d004      	beq.n	800789e <USB_EPStartXfer+0x90a>
 8007894:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007898:	3301      	adds	r3, #1
 800789a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800789e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	029b      	lsls	r3, r3, #10
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078aa:	801a      	strh	r2, [r3, #0]
 80078ac:	e041      	b.n	8007932 <USB_EPStartXfer+0x99e>
 80078ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078b2:	095b      	lsrs	r3, r3, #5
 80078b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80078b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078bc:	f003 031f 	and.w	r3, r3, #31
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d104      	bne.n	80078ce <USB_EPStartXfer+0x93a>
 80078c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078c8:	3b01      	subs	r3, #1
 80078ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80078ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	029b      	lsls	r3, r3, #10
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e4:	801a      	strh	r2, [r3, #0]
 80078e6:	e024      	b.n	8007932 <USB_EPStartXfer+0x99e>
 80078e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	785b      	ldrb	r3, [r3, #1]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d11c      	bne.n	8007932 <USB_EPStartXfer+0x99e>
 80078f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007906:	b29b      	uxth	r3, r3
 8007908:	461a      	mov	r2, r3
 800790a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800790c:	4413      	add	r3, r2
 800790e:	643b      	str	r3, [r7, #64]	; 0x40
 8007910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	011a      	lsls	r2, r3, #4
 800791e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007920:	4413      	add	r3, r2
 8007922:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800792c:	b29a      	uxth	r2, r3
 800792e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007930:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	895b      	ldrh	r3, [r3, #10]
 800793e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007946:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6959      	ldr	r1, [r3, #20]
 800794e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007952:	b29b      	uxth	r3, r3
 8007954:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007958:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800795c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007960:	6800      	ldr	r0, [r0, #0]
 8007962:	f001 fa8d 	bl	8008e80 <USB_WritePMA>
 8007966:	f000 bc5a 	b.w	800821e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800796a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800797a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	b29b      	uxth	r3, r3
 8007998:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800799c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80079a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	441a      	add	r2, r3
 80079be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80079c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80079d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	461a      	mov	r2, r3
 80079f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079f6:	4413      	add	r3, r2
 80079f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	011a      	lsls	r2, r3, #4
 8007a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a10:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	891b      	ldrh	r3, [r3, #8]
 8007a28:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6959      	ldr	r1, [r3, #20]
 8007a38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a42:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a46:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a4a:	6800      	ldr	r0, [r0, #0]
 8007a4c:	f001 fa18 	bl	8008e80 <USB_WritePMA>
 8007a50:	e3e5      	b.n	800821e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a78:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	441a      	add	r2, r3
 8007a96:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aa2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6a1a      	ldr	r2, [r3, #32]
 8007aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007abe:	1ad2      	subs	r2, r2, r3
 8007ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 81bc 	beq.w	8007e6c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	785b      	ldrb	r3, [r3, #1]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d16d      	bne.n	8007bee <USB_EPStartXfer+0xc5a>
 8007b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	461a      	mov	r2, r3
 8007b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b32:	4413      	add	r3, r2
 8007b34:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	011a      	lsls	r2, r3, #4
 8007b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b46:	4413      	add	r3, r2
 8007b48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b4c:	677b      	str	r3, [r7, #116]	; 0x74
 8007b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d112      	bne.n	8007b7c <USB_EPStartXfer+0xbe8>
 8007b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b64:	801a      	strh	r2, [r3, #0]
 8007b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b78:	801a      	strh	r2, [r3, #0]
 8007b7a:	e060      	b.n	8007c3e <USB_EPStartXfer+0xcaa>
 8007b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b80:	2b3e      	cmp	r3, #62	; 0x3e
 8007b82:	d817      	bhi.n	8007bb4 <USB_EPStartXfer+0xc20>
 8007b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b88:	085b      	lsrs	r3, r3, #1
 8007b8a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d004      	beq.n	8007ba4 <USB_EPStartXfer+0xc10>
 8007b9a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007ba4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	029b      	lsls	r3, r3, #10
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bb0:	801a      	strh	r2, [r3, #0]
 8007bb2:	e044      	b.n	8007c3e <USB_EPStartXfer+0xcaa>
 8007bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb8:	095b      	lsrs	r3, r3, #5
 8007bba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc2:	f003 031f 	and.w	r3, r3, #31
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d104      	bne.n	8007bd4 <USB_EPStartXfer+0xc40>
 8007bca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007bd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	029b      	lsls	r3, r3, #10
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bea:	801a      	strh	r2, [r3, #0]
 8007bec:	e027      	b.n	8007c3e <USB_EPStartXfer+0xcaa>
 8007bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	785b      	ldrb	r3, [r3, #1]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d11f      	bne.n	8007c3e <USB_EPStartXfer+0xcaa>
 8007bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c14:	4413      	add	r3, r2
 8007c16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	011a      	lsls	r2, r3, #4
 8007c28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	895b      	ldrh	r3, [r3, #10]
 8007c4a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6959      	ldr	r1, [r3, #20]
 8007c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c64:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007c68:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007c6c:	6800      	ldr	r0, [r0, #0]
 8007c6e:	f001 f907 	bl	8008e80 <USB_WritePMA>
          ep->xfer_buff += len;
 8007c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	695a      	ldr	r2, [r3, #20]
 8007c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c82:	441a      	add	r2, r3
 8007c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6a1a      	ldr	r2, [r3, #32]
 8007c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d90f      	bls.n	8007ccc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6a1a      	ldr	r2, [r3, #32]
 8007cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cbc:	1ad2      	subs	r2, r2, r3
 8007cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	621a      	str	r2, [r3, #32]
 8007cca:	e00e      	b.n	8007cea <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6a1b      	ldr	r3, [r3, #32]
 8007cd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 8295 	beq.w	800821e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	785b      	ldrb	r3, [r3, #1]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d16d      	bne.n	8007de0 <USB_EPStartXfer+0xe4c>
 8007d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	461a      	mov	r2, r3
 8007d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d24:	4413      	add	r3, r2
 8007d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	011a      	lsls	r2, r3, #4
 8007d36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d38:	4413      	add	r3, r2
 8007d3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d3e:	667b      	str	r3, [r7, #100]	; 0x64
 8007d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d112      	bne.n	8007d6e <USB_EPStartXfer+0xdda>
 8007d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d56:	801a      	strh	r2, [r3, #0]
 8007d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d6a:	801a      	strh	r2, [r3, #0]
 8007d6c:	e063      	b.n	8007e36 <USB_EPStartXfer+0xea2>
 8007d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d72:	2b3e      	cmp	r3, #62	; 0x3e
 8007d74:	d817      	bhi.n	8007da6 <USB_EPStartXfer+0xe12>
 8007d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d7a:	085b      	lsrs	r3, r3, #1
 8007d7c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d004      	beq.n	8007d96 <USB_EPStartXfer+0xe02>
 8007d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d90:	3301      	adds	r3, #1
 8007d92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	029b      	lsls	r3, r3, #10
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007da2:	801a      	strh	r2, [r3, #0]
 8007da4:	e047      	b.n	8007e36 <USB_EPStartXfer+0xea2>
 8007da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007daa:	095b      	lsrs	r3, r3, #5
 8007dac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db4:	f003 031f 	and.w	r3, r3, #31
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d104      	bne.n	8007dc6 <USB_EPStartXfer+0xe32>
 8007dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	029b      	lsls	r3, r3, #10
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ddc:	801a      	strh	r2, [r3, #0]
 8007dde:	e02a      	b.n	8007e36 <USB_EPStartXfer+0xea2>
 8007de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	785b      	ldrb	r3, [r3, #1]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d122      	bne.n	8007e36 <USB_EPStartXfer+0xea2>
 8007df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	673b      	str	r3, [r7, #112]	; 0x70
 8007dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e10:	4413      	add	r3, r2
 8007e12:	673b      	str	r3, [r7, #112]	; 0x70
 8007e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	011a      	lsls	r2, r3, #4
 8007e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e24:	4413      	add	r3, r2
 8007e26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	891b      	ldrh	r3, [r3, #8]
 8007e42:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6959      	ldr	r1, [r3, #20]
 8007e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e5c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007e60:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007e64:	6800      	ldr	r0, [r0, #0]
 8007e66:	f001 f80b 	bl	8008e80 <USB_WritePMA>
 8007e6a:	e1d8      	b.n	800821e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	785b      	ldrb	r3, [r3, #1]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d178      	bne.n	8007f6e <USB_EPStartXfer+0xfda>
 8007e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	011a      	lsls	r2, r3, #4
 8007eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007eb8:	4413      	add	r3, r2
 8007eba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ebe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d116      	bne.n	8007ef8 <USB_EPStartXfer+0xf64>
 8007eca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007edc:	801a      	strh	r2, [r3, #0]
 8007ede:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ef4:	801a      	strh	r2, [r3, #0]
 8007ef6:	e06b      	b.n	8007fd0 <USB_EPStartXfer+0x103c>
 8007ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007efc:	2b3e      	cmp	r3, #62	; 0x3e
 8007efe:	d818      	bhi.n	8007f32 <USB_EPStartXfer+0xf9e>
 8007f00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f04:	085b      	lsrs	r3, r3, #1
 8007f06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d004      	beq.n	8007f20 <USB_EPStartXfer+0xf8c>
 8007f16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	029b      	lsls	r3, r3, #10
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f2e:	801a      	strh	r2, [r3, #0]
 8007f30:	e04e      	b.n	8007fd0 <USB_EPStartXfer+0x103c>
 8007f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f36:	095b      	lsrs	r3, r3, #5
 8007f38:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f40:	f003 031f 	and.w	r3, r3, #31
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d104      	bne.n	8007f52 <USB_EPStartXfer+0xfbe>
 8007f48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	029b      	lsls	r3, r3, #10
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f6a:	801a      	strh	r2, [r3, #0]
 8007f6c:	e030      	b.n	8007fd0 <USB_EPStartXfer+0x103c>
 8007f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	785b      	ldrb	r3, [r3, #1]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d128      	bne.n	8007fd0 <USB_EPStartXfer+0x103c>
 8007f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	011a      	lsls	r2, r3, #4
 8007fb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fba:	4413      	add	r3, r2
 8007fbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	891b      	ldrh	r3, [r3, #8]
 8007fdc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6959      	ldr	r1, [r3, #20]
 8007fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ff6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007ffa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007ffe:	6800      	ldr	r0, [r0, #0]
 8008000:	f000 ff3e 	bl	8008e80 <USB_WritePMA>
          ep->xfer_buff += len;
 8008004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	695a      	ldr	r2, [r3, #20]
 8008010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008014:	441a      	add	r2, r3
 8008016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6a1a      	ldr	r2, [r3, #32]
 800802e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	429a      	cmp	r2, r3
 800803c:	d90f      	bls.n	800805e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800803e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	6a1a      	ldr	r2, [r3, #32]
 800804a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800804e:	1ad2      	subs	r2, r2, r3
 8008050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	621a      	str	r2, [r3, #32]
 800805c:	e00e      	b.n	800807c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800805e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800806e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008072:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2200      	movs	r2, #0
 800807a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800807c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 80cc 	beq.w	800821e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800808a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	785b      	ldrb	r3, [r3, #1]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d178      	bne.n	8008196 <USB_EPStartXfer+0x1202>
 80080a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	461a      	mov	r2, r3
 80080c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080c8:	4413      	add	r3, r2
 80080ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	011a      	lsls	r2, r3, #4
 80080dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080e0:	4413      	add	r3, r2
 80080e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d116      	bne.n	8008120 <USB_EPStartXfer+0x118c>
 80080f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080fe:	b29a      	uxth	r2, r3
 8008100:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008104:	801a      	strh	r2, [r3, #0]
 8008106:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800810a:	881b      	ldrh	r3, [r3, #0]
 800810c:	b29b      	uxth	r3, r3
 800810e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008116:	b29a      	uxth	r2, r3
 8008118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800811c:	801a      	strh	r2, [r3, #0]
 800811e:	e064      	b.n	80081ea <USB_EPStartXfer+0x1256>
 8008120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008124:	2b3e      	cmp	r3, #62	; 0x3e
 8008126:	d818      	bhi.n	800815a <USB_EPStartXfer+0x11c6>
 8008128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800812c:	085b      	lsrs	r3, r3, #1
 800812e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	d004      	beq.n	8008148 <USB_EPStartXfer+0x11b4>
 800813e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008142:	3301      	adds	r3, #1
 8008144:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800814c:	b29b      	uxth	r3, r3
 800814e:	029b      	lsls	r3, r3, #10
 8008150:	b29a      	uxth	r2, r3
 8008152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008156:	801a      	strh	r2, [r3, #0]
 8008158:	e047      	b.n	80081ea <USB_EPStartXfer+0x1256>
 800815a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800815e:	095b      	lsrs	r3, r3, #5
 8008160:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008168:	f003 031f 	and.w	r3, r3, #31
 800816c:	2b00      	cmp	r3, #0
 800816e:	d104      	bne.n	800817a <USB_EPStartXfer+0x11e6>
 8008170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008174:	3b01      	subs	r3, #1
 8008176:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800817a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800817e:	b29b      	uxth	r3, r3
 8008180:	029b      	lsls	r3, r3, #10
 8008182:	b29b      	uxth	r3, r3
 8008184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800818c:	b29a      	uxth	r2, r3
 800818e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008192:	801a      	strh	r2, [r3, #0]
 8008194:	e029      	b.n	80081ea <USB_EPStartXfer+0x1256>
 8008196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800819a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	785b      	ldrb	r3, [r3, #1]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d121      	bne.n	80081ea <USB_EPStartXfer+0x1256>
 80081a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	461a      	mov	r2, r3
 80081b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081bc:	4413      	add	r3, r2
 80081be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	011a      	lsls	r2, r3, #4
 80081d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081d4:	4413      	add	r3, r2
 80081d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80081de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80081ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	895b      	ldrh	r3, [r3, #10]
 80081f6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6959      	ldr	r1, [r3, #20]
 8008206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800820a:	b29b      	uxth	r3, r3
 800820c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008210:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008214:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008218:	6800      	ldr	r0, [r0, #0]
 800821a:	f000 fe31 	bl	8008e80 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800821e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800822c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	b29b      	uxth	r3, r3
 800823c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008240:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800824c:	8013      	strh	r3, [r2, #0]
 800824e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008252:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008256:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800825a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800825e:	8812      	ldrh	r2, [r2, #0]
 8008260:	f082 0210 	eor.w	r2, r2, #16
 8008264:	801a      	strh	r2, [r3, #0]
 8008266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800826a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800826e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008272:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008276:	8812      	ldrh	r2, [r2, #0]
 8008278:	f082 0220 	eor.w	r2, r2, #32
 800827c:	801a      	strh	r2, [r3, #0]
 800827e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008282:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800828c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	441a      	add	r2, r3
 8008298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800829c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	8013      	strh	r3, [r2, #0]
 80082b6:	f000 bc9f 	b.w	8008bf8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80082ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	7b1b      	ldrb	r3, [r3, #12]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f040 80ae 	bne.w	8008428 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80082cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	699a      	ldr	r2, [r3, #24]
 80082d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d917      	bls.n	8008318 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80082e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80082f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	699a      	ldr	r2, [r3, #24]
 8008304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008308:	1ad2      	subs	r2, r2, r3
 800830a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800830e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	619a      	str	r2, [r3, #24]
 8008316:	e00e      	b.n	8008336 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800831c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800832c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2200      	movs	r2, #0
 8008334:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800833a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008348:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008352:	b29b      	uxth	r3, r3
 8008354:	461a      	mov	r2, r3
 8008356:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800835a:	4413      	add	r3, r2
 800835c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	011a      	lsls	r2, r3, #4
 800836e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008372:	4413      	add	r3, r2
 8008374:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008378:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800837c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008380:	2b00      	cmp	r3, #0
 8008382:	d116      	bne.n	80083b2 <USB_EPStartXfer+0x141e>
 8008384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008388:	881b      	ldrh	r3, [r3, #0]
 800838a:	b29b      	uxth	r3, r3
 800838c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008390:	b29a      	uxth	r2, r3
 8008392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008396:	801a      	strh	r2, [r3, #0]
 8008398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083ae:	801a      	strh	r2, [r3, #0]
 80083b0:	e3e8      	b.n	8008b84 <USB_EPStartXfer+0x1bf0>
 80083b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083b6:	2b3e      	cmp	r3, #62	; 0x3e
 80083b8:	d818      	bhi.n	80083ec <USB_EPStartXfer+0x1458>
 80083ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083be:	085b      	lsrs	r3, r3, #1
 80083c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80083c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d004      	beq.n	80083da <USB_EPStartXfer+0x1446>
 80083d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80083d4:	3301      	adds	r3, #1
 80083d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80083da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80083de:	b29b      	uxth	r3, r3
 80083e0:	029b      	lsls	r3, r3, #10
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083e8:	801a      	strh	r2, [r3, #0]
 80083ea:	e3cb      	b.n	8008b84 <USB_EPStartXfer+0x1bf0>
 80083ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083f0:	095b      	lsrs	r3, r3, #5
 80083f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80083f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083fa:	f003 031f 	and.w	r3, r3, #31
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d104      	bne.n	800840c <USB_EPStartXfer+0x1478>
 8008402:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008406:	3b01      	subs	r3, #1
 8008408:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800840c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008410:	b29b      	uxth	r3, r3
 8008412:	029b      	lsls	r3, r3, #10
 8008414:	b29b      	uxth	r3, r3
 8008416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800841a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800841e:	b29a      	uxth	r2, r3
 8008420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008424:	801a      	strh	r2, [r3, #0]
 8008426:	e3ad      	b.n	8008b84 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	78db      	ldrb	r3, [r3, #3]
 8008434:	2b02      	cmp	r3, #2
 8008436:	f040 8200 	bne.w	800883a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800843a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	785b      	ldrb	r3, [r3, #1]
 8008446:	2b00      	cmp	r3, #0
 8008448:	f040 8091 	bne.w	800856e <USB_EPStartXfer+0x15da>
 800844c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008450:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800845a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008468:	b29b      	uxth	r3, r3
 800846a:	461a      	mov	r2, r3
 800846c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008470:	4413      	add	r3, r2
 8008472:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	011a      	lsls	r2, r3, #4
 8008484:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008488:	4413      	add	r3, r2
 800848a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800848e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d116      	bne.n	80084d0 <USB_EPStartXfer+0x153c>
 80084a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084b4:	801a      	strh	r2, [r3, #0]
 80084b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084ba:	881b      	ldrh	r3, [r3, #0]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084cc:	801a      	strh	r2, [r3, #0]
 80084ce:	e083      	b.n	80085d8 <USB_EPStartXfer+0x1644>
 80084d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	2b3e      	cmp	r3, #62	; 0x3e
 80084de:	d820      	bhi.n	8008522 <USB_EPStartXfer+0x158e>
 80084e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	085b      	lsrs	r3, r3, #1
 80084ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80084f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b00      	cmp	r3, #0
 8008504:	d004      	beq.n	8008510 <USB_EPStartXfer+0x157c>
 8008506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800850a:	3301      	adds	r3, #1
 800850c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008514:	b29b      	uxth	r3, r3
 8008516:	029b      	lsls	r3, r3, #10
 8008518:	b29a      	uxth	r2, r3
 800851a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800851e:	801a      	strh	r2, [r3, #0]
 8008520:	e05a      	b.n	80085d8 <USB_EPStartXfer+0x1644>
 8008522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	095b      	lsrs	r3, r3, #5
 8008530:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008538:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	f003 031f 	and.w	r3, r3, #31
 8008544:	2b00      	cmp	r3, #0
 8008546:	d104      	bne.n	8008552 <USB_EPStartXfer+0x15be>
 8008548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800854c:	3b01      	subs	r3, #1
 800854e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008556:	b29b      	uxth	r3, r3
 8008558:	029b      	lsls	r3, r3, #10
 800855a:	b29b      	uxth	r3, r3
 800855c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008564:	b29a      	uxth	r2, r3
 8008566:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800856a:	801a      	strh	r2, [r3, #0]
 800856c:	e034      	b.n	80085d8 <USB_EPStartXfer+0x1644>
 800856e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	785b      	ldrb	r3, [r3, #1]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d12c      	bne.n	80085d8 <USB_EPStartXfer+0x1644>
 800857e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008582:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800858c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008590:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800859a:	b29b      	uxth	r3, r3
 800859c:	461a      	mov	r2, r3
 800859e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085a2:	4413      	add	r3, r2
 80085a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80085a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	011a      	lsls	r2, r3, #4
 80085b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085ba:	4413      	add	r3, r2
 80085bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80085c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80085d6:	801a      	strh	r2, [r3, #0]
 80085d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	785b      	ldrb	r3, [r3, #1]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f040 8091 	bne.w	800871a <USB_EPStartXfer+0x1786>
 80085f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800860a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008614:	b29b      	uxth	r3, r3
 8008616:	461a      	mov	r2, r3
 8008618:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800861c:	4413      	add	r3, r2
 800861e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	011a      	lsls	r2, r3, #4
 8008630:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008634:	4413      	add	r3, r2
 8008636:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800863a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800863e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d116      	bne.n	800867c <USB_EPStartXfer+0x16e8>
 800864e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008652:	881b      	ldrh	r3, [r3, #0]
 8008654:	b29b      	uxth	r3, r3
 8008656:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800865a:	b29a      	uxth	r2, r3
 800865c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008660:	801a      	strh	r2, [r3, #0]
 8008662:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008666:	881b      	ldrh	r3, [r3, #0]
 8008668:	b29b      	uxth	r3, r3
 800866a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800866e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008672:	b29a      	uxth	r2, r3
 8008674:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008678:	801a      	strh	r2, [r3, #0]
 800867a:	e07c      	b.n	8008776 <USB_EPStartXfer+0x17e2>
 800867c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	2b3e      	cmp	r3, #62	; 0x3e
 800868a:	d820      	bhi.n	80086ce <USB_EPStartXfer+0x173a>
 800868c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	085b      	lsrs	r3, r3, #1
 800869a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800869e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d004      	beq.n	80086bc <USB_EPStartXfer+0x1728>
 80086b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086b6:	3301      	adds	r3, #1
 80086b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	029b      	lsls	r3, r3, #10
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086ca:	801a      	strh	r2, [r3, #0]
 80086cc:	e053      	b.n	8008776 <USB_EPStartXfer+0x17e2>
 80086ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	095b      	lsrs	r3, r3, #5
 80086dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	f003 031f 	and.w	r3, r3, #31
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d104      	bne.n	80086fe <USB_EPStartXfer+0x176a>
 80086f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086f8:	3b01      	subs	r3, #1
 80086fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008702:	b29b      	uxth	r3, r3
 8008704:	029b      	lsls	r3, r3, #10
 8008706:	b29b      	uxth	r3, r3
 8008708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800870c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008710:	b29a      	uxth	r2, r3
 8008712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008716:	801a      	strh	r2, [r3, #0]
 8008718:	e02d      	b.n	8008776 <USB_EPStartXfer+0x17e2>
 800871a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800871e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	785b      	ldrb	r3, [r3, #1]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d125      	bne.n	8008776 <USB_EPStartXfer+0x17e2>
 800872a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800872e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008738:	b29b      	uxth	r3, r3
 800873a:	461a      	mov	r2, r3
 800873c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008740:	4413      	add	r3, r2
 8008742:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800874a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	011a      	lsls	r2, r3, #4
 8008754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008758:	4413      	add	r3, r2
 800875a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800875e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	b29a      	uxth	r2, r3
 8008770:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008774:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800877a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 81fe 	beq.w	8008b84 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800878c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087a8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d005      	beq.n	80087c0 <USB_EPStartXfer+0x182c>
 80087b4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10d      	bne.n	80087dc <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80087c0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f040 81db 	bne.w	8008b84 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80087ce:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f040 81d4 	bne.w	8008b84 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80087dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4413      	add	r3, r2
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008802:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800880a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	441a      	add	r2, r3
 8008820:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800882c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008830:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008834:	b29b      	uxth	r3, r3
 8008836:	8013      	strh	r3, [r2, #0]
 8008838:	e1a4      	b.n	8008b84 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800883a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800883e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	78db      	ldrb	r3, [r3, #3]
 8008846:	2b01      	cmp	r3, #1
 8008848:	f040 819a 	bne.w	8008b80 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800884c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	699a      	ldr	r2, [r3, #24]
 8008858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800885c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	429a      	cmp	r2, r3
 8008866:	d917      	bls.n	8008898 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800886c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800887c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	699a      	ldr	r2, [r3, #24]
 8008884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008888:	1ad2      	subs	r2, r2, r3
 800888a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	619a      	str	r2, [r3, #24]
 8008896:	e00e      	b.n	80088b6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800889c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80088a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2200      	movs	r2, #0
 80088b4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80088b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	785b      	ldrb	r3, [r3, #1]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d178      	bne.n	80089b8 <USB_EPStartXfer+0x1a24>
 80088c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	461a      	mov	r2, r3
 80088e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088ea:	4413      	add	r3, r2
 80088ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	011a      	lsls	r2, r3, #4
 80088fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008902:	4413      	add	r3, r2
 8008904:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008908:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800890c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008910:	2b00      	cmp	r3, #0
 8008912:	d116      	bne.n	8008942 <USB_EPStartXfer+0x19ae>
 8008914:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008918:	881b      	ldrh	r3, [r3, #0]
 800891a:	b29b      	uxth	r3, r3
 800891c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008920:	b29a      	uxth	r2, r3
 8008922:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008926:	801a      	strh	r2, [r3, #0]
 8008928:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	b29b      	uxth	r3, r3
 8008930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008938:	b29a      	uxth	r2, r3
 800893a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800893e:	801a      	strh	r2, [r3, #0]
 8008940:	e06b      	b.n	8008a1a <USB_EPStartXfer+0x1a86>
 8008942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008946:	2b3e      	cmp	r3, #62	; 0x3e
 8008948:	d818      	bhi.n	800897c <USB_EPStartXfer+0x19e8>
 800894a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800894e:	085b      	lsrs	r3, r3, #1
 8008950:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	d004      	beq.n	800896a <USB_EPStartXfer+0x19d6>
 8008960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008964:	3301      	adds	r3, #1
 8008966:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800896a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800896e:	b29b      	uxth	r3, r3
 8008970:	029b      	lsls	r3, r3, #10
 8008972:	b29a      	uxth	r2, r3
 8008974:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008978:	801a      	strh	r2, [r3, #0]
 800897a:	e04e      	b.n	8008a1a <USB_EPStartXfer+0x1a86>
 800897c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008980:	095b      	lsrs	r3, r3, #5
 8008982:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800898a:	f003 031f 	and.w	r3, r3, #31
 800898e:	2b00      	cmp	r3, #0
 8008990:	d104      	bne.n	800899c <USB_EPStartXfer+0x1a08>
 8008992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008996:	3b01      	subs	r3, #1
 8008998:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800899c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	029b      	lsls	r3, r3, #10
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089b4:	801a      	strh	r2, [r3, #0]
 80089b6:	e030      	b.n	8008a1a <USB_EPStartXfer+0x1a86>
 80089b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	785b      	ldrb	r3, [r3, #1]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d128      	bne.n	8008a1a <USB_EPStartXfer+0x1a86>
 80089c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80089d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	461a      	mov	r2, r3
 80089e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ec:	4413      	add	r3, r2
 80089ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80089f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	011a      	lsls	r2, r3, #4
 8008a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a04:	4413      	add	r3, r2
 8008a06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a18:	801a      	strh	r2, [r3, #0]
 8008a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	785b      	ldrb	r3, [r3, #1]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d178      	bne.n	8008b2a <USB_EPStartXfer+0x1b96>
 8008a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	461a      	mov	r2, r3
 8008a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	011a      	lsls	r2, r3, #4
 8008a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a74:	4413      	add	r3, r2
 8008a76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d116      	bne.n	8008ab4 <USB_EPStartXfer+0x1b20>
 8008a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a98:	801a      	strh	r2, [r3, #0]
 8008a9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a9e:	881b      	ldrh	r3, [r3, #0]
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ab0:	801a      	strh	r2, [r3, #0]
 8008ab2:	e067      	b.n	8008b84 <USB_EPStartXfer+0x1bf0>
 8008ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab8:	2b3e      	cmp	r3, #62	; 0x3e
 8008aba:	d818      	bhi.n	8008aee <USB_EPStartXfer+0x1b5a>
 8008abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac0:	085b      	lsrs	r3, r3, #1
 8008ac2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d004      	beq.n	8008adc <USB_EPStartXfer+0x1b48>
 8008ad2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008adc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	029b      	lsls	r3, r3, #10
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008aea:	801a      	strh	r2, [r3, #0]
 8008aec:	e04a      	b.n	8008b84 <USB_EPStartXfer+0x1bf0>
 8008aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af2:	095b      	lsrs	r3, r3, #5
 8008af4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008afc:	f003 031f 	and.w	r3, r3, #31
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d104      	bne.n	8008b0e <USB_EPStartXfer+0x1b7a>
 8008b04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	029b      	lsls	r3, r3, #10
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b26:	801a      	strh	r2, [r3, #0]
 8008b28:	e02c      	b.n	8008b84 <USB_EPStartXfer+0x1bf0>
 8008b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	785b      	ldrb	r3, [r3, #1]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d124      	bne.n	8008b84 <USB_EPStartXfer+0x1bf0>
 8008b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b50:	4413      	add	r3, r2
 8008b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	011a      	lsls	r2, r3, #4
 8008b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b68:	4413      	add	r3, r2
 8008b6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b7c:	801a      	strh	r2, [r3, #0]
 8008b7e:	e001      	b.n	8008b84 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e03a      	b.n	8008bfa <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008baa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008bae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008bb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008bb6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008bba:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008bbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008bc2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	441a      	add	r2, r3
 8008be0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	785b      	ldrb	r3, [r3, #1]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d020      	beq.n	8008c58 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	881b      	ldrh	r3, [r3, #0]
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c2c:	81bb      	strh	r3, [r7, #12]
 8008c2e:	89bb      	ldrh	r3, [r7, #12]
 8008c30:	f083 0310 	eor.w	r3, r3, #16
 8008c34:	81bb      	strh	r3, [r7, #12]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	441a      	add	r2, r3
 8008c40:	89bb      	ldrh	r3, [r7, #12]
 8008c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	8013      	strh	r3, [r2, #0]
 8008c56:	e01f      	b.n	8008c98 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4413      	add	r3, r2
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c6e:	81fb      	strh	r3, [r7, #14]
 8008c70:	89fb      	ldrh	r3, [r7, #14]
 8008c72:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c76:	81fb      	strh	r3, [r7, #14]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	441a      	add	r2, r3
 8008c82:	89fb      	ldrh	r3, [r7, #14]
 8008c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bc80      	pop	{r7}
 8008ca2:	4770      	bx	lr

08008ca4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	7b1b      	ldrb	r3, [r3, #12]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f040 809d 	bne.w	8008df2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	785b      	ldrb	r3, [r3, #1]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d04c      	beq.n	8008d5a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	881b      	ldrh	r3, [r3, #0]
 8008ccc:	823b      	strh	r3, [r7, #16]
 8008cce:	8a3b      	ldrh	r3, [r7, #16]
 8008cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d01b      	beq.n	8008d10 <USB_EPClearStall+0x6c>
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	881b      	ldrh	r3, [r3, #0]
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cee:	81fb      	strh	r3, [r7, #14]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	441a      	add	r2, r3
 8008cfa:	89fb      	ldrh	r3, [r7, #14]
 8008cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	78db      	ldrb	r3, [r3, #3]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d06c      	beq.n	8008df2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d2e:	81bb      	strh	r3, [r7, #12]
 8008d30:	89bb      	ldrh	r3, [r7, #12]
 8008d32:	f083 0320 	eor.w	r3, r3, #32
 8008d36:	81bb      	strh	r3, [r7, #12]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	441a      	add	r2, r3
 8008d42:	89bb      	ldrh	r3, [r7, #12]
 8008d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	8013      	strh	r3, [r2, #0]
 8008d58:	e04b      	b.n	8008df2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	82fb      	strh	r3, [r7, #22]
 8008d68:	8afb      	ldrh	r3, [r7, #22]
 8008d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d01b      	beq.n	8008daa <USB_EPClearStall+0x106>
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d88:	82bb      	strh	r3, [r7, #20]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	441a      	add	r2, r3
 8008d94:	8abb      	ldrh	r3, [r7, #20]
 8008d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc0:	827b      	strh	r3, [r7, #18]
 8008dc2:	8a7b      	ldrh	r3, [r7, #18]
 8008dc4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008dc8:	827b      	strh	r3, [r7, #18]
 8008dca:	8a7b      	ldrh	r3, [r7, #18]
 8008dcc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008dd0:	827b      	strh	r3, [r7, #18]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	441a      	add	r2, r3
 8008ddc:	8a7b      	ldrh	r3, [r7, #18]
 8008dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	371c      	adds	r7, #28
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bc80      	pop	{r7}
 8008dfc:	4770      	bx	lr

08008dfe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b083      	sub	sp, #12
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	460b      	mov	r3, r1
 8008e08:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008e0a:	78fb      	ldrb	r3, [r7, #3]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d103      	bne.n	8008e18 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2280      	movs	r2, #128	; 0x80
 8008e14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bc80      	pop	{r7}
 8008e22:	4770      	bx	lr

08008e24 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	370c      	adds	r7, #12
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bc80      	pop	{r7}
 8008e36:	4770      	bx	lr

08008e38 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	370c      	adds	r7, #12
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bc80      	pop	{r7}
 8008e4a:	4770      	bx	lr

08008e4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bc80      	pop	{r7}
 8008e68:	4770      	bx	lr

08008e6a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bc80      	pop	{r7}
 8008e7e:	4770      	bx	lr

08008e80 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b08d      	sub	sp, #52	; 0x34
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	4611      	mov	r1, r2
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	460b      	mov	r3, r1
 8008e90:	80fb      	strh	r3, [r7, #6]
 8008e92:	4613      	mov	r3, r2
 8008e94:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008e96:	88bb      	ldrh	r3, [r7, #4]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	085b      	lsrs	r3, r3, #1
 8008e9c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ea6:	88fb      	ldrh	r3, [r7, #6]
 8008ea8:	005a      	lsls	r2, r3, #1
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	4413      	add	r3, r2
 8008eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eb2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eb8:	e01e      	b.n	8008ef8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	021b      	lsls	r3, r3, #8
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ede:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee2:	3302      	adds	r3, #2
 8008ee4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee8:	3302      	adds	r3, #2
 8008eea:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eee:	3301      	adds	r3, #1
 8008ef0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1dd      	bne.n	8008eba <USB_WritePMA+0x3a>
  }
}
 8008efe:	bf00      	nop
 8008f00:	bf00      	nop
 8008f02:	3734      	adds	r7, #52	; 0x34
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bc80      	pop	{r7}
 8008f08:	4770      	bx	lr

08008f0a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b08b      	sub	sp, #44	; 0x2c
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	60f8      	str	r0, [r7, #12]
 8008f12:	60b9      	str	r1, [r7, #8]
 8008f14:	4611      	mov	r1, r2
 8008f16:	461a      	mov	r2, r3
 8008f18:	460b      	mov	r3, r1
 8008f1a:	80fb      	strh	r3, [r7, #6]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008f20:	88bb      	ldrh	r3, [r7, #4]
 8008f22:	085b      	lsrs	r3, r3, #1
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f30:	88fb      	ldrh	r3, [r7, #6]
 8008f32:	005a      	lsls	r2, r3, #1
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f3c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
 8008f42:	e01b      	b.n	8008f7c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	3302      	adds	r3, #2
 8008f50:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	0a1b      	lsrs	r3, r3, #8
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008f70:	6a3b      	ldr	r3, [r7, #32]
 8008f72:	3302      	adds	r3, #2
 8008f74:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1e0      	bne.n	8008f44 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008f82:	88bb      	ldrh	r3, [r7, #4]
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d007      	beq.n	8008f9e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008f8e:	6a3b      	ldr	r3, [r7, #32]
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	701a      	strb	r2, [r3, #0]
  }
}
 8008f9e:	bf00      	nop
 8008fa0:	372c      	adds	r7, #44	; 0x2c
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bc80      	pop	{r7}
 8008fa6:	4770      	bx	lr

08008fa8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	7c1b      	ldrb	r3, [r3, #16]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d115      	bne.n	8008fec <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	2181      	movs	r1, #129	; 0x81
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7f9 f9b0 	bl	800232e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fd8:	2202      	movs	r2, #2
 8008fda:	2101      	movs	r1, #1
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7f9 f9a6 	bl	800232e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008fea:	e012      	b.n	8009012 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008fec:	2340      	movs	r3, #64	; 0x40
 8008fee:	2202      	movs	r2, #2
 8008ff0:	2181      	movs	r1, #129	; 0x81
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7f9 f99b 	bl	800232e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ffe:	2340      	movs	r3, #64	; 0x40
 8009000:	2202      	movs	r2, #2
 8009002:	2101      	movs	r1, #1
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7f9 f992 	bl	800232e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009012:	2308      	movs	r3, #8
 8009014:	2203      	movs	r2, #3
 8009016:	2182      	movs	r1, #130	; 0x82
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7f9 f988 	bl	800232e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009024:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009028:	f7f9 faa8 	bl	800257c <USBD_static_malloc>
 800902c:	4602      	mov	r2, r0
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800903a:	2b00      	cmp	r3, #0
 800903c:	d102      	bne.n	8009044 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800903e:	2301      	movs	r3, #1
 8009040:	73fb      	strb	r3, [r7, #15]
 8009042:	e026      	b.n	8009092 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800904a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	2200      	movs	r2, #0
 800905a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	2200      	movs	r2, #0
 8009062:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	7c1b      	ldrb	r3, [r3, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d109      	bne.n	8009082 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009078:	2101      	movs	r1, #1
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7f9 fa48 	bl	8002510 <USBD_LL_PrepareReceive>
 8009080:	e007      	b.n	8009092 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009088:	2340      	movs	r3, #64	; 0x40
 800908a:	2101      	movs	r1, #1
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7f9 fa3f 	bl	8002510 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009092:	7bfb      	ldrb	r3, [r7, #15]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80090a8:	2300      	movs	r3, #0
 80090aa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80090ac:	2181      	movs	r1, #129	; 0x81
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7f9 f963 	bl	800237a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80090ba:	2101      	movs	r1, #1
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f7f9 f95c 	bl	800237a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80090ca:	2182      	movs	r1, #130	; 0x82
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7f9 f954 	bl	800237a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00e      	beq.n	8009100 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7f9 fa4e 	bl	8002594 <USBD_static_free>
    pdev->pClassData = NULL;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009100:	7bfb      	ldrb	r3, [r7, #15]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b086      	sub	sp, #24
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800911a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800911c:	2300      	movs	r3, #0
 800911e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009120:	2300      	movs	r3, #0
 8009122:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009130:	2b00      	cmp	r3, #0
 8009132:	d039      	beq.n	80091a8 <USBD_CDC_Setup+0x9e>
 8009134:	2b20      	cmp	r3, #32
 8009136:	d17f      	bne.n	8009238 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	88db      	ldrh	r3, [r3, #6]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d029      	beq.n	8009194 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	b25b      	sxtb	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	da11      	bge.n	800916e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009156:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	88d2      	ldrh	r2, [r2, #6]
 800915c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800915e:	6939      	ldr	r1, [r7, #16]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	88db      	ldrh	r3, [r3, #6]
 8009164:	461a      	mov	r2, r3
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f001 fa23 	bl	800a5b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800916c:	e06b      	b.n	8009246 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	785a      	ldrb	r2, [r3, #1]
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	88db      	ldrh	r3, [r3, #6]
 800917c:	b2da      	uxtb	r2, r3
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009184:	6939      	ldr	r1, [r7, #16]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	88db      	ldrh	r3, [r3, #6]
 800918a:	461a      	mov	r2, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f001 fa3e 	bl	800a60e <USBD_CtlPrepareRx>
      break;
 8009192:	e058      	b.n	8009246 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	7850      	ldrb	r0, [r2, #1]
 80091a0:	2200      	movs	r2, #0
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	4798      	blx	r3
      break;
 80091a6:	e04e      	b.n	8009246 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	785b      	ldrb	r3, [r3, #1]
 80091ac:	2b0b      	cmp	r3, #11
 80091ae:	d02e      	beq.n	800920e <USBD_CDC_Setup+0x104>
 80091b0:	2b0b      	cmp	r3, #11
 80091b2:	dc38      	bgt.n	8009226 <USBD_CDC_Setup+0x11c>
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d002      	beq.n	80091be <USBD_CDC_Setup+0xb4>
 80091b8:	2b0a      	cmp	r3, #10
 80091ba:	d014      	beq.n	80091e6 <USBD_CDC_Setup+0xdc>
 80091bc:	e033      	b.n	8009226 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091c4:	2b03      	cmp	r3, #3
 80091c6:	d107      	bne.n	80091d8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80091c8:	f107 030c 	add.w	r3, r7, #12
 80091cc:	2202      	movs	r2, #2
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f001 f9ee 	bl	800a5b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091d6:	e02e      	b.n	8009236 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f001 f97f 	bl	800a4de <USBD_CtlError>
            ret = USBD_FAIL;
 80091e0:	2302      	movs	r3, #2
 80091e2:	75fb      	strb	r3, [r7, #23]
          break;
 80091e4:	e027      	b.n	8009236 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091ec:	2b03      	cmp	r3, #3
 80091ee:	d107      	bne.n	8009200 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80091f0:	f107 030f 	add.w	r3, r7, #15
 80091f4:	2201      	movs	r2, #1
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 f9da 	bl	800a5b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091fe:	e01a      	b.n	8009236 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f001 f96b 	bl	800a4de <USBD_CtlError>
            ret = USBD_FAIL;
 8009208:	2302      	movs	r3, #2
 800920a:	75fb      	strb	r3, [r7, #23]
          break;
 800920c:	e013      	b.n	8009236 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009214:	2b03      	cmp	r3, #3
 8009216:	d00d      	beq.n	8009234 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f001 f95f 	bl	800a4de <USBD_CtlError>
            ret = USBD_FAIL;
 8009220:	2302      	movs	r3, #2
 8009222:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009224:	e006      	b.n	8009234 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f001 f958 	bl	800a4de <USBD_CtlError>
          ret = USBD_FAIL;
 800922e:	2302      	movs	r3, #2
 8009230:	75fb      	strb	r3, [r7, #23]
          break;
 8009232:	e000      	b.n	8009236 <USBD_CDC_Setup+0x12c>
          break;
 8009234:	bf00      	nop
      }
      break;
 8009236:	e006      	b.n	8009246 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009238:	6839      	ldr	r1, [r7, #0]
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f001 f94f 	bl	800a4de <USBD_CtlError>
      ret = USBD_FAIL;
 8009240:	2302      	movs	r3, #2
 8009242:	75fb      	strb	r3, [r7, #23]
      break;
 8009244:	bf00      	nop
  }

  return ret;
 8009246:	7dfb      	ldrb	r3, [r7, #23]
}
 8009248:	4618      	mov	r0, r3
 800924a:	3718      	adds	r7, #24
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009262:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800926a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009272:	2b00      	cmp	r3, #0
 8009274:	d03a      	beq.n	80092ec <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009276:	78fa      	ldrb	r2, [r7, #3]
 8009278:	6879      	ldr	r1, [r7, #4]
 800927a:	4613      	mov	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	440b      	add	r3, r1
 8009284:	331c      	adds	r3, #28
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d029      	beq.n	80092e0 <USBD_CDC_DataIn+0x90>
 800928c:	78fa      	ldrb	r2, [r7, #3]
 800928e:	6879      	ldr	r1, [r7, #4]
 8009290:	4613      	mov	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4413      	add	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	440b      	add	r3, r1
 800929a:	331c      	adds	r3, #28
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	78f9      	ldrb	r1, [r7, #3]
 80092a0:	68b8      	ldr	r0, [r7, #8]
 80092a2:	460b      	mov	r3, r1
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	440b      	add	r3, r1
 80092a8:	00db      	lsls	r3, r3, #3
 80092aa:	4403      	add	r3, r0
 80092ac:	3338      	adds	r3, #56	; 0x38
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80092b4:	fb01 f303 	mul.w	r3, r1, r3
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d110      	bne.n	80092e0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80092be:	78fa      	ldrb	r2, [r7, #3]
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	4613      	mov	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	440b      	add	r3, r1
 80092cc:	331c      	adds	r3, #28
 80092ce:	2200      	movs	r2, #0
 80092d0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80092d2:	78f9      	ldrb	r1, [r7, #3]
 80092d4:	2300      	movs	r3, #0
 80092d6:	2200      	movs	r2, #0
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f7f9 f8f6 	bl	80024ca <USBD_LL_Transmit>
 80092de:	e003      	b.n	80092e8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	e000      	b.n	80092ee <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80092ec:	2302      	movs	r3, #2
  }
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b084      	sub	sp, #16
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	460b      	mov	r3, r1
 8009300:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009308:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800930a:	78fb      	ldrb	r3, [r7, #3]
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7f9 f921 	bl	8002556 <USBD_LL_GetRxDataSize>
 8009314:	4602      	mov	r2, r0
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00d      	beq.n	8009342 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800933a:	4611      	mov	r1, r2
 800933c:	4798      	blx	r3

    return USBD_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	e000      	b.n	8009344 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009342:	2302      	movs	r3, #2
  }
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800935a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009362:	2b00      	cmp	r3, #0
 8009364:	d015      	beq.n	8009392 <USBD_CDC_EP0_RxReady+0x46>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800936c:	2bff      	cmp	r3, #255	; 0xff
 800936e:	d010      	beq.n	8009392 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800937e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009386:	b292      	uxth	r2, r2
 8009388:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	22ff      	movs	r2, #255	; 0xff
 800938e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2243      	movs	r2, #67	; 0x43
 80093a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80093aa:	4b03      	ldr	r3, [pc, #12]	; (80093b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bc80      	pop	{r7}
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	200000f8 	.word	0x200000f8

080093bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2243      	movs	r2, #67	; 0x43
 80093c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80093ca:	4b03      	ldr	r3, [pc, #12]	; (80093d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bc80      	pop	{r7}
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	200000b4 	.word	0x200000b4

080093dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2243      	movs	r2, #67	; 0x43
 80093e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80093ea:	4b03      	ldr	r3, [pc, #12]	; (80093f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bc80      	pop	{r7}
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	2000013c 	.word	0x2000013c

080093fc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	220a      	movs	r2, #10
 8009408:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800940a:	4b03      	ldr	r3, [pc, #12]	; (8009418 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800940c:	4618      	mov	r0, r3
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	bc80      	pop	{r7}
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	20000070 	.word	0x20000070

0800941c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009426:	2302      	movs	r3, #2
 8009428:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d005      	beq.n	800943c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800943c:	7bfb      	ldrb	r3, [r7, #15]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	bc80      	pop	{r7}
 8009446:	4770      	bx	lr

08009448 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009448:	b480      	push	{r7}
 800944a:	b087      	sub	sp, #28
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	4613      	mov	r3, r2
 8009454:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800945c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009466:	88fa      	ldrh	r2, [r7, #6]
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	371c      	adds	r7, #28
 8009474:	46bd      	mov	sp, r7
 8009476:	bc80      	pop	{r7}
 8009478:	4770      	bx	lr

0800947a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800947a:	b480      	push	{r7}
 800947c:	b085      	sub	sp, #20
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800948a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	bc80      	pop	{r7}
 800949e:	4770      	bx	lr

080094a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d01c      	beq.n	80094f4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d115      	bne.n	80094f0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	2181      	movs	r1, #129	; 0x81
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7f8 ffef 	bl	80024ca <USBD_LL_Transmit>

      return USBD_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	e002      	b.n	80094f6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80094f0:	2301      	movs	r3, #1
 80094f2:	e000      	b.n	80094f6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80094f4:	2302      	movs	r3, #2
  }
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b084      	sub	sp, #16
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800950c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009514:	2b00      	cmp	r3, #0
 8009516:	d017      	beq.n	8009548 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	7c1b      	ldrb	r3, [r3, #16]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d109      	bne.n	8009534 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800952a:	2101      	movs	r1, #1
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f7f8 ffef 	bl	8002510 <USBD_LL_PrepareReceive>
 8009532:	e007      	b.n	8009544 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800953a:	2340      	movs	r3, #64	; 0x40
 800953c:	2101      	movs	r1, #1
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f7f8 ffe6 	bl	8002510 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	e000      	b.n	800954a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009548:	2302      	movs	r3, #2
  }
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
	...

08009554 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	4613      	mov	r3, r2
 8009560:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10a      	bne.n	800957e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8009568:	4814      	ldr	r0, [pc, #80]	; (80095bc <USBD_Init+0x68>)
 800956a:	f001 fd39 	bl	800afe0 <iprintf>
 800956e:	4814      	ldr	r0, [pc, #80]	; (80095c0 <USBD_Init+0x6c>)
 8009570:	f001 fd36 	bl	800afe0 <iprintf>
 8009574:	200a      	movs	r0, #10
 8009576:	f001 fd4b 	bl	800b010 <putchar>
#endif
    return USBD_FAIL;
 800957a:	2302      	movs	r3, #2
 800957c:	e01a      	b.n	80095b4 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009584:	2b00      	cmp	r3, #0
 8009586:	d003      	beq.n	8009590 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d003      	beq.n	800959e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	79fa      	ldrb	r2, [r7, #7]
 80095aa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f7f8 fe49 	bl	8002244 <USBD_LL_Init>

  return USBD_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	0800d654 	.word	0x0800d654
 80095c0:	0800d65c 	.word	0x0800d65c

080095c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d006      	beq.n	80095e6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	73fb      	strb	r3, [r7, #15]
 80095e4:	e00a      	b.n	80095fc <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80095e6:	4808      	ldr	r0, [pc, #32]	; (8009608 <USBD_RegisterClass+0x44>)
 80095e8:	f001 fcfa 	bl	800afe0 <iprintf>
 80095ec:	4807      	ldr	r0, [pc, #28]	; (800960c <USBD_RegisterClass+0x48>)
 80095ee:	f001 fcf7 	bl	800afe0 <iprintf>
 80095f2:	200a      	movs	r0, #10
 80095f4:	f001 fd0c 	bl	800b010 <putchar>
#endif
    status = USBD_FAIL;
 80095f8:	2302      	movs	r3, #2
 80095fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	0800d654 	.word	0x0800d654
 800960c:	0800d674 	.word	0x0800d674

08009610 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7f8 fe6d 	bl	80022f8 <USBD_LL_Start>

  return USBD_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	370c      	adds	r7, #12
 8009636:	46bd      	mov	sp, r7
 8009638:	bc80      	pop	{r7}
 800963a:	4770      	bx	lr

0800963c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	460b      	mov	r3, r1
 8009646:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009648:	2302      	movs	r3, #2
 800964a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00c      	beq.n	8009670 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	78fa      	ldrb	r2, [r7, #3]
 8009660:	4611      	mov	r1, r2
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	4798      	blx	r3
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d101      	bne.n	8009670 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009670:	7bfb      	ldrb	r3, [r7, #15]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b082      	sub	sp, #8
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	460b      	mov	r3, r1
 8009684:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	78fa      	ldrb	r2, [r7, #3]
 8009690:	4611      	mov	r1, r2
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	4798      	blx	r3

  return USBD_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f000 fed7 	bl	800a466 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80096c6:	461a      	mov	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80096d4:	f003 031f 	and.w	r3, r3, #31
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d016      	beq.n	800970a <USBD_LL_SetupStage+0x6a>
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d81c      	bhi.n	800971a <USBD_LL_SetupStage+0x7a>
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <USBD_LL_SetupStage+0x4a>
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d008      	beq.n	80096fa <USBD_LL_SetupStage+0x5a>
 80096e8:	e017      	b.n	800971a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f9ca 	bl	8009a8c <USBD_StdDevReq>
      break;
 80096f8:	e01a      	b.n	8009730 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fa2c 	bl	8009b60 <USBD_StdItfReq>
      break;
 8009708:	e012      	b.n	8009730 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009710:	4619      	mov	r1, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fa6c 	bl	8009bf0 <USBD_StdEPReq>
      break;
 8009718:	e00a      	b.n	8009730 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009720:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009724:	b2db      	uxtb	r3, r3
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f7f8 fe45 	bl	80023b8 <USBD_LL_StallEP>
      break;
 800972e:	bf00      	nop
  }

  return USBD_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b086      	sub	sp, #24
 800973e:	af00      	add	r7, sp, #0
 8009740:	60f8      	str	r0, [r7, #12]
 8009742:	460b      	mov	r3, r1
 8009744:	607a      	str	r2, [r7, #4]
 8009746:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009748:	7afb      	ldrb	r3, [r7, #11]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d14b      	bne.n	80097e6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009754:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800975c:	2b03      	cmp	r3, #3
 800975e:	d134      	bne.n	80097ca <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	68da      	ldr	r2, [r3, #12]
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	429a      	cmp	r2, r3
 800976a:	d919      	bls.n	80097a0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	68da      	ldr	r2, [r3, #12]
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	1ad2      	subs	r2, r2, r3
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	68da      	ldr	r2, [r3, #12]
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009782:	429a      	cmp	r2, r3
 8009784:	d203      	bcs.n	800978e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800978a:	b29b      	uxth	r3, r3
 800978c:	e002      	b.n	8009794 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009792:	b29b      	uxth	r3, r3
 8009794:	461a      	mov	r2, r3
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f000 ff56 	bl	800a64a <USBD_CtlContinueRx>
 800979e:	e038      	b.n	8009812 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00a      	beq.n	80097c2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80097b2:	2b03      	cmp	r3, #3
 80097b4:	d105      	bne.n	80097c2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 ff53 	bl	800a66e <USBD_CtlSendStatus>
 80097c8:	e023      	b.n	8009812 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097d0:	2b05      	cmp	r3, #5
 80097d2:	d11e      	bne.n	8009812 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80097dc:	2100      	movs	r1, #0
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f7f8 fdea 	bl	80023b8 <USBD_LL_StallEP>
 80097e4:	e015      	b.n	8009812 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ec:	699b      	ldr	r3, [r3, #24]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00d      	beq.n	800980e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80097f8:	2b03      	cmp	r3, #3
 80097fa:	d108      	bne.n	800980e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	7afa      	ldrb	r2, [r7, #11]
 8009806:	4611      	mov	r1, r2
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	4798      	blx	r3
 800980c:	e001      	b.n	8009812 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800980e:	2302      	movs	r3, #2
 8009810:	e000      	b.n	8009814 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3718      	adds	r7, #24
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	460b      	mov	r3, r1
 8009826:	607a      	str	r2, [r7, #4]
 8009828:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800982a:	7afb      	ldrb	r3, [r7, #11]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d17f      	bne.n	8009930 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	3314      	adds	r3, #20
 8009834:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800983c:	2b02      	cmp	r3, #2
 800983e:	d15c      	bne.n	80098fa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	68da      	ldr	r2, [r3, #12]
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	429a      	cmp	r2, r3
 800984a:	d915      	bls.n	8009878 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	68da      	ldr	r2, [r3, #12]
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	1ad2      	subs	r2, r2, r3
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	b29b      	uxth	r3, r3
 8009860:	461a      	mov	r2, r3
 8009862:	6879      	ldr	r1, [r7, #4]
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 fec0 	bl	800a5ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800986a:	2300      	movs	r3, #0
 800986c:	2200      	movs	r2, #0
 800986e:	2100      	movs	r1, #0
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f7f8 fe4d 	bl	8002510 <USBD_LL_PrepareReceive>
 8009876:	e04e      	b.n	8009916 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	697a      	ldr	r2, [r7, #20]
 800987e:	6912      	ldr	r2, [r2, #16]
 8009880:	fbb3 f1f2 	udiv	r1, r3, r2
 8009884:	fb01 f202 	mul.w	r2, r1, r2
 8009888:	1a9b      	subs	r3, r3, r2
 800988a:	2b00      	cmp	r3, #0
 800988c:	d11c      	bne.n	80098c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	689a      	ldr	r2, [r3, #8]
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009896:	429a      	cmp	r2, r3
 8009898:	d316      	bcc.n	80098c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	689a      	ldr	r2, [r3, #8]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d20f      	bcs.n	80098c8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80098a8:	2200      	movs	r2, #0
 80098aa:	2100      	movs	r1, #0
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 fe9c 	bl	800a5ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098ba:	2300      	movs	r3, #0
 80098bc:	2200      	movs	r2, #0
 80098be:	2100      	movs	r1, #0
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f7f8 fe25 	bl	8002510 <USBD_LL_PrepareReceive>
 80098c6:	e026      	b.n	8009916 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00a      	beq.n	80098ea <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80098da:	2b03      	cmp	r3, #3
 80098dc:	d105      	bne.n	80098ea <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80098ea:	2180      	movs	r1, #128	; 0x80
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f7f8 fd63 	bl	80023b8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f000 fece 	bl	800a694 <USBD_CtlReceiveStatus>
 80098f8:	e00d      	b.n	8009916 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009900:	2b04      	cmp	r3, #4
 8009902:	d004      	beq.n	800990e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800990a:	2b00      	cmp	r3, #0
 800990c:	d103      	bne.n	8009916 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800990e:	2180      	movs	r1, #128	; 0x80
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f7f8 fd51 	bl	80023b8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800991c:	2b01      	cmp	r3, #1
 800991e:	d11d      	bne.n	800995c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f7ff fe81 	bl	8009628 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800992e:	e015      	b.n	800995c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009936:	695b      	ldr	r3, [r3, #20]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00d      	beq.n	8009958 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009942:	2b03      	cmp	r3, #3
 8009944:	d108      	bne.n	8009958 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	7afa      	ldrb	r2, [r7, #11]
 8009950:	4611      	mov	r1, r2
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	4798      	blx	r3
 8009956:	e001      	b.n	800995c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009958:	2302      	movs	r3, #2
 800995a:	e000      	b.n	800995e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3718      	adds	r7, #24
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b082      	sub	sp, #8
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800996e:	2340      	movs	r3, #64	; 0x40
 8009970:	2200      	movs	r2, #0
 8009972:	2100      	movs	r1, #0
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f7f8 fcda 	bl	800232e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2240      	movs	r2, #64	; 0x40
 8009986:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800998a:	2340      	movs	r3, #64	; 0x40
 800998c:	2200      	movs	r2, #0
 800998e:	2180      	movs	r1, #128	; 0x80
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7f8 fccc 	bl	800232e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2201      	movs	r2, #1
 800999a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2240      	movs	r2, #64	; 0x40
 80099a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d009      	beq.n	80099de <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	6852      	ldr	r2, [r2, #4]
 80099d6:	b2d2      	uxtb	r2, r2
 80099d8:	4611      	mov	r1, r2
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	4798      	blx	r3
  }

  return USBD_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	460b      	mov	r3, r1
 80099f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	78fa      	ldrb	r2, [r7, #3]
 80099f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bc80      	pop	{r7}
 8009a04:	4770      	bx	lr

08009a06 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b083      	sub	sp, #12
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2204      	movs	r2, #4
 8009a1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bc80      	pop	{r7}
 8009a2c:	4770      	bx	lr

08009a2e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b083      	sub	sp, #12
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a3c:	2b04      	cmp	r3, #4
 8009a3e:	d105      	bne.n	8009a4c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bc80      	pop	{r7}
 8009a56:	4770      	bx	lr

08009a58 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a66:	2b03      	cmp	r3, #3
 8009a68:	d10b      	bne.n	8009a82 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a70:	69db      	ldr	r3, [r3, #28]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d005      	beq.n	8009a82 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a7c:	69db      	ldr	r3, [r3, #28]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009aa2:	2b40      	cmp	r3, #64	; 0x40
 8009aa4:	d005      	beq.n	8009ab2 <USBD_StdDevReq+0x26>
 8009aa6:	2b40      	cmp	r3, #64	; 0x40
 8009aa8:	d84f      	bhi.n	8009b4a <USBD_StdDevReq+0xbe>
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d009      	beq.n	8009ac2 <USBD_StdDevReq+0x36>
 8009aae:	2b20      	cmp	r3, #32
 8009ab0:	d14b      	bne.n	8009b4a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	4798      	blx	r3
      break;
 8009ac0:	e048      	b.n	8009b54 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	785b      	ldrb	r3, [r3, #1]
 8009ac6:	2b09      	cmp	r3, #9
 8009ac8:	d839      	bhi.n	8009b3e <USBD_StdDevReq+0xb2>
 8009aca:	a201      	add	r2, pc, #4	; (adr r2, 8009ad0 <USBD_StdDevReq+0x44>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009b21 	.word	0x08009b21
 8009ad4:	08009b35 	.word	0x08009b35
 8009ad8:	08009b3f 	.word	0x08009b3f
 8009adc:	08009b2b 	.word	0x08009b2b
 8009ae0:	08009b3f 	.word	0x08009b3f
 8009ae4:	08009b03 	.word	0x08009b03
 8009ae8:	08009af9 	.word	0x08009af9
 8009aec:	08009b3f 	.word	0x08009b3f
 8009af0:	08009b17 	.word	0x08009b17
 8009af4:	08009b0d 	.word	0x08009b0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f9dc 	bl	8009eb8 <USBD_GetDescriptor>
          break;
 8009b00:	e022      	b.n	8009b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b02:	6839      	ldr	r1, [r7, #0]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fb3f 	bl	800a188 <USBD_SetAddress>
          break;
 8009b0a:	e01d      	b.n	8009b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fb7e 	bl	800a210 <USBD_SetConfig>
          break;
 8009b14:	e018      	b.n	8009b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 fc07 	bl	800a32c <USBD_GetConfig>
          break;
 8009b1e:	e013      	b.n	8009b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fc37 	bl	800a396 <USBD_GetStatus>
          break;
 8009b28:	e00e      	b.n	8009b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b2a:	6839      	ldr	r1, [r7, #0]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fc65 	bl	800a3fc <USBD_SetFeature>
          break;
 8009b32:	e009      	b.n	8009b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b34:	6839      	ldr	r1, [r7, #0]
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fc74 	bl	800a424 <USBD_ClrFeature>
          break;
 8009b3c:	e004      	b.n	8009b48 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fccc 	bl	800a4de <USBD_CtlError>
          break;
 8009b46:	bf00      	nop
      }
      break;
 8009b48:	e004      	b.n	8009b54 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fcc6 	bl	800a4de <USBD_CtlError>
      break;
 8009b52:	bf00      	nop
  }

  return ret;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop

08009b60 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b76:	2b40      	cmp	r3, #64	; 0x40
 8009b78:	d005      	beq.n	8009b86 <USBD_StdItfReq+0x26>
 8009b7a:	2b40      	cmp	r3, #64	; 0x40
 8009b7c:	d82e      	bhi.n	8009bdc <USBD_StdItfReq+0x7c>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <USBD_StdItfReq+0x26>
 8009b82:	2b20      	cmp	r3, #32
 8009b84:	d12a      	bne.n	8009bdc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d81d      	bhi.n	8009bce <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	889b      	ldrh	r3, [r3, #4]
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d813      	bhi.n	8009bc4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	6839      	ldr	r1, [r7, #0]
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	4798      	blx	r3
 8009baa:	4603      	mov	r3, r0
 8009bac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	88db      	ldrh	r3, [r3, #6]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d110      	bne.n	8009bd8 <USBD_StdItfReq+0x78>
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10d      	bne.n	8009bd8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fd56 	bl	800a66e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009bc2:	e009      	b.n	8009bd8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fc89 	bl	800a4de <USBD_CtlError>
          break;
 8009bcc:	e004      	b.n	8009bd8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fc84 	bl	800a4de <USBD_CtlError>
          break;
 8009bd6:	e000      	b.n	8009bda <USBD_StdItfReq+0x7a>
          break;
 8009bd8:	bf00      	nop
      }
      break;
 8009bda:	e004      	b.n	8009be6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fc7d 	bl	800a4de <USBD_CtlError>
      break;
 8009be4:	bf00      	nop
  }

  return USBD_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	889b      	ldrh	r3, [r3, #4]
 8009c02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c0c:	2b40      	cmp	r3, #64	; 0x40
 8009c0e:	d007      	beq.n	8009c20 <USBD_StdEPReq+0x30>
 8009c10:	2b40      	cmp	r3, #64	; 0x40
 8009c12:	f200 8146 	bhi.w	8009ea2 <USBD_StdEPReq+0x2b2>
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00a      	beq.n	8009c30 <USBD_StdEPReq+0x40>
 8009c1a:	2b20      	cmp	r3, #32
 8009c1c:	f040 8141 	bne.w	8009ea2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	4798      	blx	r3
      break;
 8009c2e:	e13d      	b.n	8009eac <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c38:	2b20      	cmp	r3, #32
 8009c3a:	d10a      	bne.n	8009c52 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	4798      	blx	r3
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
 8009c50:	e12d      	b.n	8009eae <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	785b      	ldrb	r3, [r3, #1]
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d007      	beq.n	8009c6a <USBD_StdEPReq+0x7a>
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	f300 811b 	bgt.w	8009e96 <USBD_StdEPReq+0x2a6>
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d072      	beq.n	8009d4a <USBD_StdEPReq+0x15a>
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d03a      	beq.n	8009cde <USBD_StdEPReq+0xee>
 8009c68:	e115      	b.n	8009e96 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d002      	beq.n	8009c7a <USBD_StdEPReq+0x8a>
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	d015      	beq.n	8009ca4 <USBD_StdEPReq+0xb4>
 8009c78:	e02b      	b.n	8009cd2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c7a:	7bbb      	ldrb	r3, [r7, #14]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00c      	beq.n	8009c9a <USBD_StdEPReq+0xaa>
 8009c80:	7bbb      	ldrb	r3, [r7, #14]
 8009c82:	2b80      	cmp	r3, #128	; 0x80
 8009c84:	d009      	beq.n	8009c9a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009c86:	7bbb      	ldrb	r3, [r7, #14]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7f8 fb94 	bl	80023b8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009c90:	2180      	movs	r1, #128	; 0x80
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7f8 fb90 	bl	80023b8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c98:	e020      	b.n	8009cdc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009c9a:	6839      	ldr	r1, [r7, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fc1e 	bl	800a4de <USBD_CtlError>
              break;
 8009ca2:	e01b      	b.n	8009cdc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	885b      	ldrh	r3, [r3, #2]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10e      	bne.n	8009cca <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00b      	beq.n	8009cca <USBD_StdEPReq+0xda>
 8009cb2:	7bbb      	ldrb	r3, [r7, #14]
 8009cb4:	2b80      	cmp	r3, #128	; 0x80
 8009cb6:	d008      	beq.n	8009cca <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	88db      	ldrh	r3, [r3, #6]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d104      	bne.n	8009cca <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f7f8 fb77 	bl	80023b8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fccf 	bl	800a66e <USBD_CtlSendStatus>

              break;
 8009cd0:	e004      	b.n	8009cdc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fc02 	bl	800a4de <USBD_CtlError>
              break;
 8009cda:	bf00      	nop
          }
          break;
 8009cdc:	e0e0      	b.n	8009ea0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d002      	beq.n	8009cee <USBD_StdEPReq+0xfe>
 8009ce8:	2b03      	cmp	r3, #3
 8009cea:	d015      	beq.n	8009d18 <USBD_StdEPReq+0x128>
 8009cec:	e026      	b.n	8009d3c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cee:	7bbb      	ldrb	r3, [r7, #14]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00c      	beq.n	8009d0e <USBD_StdEPReq+0x11e>
 8009cf4:	7bbb      	ldrb	r3, [r7, #14]
 8009cf6:	2b80      	cmp	r3, #128	; 0x80
 8009cf8:	d009      	beq.n	8009d0e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f7f8 fb5a 	bl	80023b8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009d04:	2180      	movs	r1, #128	; 0x80
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7f8 fb56 	bl	80023b8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d0c:	e01c      	b.n	8009d48 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fbe4 	bl	800a4de <USBD_CtlError>
              break;
 8009d16:	e017      	b.n	8009d48 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	885b      	ldrh	r3, [r3, #2]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d112      	bne.n	8009d46 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d20:	7bbb      	ldrb	r3, [r7, #14]
 8009d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d004      	beq.n	8009d34 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7f8 fb61 	bl	80023f6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fc9a 	bl	800a66e <USBD_CtlSendStatus>
              }
              break;
 8009d3a:	e004      	b.n	8009d46 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fbcd 	bl	800a4de <USBD_CtlError>
              break;
 8009d44:	e000      	b.n	8009d48 <USBD_StdEPReq+0x158>
              break;
 8009d46:	bf00      	nop
          }
          break;
 8009d48:	e0aa      	b.n	8009ea0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	d002      	beq.n	8009d5a <USBD_StdEPReq+0x16a>
 8009d54:	2b03      	cmp	r3, #3
 8009d56:	d032      	beq.n	8009dbe <USBD_StdEPReq+0x1ce>
 8009d58:	e097      	b.n	8009e8a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d5a:	7bbb      	ldrb	r3, [r7, #14]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d007      	beq.n	8009d70 <USBD_StdEPReq+0x180>
 8009d60:	7bbb      	ldrb	r3, [r7, #14]
 8009d62:	2b80      	cmp	r3, #128	; 0x80
 8009d64:	d004      	beq.n	8009d70 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fbb8 	bl	800a4de <USBD_CtlError>
                break;
 8009d6e:	e091      	b.n	8009e94 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	da0b      	bge.n	8009d90 <USBD_StdEPReq+0x1a0>
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d7e:	4613      	mov	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	3310      	adds	r3, #16
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	3304      	adds	r3, #4
 8009d8e:	e00b      	b.n	8009da8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
 8009d92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d96:	4613      	mov	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4413      	add	r3, r2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	4413      	add	r3, r2
 8009da6:	3304      	adds	r3, #4
 8009da8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2200      	movs	r2, #0
 8009dae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	2202      	movs	r2, #2
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fbfb 	bl	800a5b2 <USBD_CtlSendData>
              break;
 8009dbc:	e06a      	b.n	8009e94 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009dbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	da11      	bge.n	8009dea <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009dc6:	7bbb      	ldrb	r3, [r7, #14]
 8009dc8:	f003 020f 	and.w	r2, r3, #15
 8009dcc:	6879      	ldr	r1, [r7, #4]
 8009dce:	4613      	mov	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	440b      	add	r3, r1
 8009dd8:	3318      	adds	r3, #24
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d117      	bne.n	8009e10 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009de0:	6839      	ldr	r1, [r7, #0]
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 fb7b 	bl	800a4de <USBD_CtlError>
                  break;
 8009de8:	e054      	b.n	8009e94 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009dea:	7bbb      	ldrb	r3, [r7, #14]
 8009dec:	f003 020f 	and.w	r2, r3, #15
 8009df0:	6879      	ldr	r1, [r7, #4]
 8009df2:	4613      	mov	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	440b      	add	r3, r1
 8009dfc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d104      	bne.n	8009e10 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fb68 	bl	800a4de <USBD_CtlError>
                  break;
 8009e0e:	e041      	b.n	8009e94 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	da0b      	bge.n	8009e30 <USBD_StdEPReq+0x240>
 8009e18:	7bbb      	ldrb	r3, [r7, #14]
 8009e1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e1e:	4613      	mov	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4413      	add	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	3310      	adds	r3, #16
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	e00b      	b.n	8009e48 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e30:	7bbb      	ldrb	r3, [r7, #14]
 8009e32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e36:	4613      	mov	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	4413      	add	r3, r2
 8009e46:	3304      	adds	r3, #4
 8009e48:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e4a:	7bbb      	ldrb	r3, [r7, #14]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d002      	beq.n	8009e56 <USBD_StdEPReq+0x266>
 8009e50:	7bbb      	ldrb	r3, [r7, #14]
 8009e52:	2b80      	cmp	r3, #128	; 0x80
 8009e54:	d103      	bne.n	8009e5e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	e00e      	b.n	8009e7c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7f8 fae6 	bl	8002434 <USBD_LL_IsStallEP>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d003      	beq.n	8009e76 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2201      	movs	r2, #1
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	e002      	b.n	8009e7c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	2202      	movs	r2, #2
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fb95 	bl	800a5b2 <USBD_CtlSendData>
              break;
 8009e88:	e004      	b.n	8009e94 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009e8a:	6839      	ldr	r1, [r7, #0]
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 fb26 	bl	800a4de <USBD_CtlError>
              break;
 8009e92:	bf00      	nop
          }
          break;
 8009e94:	e004      	b.n	8009ea0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fb20 	bl	800a4de <USBD_CtlError>
          break;
 8009e9e:	bf00      	nop
      }
      break;
 8009ea0:	e004      	b.n	8009eac <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fb1a 	bl	800a4de <USBD_CtlError>
      break;
 8009eaa:	bf00      	nop
  }

  return ret;
 8009eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
	...

08009eb8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	885b      	ldrh	r3, [r3, #2]
 8009ed2:	0a1b      	lsrs	r3, r3, #8
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	2b06      	cmp	r3, #6
 8009eda:	f200 8128 	bhi.w	800a12e <USBD_GetDescriptor+0x276>
 8009ede:	a201      	add	r2, pc, #4	; (adr r2, 8009ee4 <USBD_GetDescriptor+0x2c>)
 8009ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee4:	08009f01 	.word	0x08009f01
 8009ee8:	08009f19 	.word	0x08009f19
 8009eec:	08009f59 	.word	0x08009f59
 8009ef0:	0800a12f 	.word	0x0800a12f
 8009ef4:	0800a12f 	.word	0x0800a12f
 8009ef8:	0800a0cf 	.word	0x0800a0cf
 8009efc:	0800a0fb 	.word	0x0800a0fb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	7c12      	ldrb	r2, [r2, #16]
 8009f0c:	f107 0108 	add.w	r1, r7, #8
 8009f10:	4610      	mov	r0, r2
 8009f12:	4798      	blx	r3
 8009f14:	60f8      	str	r0, [r7, #12]
      break;
 8009f16:	e112      	b.n	800a13e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	7c1b      	ldrb	r3, [r3, #16]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10d      	bne.n	8009f3c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f28:	f107 0208 	add.w	r2, r7, #8
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	4798      	blx	r3
 8009f30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	3301      	adds	r3, #1
 8009f36:	2202      	movs	r2, #2
 8009f38:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009f3a:	e100      	b.n	800a13e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f44:	f107 0208 	add.w	r2, r7, #8
 8009f48:	4610      	mov	r0, r2
 8009f4a:	4798      	blx	r3
 8009f4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	3301      	adds	r3, #1
 8009f52:	2202      	movs	r2, #2
 8009f54:	701a      	strb	r2, [r3, #0]
      break;
 8009f56:	e0f2      	b.n	800a13e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	885b      	ldrh	r3, [r3, #2]
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2b05      	cmp	r3, #5
 8009f60:	f200 80ac 	bhi.w	800a0bc <USBD_GetDescriptor+0x204>
 8009f64:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <USBD_GetDescriptor+0xb4>)
 8009f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6a:	bf00      	nop
 8009f6c:	08009f85 	.word	0x08009f85
 8009f70:	08009fb9 	.word	0x08009fb9
 8009f74:	08009fed 	.word	0x08009fed
 8009f78:	0800a021 	.word	0x0800a021
 8009f7c:	0800a055 	.word	0x0800a055
 8009f80:	0800a089 	.word	0x0800a089
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00b      	beq.n	8009fa8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	7c12      	ldrb	r2, [r2, #16]
 8009f9c:	f107 0108 	add.w	r1, r7, #8
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	4798      	blx	r3
 8009fa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fa6:	e091      	b.n	800a0cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fa8:	6839      	ldr	r1, [r7, #0]
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fa97 	bl	800a4de <USBD_CtlError>
            err++;
 8009fb0:	7afb      	ldrb	r3, [r7, #11]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	72fb      	strb	r3, [r7, #11]
          break;
 8009fb6:	e089      	b.n	800a0cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d00b      	beq.n	8009fdc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	7c12      	ldrb	r2, [r2, #16]
 8009fd0:	f107 0108 	add.w	r1, r7, #8
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	4798      	blx	r3
 8009fd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fda:	e077      	b.n	800a0cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 fa7d 	bl	800a4de <USBD_CtlError>
            err++;
 8009fe4:	7afb      	ldrb	r3, [r7, #11]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	72fb      	strb	r3, [r7, #11]
          break;
 8009fea:	e06f      	b.n	800a0cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00b      	beq.n	800a010 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	7c12      	ldrb	r2, [r2, #16]
 800a004:	f107 0108 	add.w	r1, r7, #8
 800a008:	4610      	mov	r0, r2
 800a00a:	4798      	blx	r3
 800a00c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a00e:	e05d      	b.n	800a0cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fa63 	bl	800a4de <USBD_CtlError>
            err++;
 800a018:	7afb      	ldrb	r3, [r7, #11]
 800a01a:	3301      	adds	r3, #1
 800a01c:	72fb      	strb	r3, [r7, #11]
          break;
 800a01e:	e055      	b.n	800a0cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00b      	beq.n	800a044 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	7c12      	ldrb	r2, [r2, #16]
 800a038:	f107 0108 	add.w	r1, r7, #8
 800a03c:	4610      	mov	r0, r2
 800a03e:	4798      	blx	r3
 800a040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a042:	e043      	b.n	800a0cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 fa49 	bl	800a4de <USBD_CtlError>
            err++;
 800a04c:	7afb      	ldrb	r3, [r7, #11]
 800a04e:	3301      	adds	r3, #1
 800a050:	72fb      	strb	r3, [r7, #11]
          break;
 800a052:	e03b      	b.n	800a0cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a05a:	695b      	ldr	r3, [r3, #20]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00b      	beq.n	800a078 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	7c12      	ldrb	r2, [r2, #16]
 800a06c:	f107 0108 	add.w	r1, r7, #8
 800a070:	4610      	mov	r0, r2
 800a072:	4798      	blx	r3
 800a074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a076:	e029      	b.n	800a0cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fa2f 	bl	800a4de <USBD_CtlError>
            err++;
 800a080:	7afb      	ldrb	r3, [r7, #11]
 800a082:	3301      	adds	r3, #1
 800a084:	72fb      	strb	r3, [r7, #11]
          break;
 800a086:	e021      	b.n	800a0cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a08e:	699b      	ldr	r3, [r3, #24]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00b      	beq.n	800a0ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	7c12      	ldrb	r2, [r2, #16]
 800a0a0:	f107 0108 	add.w	r1, r7, #8
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	4798      	blx	r3
 800a0a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0aa:	e00f      	b.n	800a0cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0ac:	6839      	ldr	r1, [r7, #0]
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fa15 	bl	800a4de <USBD_CtlError>
            err++;
 800a0b4:	7afb      	ldrb	r3, [r7, #11]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0ba:	e007      	b.n	800a0cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fa0d 	bl	800a4de <USBD_CtlError>
          err++;
 800a0c4:	7afb      	ldrb	r3, [r7, #11]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a0ca:	e038      	b.n	800a13e <USBD_GetDescriptor+0x286>
 800a0cc:	e037      	b.n	800a13e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	7c1b      	ldrb	r3, [r3, #16]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d109      	bne.n	800a0ea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0de:	f107 0208 	add.w	r2, r7, #8
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	4798      	blx	r3
 800a0e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0e8:	e029      	b.n	800a13e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a0ea:	6839      	ldr	r1, [r7, #0]
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f9f6 	bl	800a4de <USBD_CtlError>
        err++;
 800a0f2:	7afb      	ldrb	r3, [r7, #11]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	72fb      	strb	r3, [r7, #11]
      break;
 800a0f8:	e021      	b.n	800a13e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	7c1b      	ldrb	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10d      	bne.n	800a11e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10a:	f107 0208 	add.w	r2, r7, #8
 800a10e:	4610      	mov	r0, r2
 800a110:	4798      	blx	r3
 800a112:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	3301      	adds	r3, #1
 800a118:	2207      	movs	r2, #7
 800a11a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a11c:	e00f      	b.n	800a13e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a11e:	6839      	ldr	r1, [r7, #0]
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f9dc 	bl	800a4de <USBD_CtlError>
        err++;
 800a126:	7afb      	ldrb	r3, [r7, #11]
 800a128:	3301      	adds	r3, #1
 800a12a:	72fb      	strb	r3, [r7, #11]
      break;
 800a12c:	e007      	b.n	800a13e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a12e:	6839      	ldr	r1, [r7, #0]
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 f9d4 	bl	800a4de <USBD_CtlError>
      err++;
 800a136:	7afb      	ldrb	r3, [r7, #11]
 800a138:	3301      	adds	r3, #1
 800a13a:	72fb      	strb	r3, [r7, #11]
      break;
 800a13c:	bf00      	nop
  }

  if (err != 0U)
 800a13e:	7afb      	ldrb	r3, [r7, #11]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d11c      	bne.n	800a17e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a144:	893b      	ldrh	r3, [r7, #8]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d011      	beq.n	800a16e <USBD_GetDescriptor+0x2b6>
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	88db      	ldrh	r3, [r3, #6]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00d      	beq.n	800a16e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	88da      	ldrh	r2, [r3, #6]
 800a156:	893b      	ldrh	r3, [r7, #8]
 800a158:	4293      	cmp	r3, r2
 800a15a:	bf28      	it	cs
 800a15c:	4613      	movcs	r3, r2
 800a15e:	b29b      	uxth	r3, r3
 800a160:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a162:	893b      	ldrh	r3, [r7, #8]
 800a164:	461a      	mov	r2, r3
 800a166:	68f9      	ldr	r1, [r7, #12]
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fa22 	bl	800a5b2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	88db      	ldrh	r3, [r3, #6]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d104      	bne.n	800a180 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fa79 	bl	800a66e <USBD_CtlSendStatus>
 800a17c:	e000      	b.n	800a180 <USBD_GetDescriptor+0x2c8>
    return;
 800a17e:	bf00      	nop
    }
  }
}
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop

0800a188 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	889b      	ldrh	r3, [r3, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d130      	bne.n	800a1fc <USBD_SetAddress+0x74>
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	88db      	ldrh	r3, [r3, #6]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d12c      	bne.n	800a1fc <USBD_SetAddress+0x74>
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	885b      	ldrh	r3, [r3, #2]
 800a1a6:	2b7f      	cmp	r3, #127	; 0x7f
 800a1a8:	d828      	bhi.n	800a1fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	885b      	ldrh	r3, [r3, #2]
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1bc:	2b03      	cmp	r3, #3
 800a1be:	d104      	bne.n	800a1ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a1c0:	6839      	ldr	r1, [r7, #0]
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f98b 	bl	800a4de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1c8:	e01d      	b.n	800a206 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	7bfa      	ldrb	r2, [r7, #15]
 800a1ce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a1d2:	7bfb      	ldrb	r3, [r7, #15]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f7f8 f958 	bl	800248c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 fa46 	bl	800a66e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a1e2:	7bfb      	ldrb	r3, [r7, #15]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d004      	beq.n	800a1f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f0:	e009      	b.n	800a206 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1fa:	e004      	b.n	800a206 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f96d 	bl	800a4de <USBD_CtlError>
  }
}
 800a204:	bf00      	nop
 800a206:	bf00      	nop
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
	...

0800a210 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	885b      	ldrh	r3, [r3, #2]
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	4b41      	ldr	r3, [pc, #260]	; (800a328 <USBD_SetConfig+0x118>)
 800a222:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a224:	4b40      	ldr	r3, [pc, #256]	; (800a328 <USBD_SetConfig+0x118>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d904      	bls.n	800a236 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f955 	bl	800a4de <USBD_CtlError>
 800a234:	e075      	b.n	800a322 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a23c:	2b02      	cmp	r3, #2
 800a23e:	d002      	beq.n	800a246 <USBD_SetConfig+0x36>
 800a240:	2b03      	cmp	r3, #3
 800a242:	d023      	beq.n	800a28c <USBD_SetConfig+0x7c>
 800a244:	e062      	b.n	800a30c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a246:	4b38      	ldr	r3, [pc, #224]	; (800a328 <USBD_SetConfig+0x118>)
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d01a      	beq.n	800a284 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a24e:	4b36      	ldr	r3, [pc, #216]	; (800a328 <USBD_SetConfig+0x118>)
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	461a      	mov	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2203      	movs	r2, #3
 800a25c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a260:	4b31      	ldr	r3, [pc, #196]	; (800a328 <USBD_SetConfig+0x118>)
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f7ff f9e8 	bl	800963c <USBD_SetClassConfig>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d104      	bne.n	800a27c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f932 	bl	800a4de <USBD_CtlError>
            return;
 800a27a:	e052      	b.n	800a322 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f9f6 	bl	800a66e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a282:	e04e      	b.n	800a322 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f9f2 	bl	800a66e <USBD_CtlSendStatus>
        break;
 800a28a:	e04a      	b.n	800a322 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a28c:	4b26      	ldr	r3, [pc, #152]	; (800a328 <USBD_SetConfig+0x118>)
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d112      	bne.n	800a2ba <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2202      	movs	r2, #2
 800a298:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a29c:	4b22      	ldr	r3, [pc, #136]	; (800a328 <USBD_SetConfig+0x118>)
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a2a6:	4b20      	ldr	r3, [pc, #128]	; (800a328 <USBD_SetConfig+0x118>)
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f7ff f9e4 	bl	800967a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f9db 	bl	800a66e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a2b8:	e033      	b.n	800a322 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a2ba:	4b1b      	ldr	r3, [pc, #108]	; (800a328 <USBD_SetConfig+0x118>)
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d01d      	beq.n	800a304 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7ff f9d2 	bl	800967a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a2d6:	4b14      	ldr	r3, [pc, #80]	; (800a328 <USBD_SetConfig+0x118>)
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a2e0:	4b11      	ldr	r3, [pc, #68]	; (800a328 <USBD_SetConfig+0x118>)
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7ff f9a8 	bl	800963c <USBD_SetClassConfig>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d104      	bne.n	800a2fc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 f8f2 	bl	800a4de <USBD_CtlError>
            return;
 800a2fa:	e012      	b.n	800a322 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f9b6 	bl	800a66e <USBD_CtlSendStatus>
        break;
 800a302:	e00e      	b.n	800a322 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f9b2 	bl	800a66e <USBD_CtlSendStatus>
        break;
 800a30a:	e00a      	b.n	800a322 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a30c:	6839      	ldr	r1, [r7, #0]
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f8e5 	bl	800a4de <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a314:	4b04      	ldr	r3, [pc, #16]	; (800a328 <USBD_SetConfig+0x118>)
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	4619      	mov	r1, r3
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7ff f9ad 	bl	800967a <USBD_ClrClassConfig>
        break;
 800a320:	bf00      	nop
    }
  }
}
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	20001604 	.word	0x20001604

0800a32c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	88db      	ldrh	r3, [r3, #6]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d004      	beq.n	800a348 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a33e:	6839      	ldr	r1, [r7, #0]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f8cc 	bl	800a4de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a346:	e022      	b.n	800a38e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a34e:	2b02      	cmp	r3, #2
 800a350:	dc02      	bgt.n	800a358 <USBD_GetConfig+0x2c>
 800a352:	2b00      	cmp	r3, #0
 800a354:	dc03      	bgt.n	800a35e <USBD_GetConfig+0x32>
 800a356:	e015      	b.n	800a384 <USBD_GetConfig+0x58>
 800a358:	2b03      	cmp	r3, #3
 800a35a:	d00b      	beq.n	800a374 <USBD_GetConfig+0x48>
 800a35c:	e012      	b.n	800a384 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	3308      	adds	r3, #8
 800a368:	2201      	movs	r2, #1
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f920 	bl	800a5b2 <USBD_CtlSendData>
        break;
 800a372:	e00c      	b.n	800a38e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	3304      	adds	r3, #4
 800a378:	2201      	movs	r2, #1
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f918 	bl	800a5b2 <USBD_CtlSendData>
        break;
 800a382:	e004      	b.n	800a38e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f8a9 	bl	800a4de <USBD_CtlError>
        break;
 800a38c:	bf00      	nop
}
 800a38e:	bf00      	nop
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
 800a39e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d81e      	bhi.n	800a3ea <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	88db      	ldrh	r3, [r3, #6]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d004      	beq.n	800a3be <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f891 	bl	800a4de <USBD_CtlError>
        break;
 800a3bc:	e01a      	b.n	800a3f4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d005      	beq.n	800a3da <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	f043 0202 	orr.w	r2, r3, #2
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	330c      	adds	r3, #12
 800a3de:	2202      	movs	r2, #2
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f8e5 	bl	800a5b2 <USBD_CtlSendData>
      break;
 800a3e8:	e004      	b.n	800a3f4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a3ea:	6839      	ldr	r1, [r7, #0]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f876 	bl	800a4de <USBD_CtlError>
      break;
 800a3f2:	bf00      	nop
  }
}
 800a3f4:	bf00      	nop
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	885b      	ldrh	r3, [r3, #2]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d106      	bne.n	800a41c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2201      	movs	r2, #1
 800a412:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f929 	bl	800a66e <USBD_CtlSendStatus>
  }
}
 800a41c:	bf00      	nop
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a434:	3b01      	subs	r3, #1
 800a436:	2b02      	cmp	r3, #2
 800a438:	d80b      	bhi.n	800a452 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	885b      	ldrh	r3, [r3, #2]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d10c      	bne.n	800a45c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f90f 	bl	800a66e <USBD_CtlSendStatus>
      }
      break;
 800a450:	e004      	b.n	800a45c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a452:	6839      	ldr	r1, [r7, #0]
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f842 	bl	800a4de <USBD_CtlError>
      break;
 800a45a:	e000      	b.n	800a45e <USBD_ClrFeature+0x3a>
      break;
 800a45c:	bf00      	nop
  }
}
 800a45e:	bf00      	nop
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	781a      	ldrb	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	785a      	ldrb	r2, [r3, #1]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	3302      	adds	r3, #2
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	b29a      	uxth	r2, r3
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	3303      	adds	r3, #3
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	b29b      	uxth	r3, r3
 800a490:	021b      	lsls	r3, r3, #8
 800a492:	b29b      	uxth	r3, r3
 800a494:	4413      	add	r3, r2
 800a496:	b29a      	uxth	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	3305      	adds	r3, #5
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	021b      	lsls	r3, r3, #8
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	4413      	add	r3, r2
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	3306      	adds	r3, #6
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	b29a      	uxth	r2, r3
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	3307      	adds	r3, #7
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	021b      	lsls	r3, r3, #8
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	4413      	add	r3, r2
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	80da      	strh	r2, [r3, #6]

}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bc80      	pop	{r7}
 800a4dc:	4770      	bx	lr

0800a4de <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b082      	sub	sp, #8
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a4e8:	2180      	movs	r1, #128	; 0x80
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7f7 ff64 	bl	80023b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f7f7 ff60 	bl	80023b8 <USBD_LL_StallEP>
}
 800a4f8:	bf00      	nop
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a50c:	2300      	movs	r3, #0
 800a50e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d032      	beq.n	800a57c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 f834 	bl	800a584 <USBD_GetLen>
 800a51c:	4603      	mov	r3, r0
 800a51e:	3301      	adds	r3, #1
 800a520:	b29b      	uxth	r3, r3
 800a522:	005b      	lsls	r3, r3, #1
 800a524:	b29a      	uxth	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a52a:	7dfb      	ldrb	r3, [r7, #23]
 800a52c:	1c5a      	adds	r2, r3, #1
 800a52e:	75fa      	strb	r2, [r7, #23]
 800a530:	461a      	mov	r2, r3
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	4413      	add	r3, r2
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	7812      	ldrb	r2, [r2, #0]
 800a53a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a53c:	7dfb      	ldrb	r3, [r7, #23]
 800a53e:	1c5a      	adds	r2, r3, #1
 800a540:	75fa      	strb	r2, [r7, #23]
 800a542:	461a      	mov	r2, r3
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	4413      	add	r3, r2
 800a548:	2203      	movs	r2, #3
 800a54a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a54c:	e012      	b.n	800a574 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	60fa      	str	r2, [r7, #12]
 800a554:	7dfa      	ldrb	r2, [r7, #23]
 800a556:	1c51      	adds	r1, r2, #1
 800a558:	75f9      	strb	r1, [r7, #23]
 800a55a:	4611      	mov	r1, r2
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	440a      	add	r2, r1
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a564:	7dfb      	ldrb	r3, [r7, #23]
 800a566:	1c5a      	adds	r2, r3, #1
 800a568:	75fa      	strb	r2, [r7, #23]
 800a56a:	461a      	mov	r2, r3
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	4413      	add	r3, r2
 800a570:	2200      	movs	r2, #0
 800a572:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1e8      	bne.n	800a54e <USBD_GetString+0x4e>
    }
  }
}
 800a57c:	bf00      	nop
 800a57e:	3718      	adds	r7, #24
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a58c:	2300      	movs	r3, #0
 800a58e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a590:	e005      	b.n	800a59e <USBD_GetLen+0x1a>
  {
    len++;
 800a592:	7bfb      	ldrb	r3, [r7, #15]
 800a594:	3301      	adds	r3, #1
 800a596:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	3301      	adds	r3, #1
 800a59c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1f5      	bne.n	800a592 <USBD_GetLen+0xe>
  }

  return len;
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bc80      	pop	{r7}
 800a5b0:	4770      	bx	lr

0800a5b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b084      	sub	sp, #16
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	60f8      	str	r0, [r7, #12]
 800a5ba:	60b9      	str	r1, [r7, #8]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a5c8:	88fa      	ldrh	r2, [r7, #6]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a5ce:	88fa      	ldrh	r2, [r7, #6]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5d4:	88fb      	ldrh	r3, [r7, #6]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	2100      	movs	r1, #0
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f7f7 ff75 	bl	80024ca <USBD_LL_Transmit>

  return USBD_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5f8:	88fb      	ldrh	r3, [r7, #6]
 800a5fa:	68ba      	ldr	r2, [r7, #8]
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f7f7 ff63 	bl	80024ca <USBD_LL_Transmit>

  return USBD_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b084      	sub	sp, #16
 800a612:	af00      	add	r7, sp, #0
 800a614:	60f8      	str	r0, [r7, #12]
 800a616:	60b9      	str	r1, [r7, #8]
 800a618:	4613      	mov	r3, r2
 800a61a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2203      	movs	r2, #3
 800a620:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a624:	88fa      	ldrh	r2, [r7, #6]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a62c:	88fa      	ldrh	r2, [r7, #6]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a634:	88fb      	ldrh	r3, [r7, #6]
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	2100      	movs	r1, #0
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f7f7 ff68 	bl	8002510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b084      	sub	sp, #16
 800a64e:	af00      	add	r7, sp, #0
 800a650:	60f8      	str	r0, [r7, #12]
 800a652:	60b9      	str	r1, [r7, #8]
 800a654:	4613      	mov	r3, r2
 800a656:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a658:	88fb      	ldrh	r3, [r7, #6]
 800a65a:	68ba      	ldr	r2, [r7, #8]
 800a65c:	2100      	movs	r1, #0
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f7f7 ff56 	bl	8002510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b082      	sub	sp, #8
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2204      	movs	r2, #4
 800a67a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a67e:	2300      	movs	r3, #0
 800a680:	2200      	movs	r2, #0
 800a682:	2100      	movs	r1, #0
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f7f7 ff20 	bl	80024ca <USBD_LL_Transmit>

  return USBD_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2205      	movs	r2, #5
 800a6a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7f7 ff30 	bl	8002510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
	...

0800a6bc <__errno>:
 800a6bc:	4b01      	ldr	r3, [pc, #4]	; (800a6c4 <__errno+0x8>)
 800a6be:	6818      	ldr	r0, [r3, #0]
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	20000180 	.word	0x20000180

0800a6c8 <__libc_init_array>:
 800a6c8:	b570      	push	{r4, r5, r6, lr}
 800a6ca:	2600      	movs	r6, #0
 800a6cc:	4d0c      	ldr	r5, [pc, #48]	; (800a700 <__libc_init_array+0x38>)
 800a6ce:	4c0d      	ldr	r4, [pc, #52]	; (800a704 <__libc_init_array+0x3c>)
 800a6d0:	1b64      	subs	r4, r4, r5
 800a6d2:	10a4      	asrs	r4, r4, #2
 800a6d4:	42a6      	cmp	r6, r4
 800a6d6:	d109      	bne.n	800a6ec <__libc_init_array+0x24>
 800a6d8:	f002 ff70 	bl	800d5bc <_init>
 800a6dc:	2600      	movs	r6, #0
 800a6de:	4d0a      	ldr	r5, [pc, #40]	; (800a708 <__libc_init_array+0x40>)
 800a6e0:	4c0a      	ldr	r4, [pc, #40]	; (800a70c <__libc_init_array+0x44>)
 800a6e2:	1b64      	subs	r4, r4, r5
 800a6e4:	10a4      	asrs	r4, r4, #2
 800a6e6:	42a6      	cmp	r6, r4
 800a6e8:	d105      	bne.n	800a6f6 <__libc_init_array+0x2e>
 800a6ea:	bd70      	pop	{r4, r5, r6, pc}
 800a6ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6f0:	4798      	blx	r3
 800a6f2:	3601      	adds	r6, #1
 800a6f4:	e7ee      	b.n	800a6d4 <__libc_init_array+0xc>
 800a6f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6fa:	4798      	blx	r3
 800a6fc:	3601      	adds	r6, #1
 800a6fe:	e7f2      	b.n	800a6e6 <__libc_init_array+0x1e>
 800a700:	0800da74 	.word	0x0800da74
 800a704:	0800da74 	.word	0x0800da74
 800a708:	0800da74 	.word	0x0800da74
 800a70c:	0800da78 	.word	0x0800da78

0800a710 <memset>:
 800a710:	4603      	mov	r3, r0
 800a712:	4402      	add	r2, r0
 800a714:	4293      	cmp	r3, r2
 800a716:	d100      	bne.n	800a71a <memset+0xa>
 800a718:	4770      	bx	lr
 800a71a:	f803 1b01 	strb.w	r1, [r3], #1
 800a71e:	e7f9      	b.n	800a714 <memset+0x4>

0800a720 <__cvt>:
 800a720:	2b00      	cmp	r3, #0
 800a722:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a726:	461f      	mov	r7, r3
 800a728:	bfbb      	ittet	lt
 800a72a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a72e:	461f      	movlt	r7, r3
 800a730:	2300      	movge	r3, #0
 800a732:	232d      	movlt	r3, #45	; 0x2d
 800a734:	b088      	sub	sp, #32
 800a736:	4614      	mov	r4, r2
 800a738:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a73a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a73c:	7013      	strb	r3, [r2, #0]
 800a73e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a740:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a744:	f023 0820 	bic.w	r8, r3, #32
 800a748:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a74c:	d005      	beq.n	800a75a <__cvt+0x3a>
 800a74e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a752:	d100      	bne.n	800a756 <__cvt+0x36>
 800a754:	3501      	adds	r5, #1
 800a756:	2302      	movs	r3, #2
 800a758:	e000      	b.n	800a75c <__cvt+0x3c>
 800a75a:	2303      	movs	r3, #3
 800a75c:	aa07      	add	r2, sp, #28
 800a75e:	9204      	str	r2, [sp, #16]
 800a760:	aa06      	add	r2, sp, #24
 800a762:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a766:	e9cd 3500 	strd	r3, r5, [sp]
 800a76a:	4622      	mov	r2, r4
 800a76c:	463b      	mov	r3, r7
 800a76e:	f000 fd0f 	bl	800b190 <_dtoa_r>
 800a772:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a776:	4606      	mov	r6, r0
 800a778:	d102      	bne.n	800a780 <__cvt+0x60>
 800a77a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a77c:	07db      	lsls	r3, r3, #31
 800a77e:	d522      	bpl.n	800a7c6 <__cvt+0xa6>
 800a780:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a784:	eb06 0905 	add.w	r9, r6, r5
 800a788:	d110      	bne.n	800a7ac <__cvt+0x8c>
 800a78a:	7833      	ldrb	r3, [r6, #0]
 800a78c:	2b30      	cmp	r3, #48	; 0x30
 800a78e:	d10a      	bne.n	800a7a6 <__cvt+0x86>
 800a790:	2200      	movs	r2, #0
 800a792:	2300      	movs	r3, #0
 800a794:	4620      	mov	r0, r4
 800a796:	4639      	mov	r1, r7
 800a798:	f7f6 f906 	bl	80009a8 <__aeabi_dcmpeq>
 800a79c:	b918      	cbnz	r0, 800a7a6 <__cvt+0x86>
 800a79e:	f1c5 0501 	rsb	r5, r5, #1
 800a7a2:	f8ca 5000 	str.w	r5, [sl]
 800a7a6:	f8da 3000 	ldr.w	r3, [sl]
 800a7aa:	4499      	add	r9, r3
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	4639      	mov	r1, r7
 800a7b4:	f7f6 f8f8 	bl	80009a8 <__aeabi_dcmpeq>
 800a7b8:	b108      	cbz	r0, 800a7be <__cvt+0x9e>
 800a7ba:	f8cd 901c 	str.w	r9, [sp, #28]
 800a7be:	2230      	movs	r2, #48	; 0x30
 800a7c0:	9b07      	ldr	r3, [sp, #28]
 800a7c2:	454b      	cmp	r3, r9
 800a7c4:	d307      	bcc.n	800a7d6 <__cvt+0xb6>
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	9b07      	ldr	r3, [sp, #28]
 800a7ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a7cc:	1b9b      	subs	r3, r3, r6
 800a7ce:	6013      	str	r3, [r2, #0]
 800a7d0:	b008      	add	sp, #32
 800a7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7d6:	1c59      	adds	r1, r3, #1
 800a7d8:	9107      	str	r1, [sp, #28]
 800a7da:	701a      	strb	r2, [r3, #0]
 800a7dc:	e7f0      	b.n	800a7c0 <__cvt+0xa0>

0800a7de <__exponent>:
 800a7de:	4603      	mov	r3, r0
 800a7e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7e2:	2900      	cmp	r1, #0
 800a7e4:	f803 2b02 	strb.w	r2, [r3], #2
 800a7e8:	bfb6      	itet	lt
 800a7ea:	222d      	movlt	r2, #45	; 0x2d
 800a7ec:	222b      	movge	r2, #43	; 0x2b
 800a7ee:	4249      	neglt	r1, r1
 800a7f0:	2909      	cmp	r1, #9
 800a7f2:	7042      	strb	r2, [r0, #1]
 800a7f4:	dd2b      	ble.n	800a84e <__exponent+0x70>
 800a7f6:	f10d 0407 	add.w	r4, sp, #7
 800a7fa:	46a4      	mov	ip, r4
 800a7fc:	270a      	movs	r7, #10
 800a7fe:	fb91 f6f7 	sdiv	r6, r1, r7
 800a802:	460a      	mov	r2, r1
 800a804:	46a6      	mov	lr, r4
 800a806:	fb07 1516 	mls	r5, r7, r6, r1
 800a80a:	2a63      	cmp	r2, #99	; 0x63
 800a80c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800a810:	4631      	mov	r1, r6
 800a812:	f104 34ff 	add.w	r4, r4, #4294967295
 800a816:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a81a:	dcf0      	bgt.n	800a7fe <__exponent+0x20>
 800a81c:	3130      	adds	r1, #48	; 0x30
 800a81e:	f1ae 0502 	sub.w	r5, lr, #2
 800a822:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a826:	4629      	mov	r1, r5
 800a828:	1c44      	adds	r4, r0, #1
 800a82a:	4561      	cmp	r1, ip
 800a82c:	d30a      	bcc.n	800a844 <__exponent+0x66>
 800a82e:	f10d 0209 	add.w	r2, sp, #9
 800a832:	eba2 020e 	sub.w	r2, r2, lr
 800a836:	4565      	cmp	r5, ip
 800a838:	bf88      	it	hi
 800a83a:	2200      	movhi	r2, #0
 800a83c:	4413      	add	r3, r2
 800a83e:	1a18      	subs	r0, r3, r0
 800a840:	b003      	add	sp, #12
 800a842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a844:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a848:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a84c:	e7ed      	b.n	800a82a <__exponent+0x4c>
 800a84e:	2330      	movs	r3, #48	; 0x30
 800a850:	3130      	adds	r1, #48	; 0x30
 800a852:	7083      	strb	r3, [r0, #2]
 800a854:	70c1      	strb	r1, [r0, #3]
 800a856:	1d03      	adds	r3, r0, #4
 800a858:	e7f1      	b.n	800a83e <__exponent+0x60>
	...

0800a85c <_printf_float>:
 800a85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a860:	b091      	sub	sp, #68	; 0x44
 800a862:	460c      	mov	r4, r1
 800a864:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a868:	4616      	mov	r6, r2
 800a86a:	461f      	mov	r7, r3
 800a86c:	4605      	mov	r5, r0
 800a86e:	f001 fb73 	bl	800bf58 <_localeconv_r>
 800a872:	6803      	ldr	r3, [r0, #0]
 800a874:	4618      	mov	r0, r3
 800a876:	9309      	str	r3, [sp, #36]	; 0x24
 800a878:	f7f5 fc6a 	bl	8000150 <strlen>
 800a87c:	2300      	movs	r3, #0
 800a87e:	930e      	str	r3, [sp, #56]	; 0x38
 800a880:	f8d8 3000 	ldr.w	r3, [r8]
 800a884:	900a      	str	r0, [sp, #40]	; 0x28
 800a886:	3307      	adds	r3, #7
 800a888:	f023 0307 	bic.w	r3, r3, #7
 800a88c:	f103 0208 	add.w	r2, r3, #8
 800a890:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a894:	f8d4 b000 	ldr.w	fp, [r4]
 800a898:	f8c8 2000 	str.w	r2, [r8]
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a8a4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800a8a8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a8ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b2:	4640      	mov	r0, r8
 800a8b4:	4b9c      	ldr	r3, [pc, #624]	; (800ab28 <_printf_float+0x2cc>)
 800a8b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8b8:	f7f6 f8a8 	bl	8000a0c <__aeabi_dcmpun>
 800a8bc:	bb70      	cbnz	r0, 800a91c <_printf_float+0xc0>
 800a8be:	f04f 32ff 	mov.w	r2, #4294967295
 800a8c2:	4640      	mov	r0, r8
 800a8c4:	4b98      	ldr	r3, [pc, #608]	; (800ab28 <_printf_float+0x2cc>)
 800a8c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8c8:	f7f6 f882 	bl	80009d0 <__aeabi_dcmple>
 800a8cc:	bb30      	cbnz	r0, 800a91c <_printf_float+0xc0>
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	4640      	mov	r0, r8
 800a8d4:	4651      	mov	r1, sl
 800a8d6:	f7f6 f871 	bl	80009bc <__aeabi_dcmplt>
 800a8da:	b110      	cbz	r0, 800a8e2 <_printf_float+0x86>
 800a8dc:	232d      	movs	r3, #45	; 0x2d
 800a8de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8e2:	4b92      	ldr	r3, [pc, #584]	; (800ab2c <_printf_float+0x2d0>)
 800a8e4:	4892      	ldr	r0, [pc, #584]	; (800ab30 <_printf_float+0x2d4>)
 800a8e6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a8ea:	bf94      	ite	ls
 800a8ec:	4698      	movls	r8, r3
 800a8ee:	4680      	movhi	r8, r0
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	f04f 0a00 	mov.w	sl, #0
 800a8f6:	6123      	str	r3, [r4, #16]
 800a8f8:	f02b 0304 	bic.w	r3, fp, #4
 800a8fc:	6023      	str	r3, [r4, #0]
 800a8fe:	4633      	mov	r3, r6
 800a900:	4621      	mov	r1, r4
 800a902:	4628      	mov	r0, r5
 800a904:	9700      	str	r7, [sp, #0]
 800a906:	aa0f      	add	r2, sp, #60	; 0x3c
 800a908:	f000 f9d4 	bl	800acb4 <_printf_common>
 800a90c:	3001      	adds	r0, #1
 800a90e:	f040 8090 	bne.w	800aa32 <_printf_float+0x1d6>
 800a912:	f04f 30ff 	mov.w	r0, #4294967295
 800a916:	b011      	add	sp, #68	; 0x44
 800a918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a91c:	4642      	mov	r2, r8
 800a91e:	4653      	mov	r3, sl
 800a920:	4640      	mov	r0, r8
 800a922:	4651      	mov	r1, sl
 800a924:	f7f6 f872 	bl	8000a0c <__aeabi_dcmpun>
 800a928:	b148      	cbz	r0, 800a93e <_printf_float+0xe2>
 800a92a:	f1ba 0f00 	cmp.w	sl, #0
 800a92e:	bfb8      	it	lt
 800a930:	232d      	movlt	r3, #45	; 0x2d
 800a932:	4880      	ldr	r0, [pc, #512]	; (800ab34 <_printf_float+0x2d8>)
 800a934:	bfb8      	it	lt
 800a936:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a93a:	4b7f      	ldr	r3, [pc, #508]	; (800ab38 <_printf_float+0x2dc>)
 800a93c:	e7d3      	b.n	800a8e6 <_printf_float+0x8a>
 800a93e:	6863      	ldr	r3, [r4, #4]
 800a940:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a944:	1c5a      	adds	r2, r3, #1
 800a946:	d142      	bne.n	800a9ce <_printf_float+0x172>
 800a948:	2306      	movs	r3, #6
 800a94a:	6063      	str	r3, [r4, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	9206      	str	r2, [sp, #24]
 800a950:	aa0e      	add	r2, sp, #56	; 0x38
 800a952:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a956:	aa0d      	add	r2, sp, #52	; 0x34
 800a958:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a95c:	9203      	str	r2, [sp, #12]
 800a95e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a962:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a966:	6023      	str	r3, [r4, #0]
 800a968:	6863      	ldr	r3, [r4, #4]
 800a96a:	4642      	mov	r2, r8
 800a96c:	9300      	str	r3, [sp, #0]
 800a96e:	4628      	mov	r0, r5
 800a970:	4653      	mov	r3, sl
 800a972:	910b      	str	r1, [sp, #44]	; 0x2c
 800a974:	f7ff fed4 	bl	800a720 <__cvt>
 800a978:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a97a:	4680      	mov	r8, r0
 800a97c:	2947      	cmp	r1, #71	; 0x47
 800a97e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a980:	d108      	bne.n	800a994 <_printf_float+0x138>
 800a982:	1cc8      	adds	r0, r1, #3
 800a984:	db02      	blt.n	800a98c <_printf_float+0x130>
 800a986:	6863      	ldr	r3, [r4, #4]
 800a988:	4299      	cmp	r1, r3
 800a98a:	dd40      	ble.n	800aa0e <_printf_float+0x1b2>
 800a98c:	f1a9 0902 	sub.w	r9, r9, #2
 800a990:	fa5f f989 	uxtb.w	r9, r9
 800a994:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a998:	d81f      	bhi.n	800a9da <_printf_float+0x17e>
 800a99a:	464a      	mov	r2, r9
 800a99c:	3901      	subs	r1, #1
 800a99e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a9a2:	910d      	str	r1, [sp, #52]	; 0x34
 800a9a4:	f7ff ff1b 	bl	800a7de <__exponent>
 800a9a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9aa:	4682      	mov	sl, r0
 800a9ac:	1813      	adds	r3, r2, r0
 800a9ae:	2a01      	cmp	r2, #1
 800a9b0:	6123      	str	r3, [r4, #16]
 800a9b2:	dc02      	bgt.n	800a9ba <_printf_float+0x15e>
 800a9b4:	6822      	ldr	r2, [r4, #0]
 800a9b6:	07d2      	lsls	r2, r2, #31
 800a9b8:	d501      	bpl.n	800a9be <_printf_float+0x162>
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	6123      	str	r3, [r4, #16]
 800a9be:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d09b      	beq.n	800a8fe <_printf_float+0xa2>
 800a9c6:	232d      	movs	r3, #45	; 0x2d
 800a9c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9cc:	e797      	b.n	800a8fe <_printf_float+0xa2>
 800a9ce:	2947      	cmp	r1, #71	; 0x47
 800a9d0:	d1bc      	bne.n	800a94c <_printf_float+0xf0>
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1ba      	bne.n	800a94c <_printf_float+0xf0>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e7b7      	b.n	800a94a <_printf_float+0xee>
 800a9da:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a9de:	d118      	bne.n	800aa12 <_printf_float+0x1b6>
 800a9e0:	2900      	cmp	r1, #0
 800a9e2:	6863      	ldr	r3, [r4, #4]
 800a9e4:	dd0b      	ble.n	800a9fe <_printf_float+0x1a2>
 800a9e6:	6121      	str	r1, [r4, #16]
 800a9e8:	b913      	cbnz	r3, 800a9f0 <_printf_float+0x194>
 800a9ea:	6822      	ldr	r2, [r4, #0]
 800a9ec:	07d0      	lsls	r0, r2, #31
 800a9ee:	d502      	bpl.n	800a9f6 <_printf_float+0x19a>
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	440b      	add	r3, r1
 800a9f4:	6123      	str	r3, [r4, #16]
 800a9f6:	f04f 0a00 	mov.w	sl, #0
 800a9fa:	65a1      	str	r1, [r4, #88]	; 0x58
 800a9fc:	e7df      	b.n	800a9be <_printf_float+0x162>
 800a9fe:	b913      	cbnz	r3, 800aa06 <_printf_float+0x1aa>
 800aa00:	6822      	ldr	r2, [r4, #0]
 800aa02:	07d2      	lsls	r2, r2, #31
 800aa04:	d501      	bpl.n	800aa0a <_printf_float+0x1ae>
 800aa06:	3302      	adds	r3, #2
 800aa08:	e7f4      	b.n	800a9f4 <_printf_float+0x198>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e7f2      	b.n	800a9f4 <_printf_float+0x198>
 800aa0e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800aa12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa14:	4299      	cmp	r1, r3
 800aa16:	db05      	blt.n	800aa24 <_printf_float+0x1c8>
 800aa18:	6823      	ldr	r3, [r4, #0]
 800aa1a:	6121      	str	r1, [r4, #16]
 800aa1c:	07d8      	lsls	r0, r3, #31
 800aa1e:	d5ea      	bpl.n	800a9f6 <_printf_float+0x19a>
 800aa20:	1c4b      	adds	r3, r1, #1
 800aa22:	e7e7      	b.n	800a9f4 <_printf_float+0x198>
 800aa24:	2900      	cmp	r1, #0
 800aa26:	bfcc      	ite	gt
 800aa28:	2201      	movgt	r2, #1
 800aa2a:	f1c1 0202 	rsble	r2, r1, #2
 800aa2e:	4413      	add	r3, r2
 800aa30:	e7e0      	b.n	800a9f4 <_printf_float+0x198>
 800aa32:	6823      	ldr	r3, [r4, #0]
 800aa34:	055a      	lsls	r2, r3, #21
 800aa36:	d407      	bmi.n	800aa48 <_printf_float+0x1ec>
 800aa38:	6923      	ldr	r3, [r4, #16]
 800aa3a:	4642      	mov	r2, r8
 800aa3c:	4631      	mov	r1, r6
 800aa3e:	4628      	mov	r0, r5
 800aa40:	47b8      	blx	r7
 800aa42:	3001      	adds	r0, #1
 800aa44:	d12b      	bne.n	800aa9e <_printf_float+0x242>
 800aa46:	e764      	b.n	800a912 <_printf_float+0xb6>
 800aa48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800aa4c:	f240 80dd 	bls.w	800ac0a <_printf_float+0x3ae>
 800aa50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa54:	2200      	movs	r2, #0
 800aa56:	2300      	movs	r3, #0
 800aa58:	f7f5 ffa6 	bl	80009a8 <__aeabi_dcmpeq>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d033      	beq.n	800aac8 <_printf_float+0x26c>
 800aa60:	2301      	movs	r3, #1
 800aa62:	4631      	mov	r1, r6
 800aa64:	4628      	mov	r0, r5
 800aa66:	4a35      	ldr	r2, [pc, #212]	; (800ab3c <_printf_float+0x2e0>)
 800aa68:	47b8      	blx	r7
 800aa6a:	3001      	adds	r0, #1
 800aa6c:	f43f af51 	beq.w	800a912 <_printf_float+0xb6>
 800aa70:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800aa74:	429a      	cmp	r2, r3
 800aa76:	db02      	blt.n	800aa7e <_printf_float+0x222>
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	07d8      	lsls	r0, r3, #31
 800aa7c:	d50f      	bpl.n	800aa9e <_printf_float+0x242>
 800aa7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa82:	4631      	mov	r1, r6
 800aa84:	4628      	mov	r0, r5
 800aa86:	47b8      	blx	r7
 800aa88:	3001      	adds	r0, #1
 800aa8a:	f43f af42 	beq.w	800a912 <_printf_float+0xb6>
 800aa8e:	f04f 0800 	mov.w	r8, #0
 800aa92:	f104 091a 	add.w	r9, r4, #26
 800aa96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	4543      	cmp	r3, r8
 800aa9c:	dc09      	bgt.n	800aab2 <_printf_float+0x256>
 800aa9e:	6823      	ldr	r3, [r4, #0]
 800aaa0:	079b      	lsls	r3, r3, #30
 800aaa2:	f100 8102 	bmi.w	800acaa <_printf_float+0x44e>
 800aaa6:	68e0      	ldr	r0, [r4, #12]
 800aaa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aaaa:	4298      	cmp	r0, r3
 800aaac:	bfb8      	it	lt
 800aaae:	4618      	movlt	r0, r3
 800aab0:	e731      	b.n	800a916 <_printf_float+0xba>
 800aab2:	2301      	movs	r3, #1
 800aab4:	464a      	mov	r2, r9
 800aab6:	4631      	mov	r1, r6
 800aab8:	4628      	mov	r0, r5
 800aaba:	47b8      	blx	r7
 800aabc:	3001      	adds	r0, #1
 800aabe:	f43f af28 	beq.w	800a912 <_printf_float+0xb6>
 800aac2:	f108 0801 	add.w	r8, r8, #1
 800aac6:	e7e6      	b.n	800aa96 <_printf_float+0x23a>
 800aac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	dc38      	bgt.n	800ab40 <_printf_float+0x2e4>
 800aace:	2301      	movs	r3, #1
 800aad0:	4631      	mov	r1, r6
 800aad2:	4628      	mov	r0, r5
 800aad4:	4a19      	ldr	r2, [pc, #100]	; (800ab3c <_printf_float+0x2e0>)
 800aad6:	47b8      	blx	r7
 800aad8:	3001      	adds	r0, #1
 800aada:	f43f af1a 	beq.w	800a912 <_printf_float+0xb6>
 800aade:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800aae2:	4313      	orrs	r3, r2
 800aae4:	d102      	bne.n	800aaec <_printf_float+0x290>
 800aae6:	6823      	ldr	r3, [r4, #0]
 800aae8:	07d9      	lsls	r1, r3, #31
 800aaea:	d5d8      	bpl.n	800aa9e <_printf_float+0x242>
 800aaec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aaf0:	4631      	mov	r1, r6
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	47b8      	blx	r7
 800aaf6:	3001      	adds	r0, #1
 800aaf8:	f43f af0b 	beq.w	800a912 <_printf_float+0xb6>
 800aafc:	f04f 0900 	mov.w	r9, #0
 800ab00:	f104 0a1a 	add.w	sl, r4, #26
 800ab04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab06:	425b      	negs	r3, r3
 800ab08:	454b      	cmp	r3, r9
 800ab0a:	dc01      	bgt.n	800ab10 <_printf_float+0x2b4>
 800ab0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab0e:	e794      	b.n	800aa3a <_printf_float+0x1de>
 800ab10:	2301      	movs	r3, #1
 800ab12:	4652      	mov	r2, sl
 800ab14:	4631      	mov	r1, r6
 800ab16:	4628      	mov	r0, r5
 800ab18:	47b8      	blx	r7
 800ab1a:	3001      	adds	r0, #1
 800ab1c:	f43f aef9 	beq.w	800a912 <_printf_float+0xb6>
 800ab20:	f109 0901 	add.w	r9, r9, #1
 800ab24:	e7ee      	b.n	800ab04 <_printf_float+0x2a8>
 800ab26:	bf00      	nop
 800ab28:	7fefffff 	.word	0x7fefffff
 800ab2c:	0800d6a0 	.word	0x0800d6a0
 800ab30:	0800d6a4 	.word	0x0800d6a4
 800ab34:	0800d6ac 	.word	0x0800d6ac
 800ab38:	0800d6a8 	.word	0x0800d6a8
 800ab3c:	0800d6b0 	.word	0x0800d6b0
 800ab40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab44:	429a      	cmp	r2, r3
 800ab46:	bfa8      	it	ge
 800ab48:	461a      	movge	r2, r3
 800ab4a:	2a00      	cmp	r2, #0
 800ab4c:	4691      	mov	r9, r2
 800ab4e:	dc37      	bgt.n	800abc0 <_printf_float+0x364>
 800ab50:	f04f 0b00 	mov.w	fp, #0
 800ab54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab58:	f104 021a 	add.w	r2, r4, #26
 800ab5c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ab60:	ebaa 0309 	sub.w	r3, sl, r9
 800ab64:	455b      	cmp	r3, fp
 800ab66:	dc33      	bgt.n	800abd0 <_printf_float+0x374>
 800ab68:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	db3b      	blt.n	800abe8 <_printf_float+0x38c>
 800ab70:	6823      	ldr	r3, [r4, #0]
 800ab72:	07da      	lsls	r2, r3, #31
 800ab74:	d438      	bmi.n	800abe8 <_printf_float+0x38c>
 800ab76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab78:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab7a:	eba3 020a 	sub.w	r2, r3, sl
 800ab7e:	eba3 0901 	sub.w	r9, r3, r1
 800ab82:	4591      	cmp	r9, r2
 800ab84:	bfa8      	it	ge
 800ab86:	4691      	movge	r9, r2
 800ab88:	f1b9 0f00 	cmp.w	r9, #0
 800ab8c:	dc34      	bgt.n	800abf8 <_printf_float+0x39c>
 800ab8e:	f04f 0800 	mov.w	r8, #0
 800ab92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab96:	f104 0a1a 	add.w	sl, r4, #26
 800ab9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ab9e:	1a9b      	subs	r3, r3, r2
 800aba0:	eba3 0309 	sub.w	r3, r3, r9
 800aba4:	4543      	cmp	r3, r8
 800aba6:	f77f af7a 	ble.w	800aa9e <_printf_float+0x242>
 800abaa:	2301      	movs	r3, #1
 800abac:	4652      	mov	r2, sl
 800abae:	4631      	mov	r1, r6
 800abb0:	4628      	mov	r0, r5
 800abb2:	47b8      	blx	r7
 800abb4:	3001      	adds	r0, #1
 800abb6:	f43f aeac 	beq.w	800a912 <_printf_float+0xb6>
 800abba:	f108 0801 	add.w	r8, r8, #1
 800abbe:	e7ec      	b.n	800ab9a <_printf_float+0x33e>
 800abc0:	4613      	mov	r3, r2
 800abc2:	4631      	mov	r1, r6
 800abc4:	4642      	mov	r2, r8
 800abc6:	4628      	mov	r0, r5
 800abc8:	47b8      	blx	r7
 800abca:	3001      	adds	r0, #1
 800abcc:	d1c0      	bne.n	800ab50 <_printf_float+0x2f4>
 800abce:	e6a0      	b.n	800a912 <_printf_float+0xb6>
 800abd0:	2301      	movs	r3, #1
 800abd2:	4631      	mov	r1, r6
 800abd4:	4628      	mov	r0, r5
 800abd6:	920b      	str	r2, [sp, #44]	; 0x2c
 800abd8:	47b8      	blx	r7
 800abda:	3001      	adds	r0, #1
 800abdc:	f43f ae99 	beq.w	800a912 <_printf_float+0xb6>
 800abe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800abe2:	f10b 0b01 	add.w	fp, fp, #1
 800abe6:	e7b9      	b.n	800ab5c <_printf_float+0x300>
 800abe8:	4631      	mov	r1, r6
 800abea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abee:	4628      	mov	r0, r5
 800abf0:	47b8      	blx	r7
 800abf2:	3001      	adds	r0, #1
 800abf4:	d1bf      	bne.n	800ab76 <_printf_float+0x31a>
 800abf6:	e68c      	b.n	800a912 <_printf_float+0xb6>
 800abf8:	464b      	mov	r3, r9
 800abfa:	4631      	mov	r1, r6
 800abfc:	4628      	mov	r0, r5
 800abfe:	eb08 020a 	add.w	r2, r8, sl
 800ac02:	47b8      	blx	r7
 800ac04:	3001      	adds	r0, #1
 800ac06:	d1c2      	bne.n	800ab8e <_printf_float+0x332>
 800ac08:	e683      	b.n	800a912 <_printf_float+0xb6>
 800ac0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac0c:	2a01      	cmp	r2, #1
 800ac0e:	dc01      	bgt.n	800ac14 <_printf_float+0x3b8>
 800ac10:	07db      	lsls	r3, r3, #31
 800ac12:	d537      	bpl.n	800ac84 <_printf_float+0x428>
 800ac14:	2301      	movs	r3, #1
 800ac16:	4642      	mov	r2, r8
 800ac18:	4631      	mov	r1, r6
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	47b8      	blx	r7
 800ac1e:	3001      	adds	r0, #1
 800ac20:	f43f ae77 	beq.w	800a912 <_printf_float+0xb6>
 800ac24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac28:	4631      	mov	r1, r6
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	47b8      	blx	r7
 800ac2e:	3001      	adds	r0, #1
 800ac30:	f43f ae6f 	beq.w	800a912 <_printf_float+0xb6>
 800ac34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac38:	2200      	movs	r2, #0
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	f7f5 feb4 	bl	80009a8 <__aeabi_dcmpeq>
 800ac40:	b9d8      	cbnz	r0, 800ac7a <_printf_float+0x41e>
 800ac42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac44:	f108 0201 	add.w	r2, r8, #1
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	4631      	mov	r1, r6
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	47b8      	blx	r7
 800ac50:	3001      	adds	r0, #1
 800ac52:	d10e      	bne.n	800ac72 <_printf_float+0x416>
 800ac54:	e65d      	b.n	800a912 <_printf_float+0xb6>
 800ac56:	2301      	movs	r3, #1
 800ac58:	464a      	mov	r2, r9
 800ac5a:	4631      	mov	r1, r6
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	47b8      	blx	r7
 800ac60:	3001      	adds	r0, #1
 800ac62:	f43f ae56 	beq.w	800a912 <_printf_float+0xb6>
 800ac66:	f108 0801 	add.w	r8, r8, #1
 800ac6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	4543      	cmp	r3, r8
 800ac70:	dcf1      	bgt.n	800ac56 <_printf_float+0x3fa>
 800ac72:	4653      	mov	r3, sl
 800ac74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac78:	e6e0      	b.n	800aa3c <_printf_float+0x1e0>
 800ac7a:	f04f 0800 	mov.w	r8, #0
 800ac7e:	f104 091a 	add.w	r9, r4, #26
 800ac82:	e7f2      	b.n	800ac6a <_printf_float+0x40e>
 800ac84:	2301      	movs	r3, #1
 800ac86:	4642      	mov	r2, r8
 800ac88:	e7df      	b.n	800ac4a <_printf_float+0x3ee>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	464a      	mov	r2, r9
 800ac8e:	4631      	mov	r1, r6
 800ac90:	4628      	mov	r0, r5
 800ac92:	47b8      	blx	r7
 800ac94:	3001      	adds	r0, #1
 800ac96:	f43f ae3c 	beq.w	800a912 <_printf_float+0xb6>
 800ac9a:	f108 0801 	add.w	r8, r8, #1
 800ac9e:	68e3      	ldr	r3, [r4, #12]
 800aca0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aca2:	1a5b      	subs	r3, r3, r1
 800aca4:	4543      	cmp	r3, r8
 800aca6:	dcf0      	bgt.n	800ac8a <_printf_float+0x42e>
 800aca8:	e6fd      	b.n	800aaa6 <_printf_float+0x24a>
 800acaa:	f04f 0800 	mov.w	r8, #0
 800acae:	f104 0919 	add.w	r9, r4, #25
 800acb2:	e7f4      	b.n	800ac9e <_printf_float+0x442>

0800acb4 <_printf_common>:
 800acb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acb8:	4616      	mov	r6, r2
 800acba:	4699      	mov	r9, r3
 800acbc:	688a      	ldr	r2, [r1, #8]
 800acbe:	690b      	ldr	r3, [r1, #16]
 800acc0:	4607      	mov	r7, r0
 800acc2:	4293      	cmp	r3, r2
 800acc4:	bfb8      	it	lt
 800acc6:	4613      	movlt	r3, r2
 800acc8:	6033      	str	r3, [r6, #0]
 800acca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800acce:	460c      	mov	r4, r1
 800acd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800acd4:	b10a      	cbz	r2, 800acda <_printf_common+0x26>
 800acd6:	3301      	adds	r3, #1
 800acd8:	6033      	str	r3, [r6, #0]
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	0699      	lsls	r1, r3, #26
 800acde:	bf42      	ittt	mi
 800ace0:	6833      	ldrmi	r3, [r6, #0]
 800ace2:	3302      	addmi	r3, #2
 800ace4:	6033      	strmi	r3, [r6, #0]
 800ace6:	6825      	ldr	r5, [r4, #0]
 800ace8:	f015 0506 	ands.w	r5, r5, #6
 800acec:	d106      	bne.n	800acfc <_printf_common+0x48>
 800acee:	f104 0a19 	add.w	sl, r4, #25
 800acf2:	68e3      	ldr	r3, [r4, #12]
 800acf4:	6832      	ldr	r2, [r6, #0]
 800acf6:	1a9b      	subs	r3, r3, r2
 800acf8:	42ab      	cmp	r3, r5
 800acfa:	dc28      	bgt.n	800ad4e <_printf_common+0x9a>
 800acfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad00:	1e13      	subs	r3, r2, #0
 800ad02:	6822      	ldr	r2, [r4, #0]
 800ad04:	bf18      	it	ne
 800ad06:	2301      	movne	r3, #1
 800ad08:	0692      	lsls	r2, r2, #26
 800ad0a:	d42d      	bmi.n	800ad68 <_printf_common+0xb4>
 800ad0c:	4649      	mov	r1, r9
 800ad0e:	4638      	mov	r0, r7
 800ad10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad14:	47c0      	blx	r8
 800ad16:	3001      	adds	r0, #1
 800ad18:	d020      	beq.n	800ad5c <_printf_common+0xa8>
 800ad1a:	6823      	ldr	r3, [r4, #0]
 800ad1c:	68e5      	ldr	r5, [r4, #12]
 800ad1e:	f003 0306 	and.w	r3, r3, #6
 800ad22:	2b04      	cmp	r3, #4
 800ad24:	bf18      	it	ne
 800ad26:	2500      	movne	r5, #0
 800ad28:	6832      	ldr	r2, [r6, #0]
 800ad2a:	f04f 0600 	mov.w	r6, #0
 800ad2e:	68a3      	ldr	r3, [r4, #8]
 800ad30:	bf08      	it	eq
 800ad32:	1aad      	subeq	r5, r5, r2
 800ad34:	6922      	ldr	r2, [r4, #16]
 800ad36:	bf08      	it	eq
 800ad38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	bfc4      	itt	gt
 800ad40:	1a9b      	subgt	r3, r3, r2
 800ad42:	18ed      	addgt	r5, r5, r3
 800ad44:	341a      	adds	r4, #26
 800ad46:	42b5      	cmp	r5, r6
 800ad48:	d11a      	bne.n	800ad80 <_printf_common+0xcc>
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	e008      	b.n	800ad60 <_printf_common+0xac>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	4652      	mov	r2, sl
 800ad52:	4649      	mov	r1, r9
 800ad54:	4638      	mov	r0, r7
 800ad56:	47c0      	blx	r8
 800ad58:	3001      	adds	r0, #1
 800ad5a:	d103      	bne.n	800ad64 <_printf_common+0xb0>
 800ad5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad64:	3501      	adds	r5, #1
 800ad66:	e7c4      	b.n	800acf2 <_printf_common+0x3e>
 800ad68:	2030      	movs	r0, #48	; 0x30
 800ad6a:	18e1      	adds	r1, r4, r3
 800ad6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad70:	1c5a      	adds	r2, r3, #1
 800ad72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad76:	4422      	add	r2, r4
 800ad78:	3302      	adds	r3, #2
 800ad7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad7e:	e7c5      	b.n	800ad0c <_printf_common+0x58>
 800ad80:	2301      	movs	r3, #1
 800ad82:	4622      	mov	r2, r4
 800ad84:	4649      	mov	r1, r9
 800ad86:	4638      	mov	r0, r7
 800ad88:	47c0      	blx	r8
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	d0e6      	beq.n	800ad5c <_printf_common+0xa8>
 800ad8e:	3601      	adds	r6, #1
 800ad90:	e7d9      	b.n	800ad46 <_printf_common+0x92>
	...

0800ad94 <_printf_i>:
 800ad94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad98:	7e0f      	ldrb	r7, [r1, #24]
 800ad9a:	4691      	mov	r9, r2
 800ad9c:	2f78      	cmp	r7, #120	; 0x78
 800ad9e:	4680      	mov	r8, r0
 800ada0:	460c      	mov	r4, r1
 800ada2:	469a      	mov	sl, r3
 800ada4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ada6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800adaa:	d807      	bhi.n	800adbc <_printf_i+0x28>
 800adac:	2f62      	cmp	r7, #98	; 0x62
 800adae:	d80a      	bhi.n	800adc6 <_printf_i+0x32>
 800adb0:	2f00      	cmp	r7, #0
 800adb2:	f000 80d9 	beq.w	800af68 <_printf_i+0x1d4>
 800adb6:	2f58      	cmp	r7, #88	; 0x58
 800adb8:	f000 80a4 	beq.w	800af04 <_printf_i+0x170>
 800adbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800adc4:	e03a      	b.n	800ae3c <_printf_i+0xa8>
 800adc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800adca:	2b15      	cmp	r3, #21
 800adcc:	d8f6      	bhi.n	800adbc <_printf_i+0x28>
 800adce:	a101      	add	r1, pc, #4	; (adr r1, 800add4 <_printf_i+0x40>)
 800add0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800add4:	0800ae2d 	.word	0x0800ae2d
 800add8:	0800ae41 	.word	0x0800ae41
 800addc:	0800adbd 	.word	0x0800adbd
 800ade0:	0800adbd 	.word	0x0800adbd
 800ade4:	0800adbd 	.word	0x0800adbd
 800ade8:	0800adbd 	.word	0x0800adbd
 800adec:	0800ae41 	.word	0x0800ae41
 800adf0:	0800adbd 	.word	0x0800adbd
 800adf4:	0800adbd 	.word	0x0800adbd
 800adf8:	0800adbd 	.word	0x0800adbd
 800adfc:	0800adbd 	.word	0x0800adbd
 800ae00:	0800af4f 	.word	0x0800af4f
 800ae04:	0800ae71 	.word	0x0800ae71
 800ae08:	0800af31 	.word	0x0800af31
 800ae0c:	0800adbd 	.word	0x0800adbd
 800ae10:	0800adbd 	.word	0x0800adbd
 800ae14:	0800af71 	.word	0x0800af71
 800ae18:	0800adbd 	.word	0x0800adbd
 800ae1c:	0800ae71 	.word	0x0800ae71
 800ae20:	0800adbd 	.word	0x0800adbd
 800ae24:	0800adbd 	.word	0x0800adbd
 800ae28:	0800af39 	.word	0x0800af39
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	1d1a      	adds	r2, r3, #4
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	602a      	str	r2, [r5, #0]
 800ae34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e0a4      	b.n	800af8a <_printf_i+0x1f6>
 800ae40:	6820      	ldr	r0, [r4, #0]
 800ae42:	6829      	ldr	r1, [r5, #0]
 800ae44:	0606      	lsls	r6, r0, #24
 800ae46:	f101 0304 	add.w	r3, r1, #4
 800ae4a:	d50a      	bpl.n	800ae62 <_printf_i+0xce>
 800ae4c:	680e      	ldr	r6, [r1, #0]
 800ae4e:	602b      	str	r3, [r5, #0]
 800ae50:	2e00      	cmp	r6, #0
 800ae52:	da03      	bge.n	800ae5c <_printf_i+0xc8>
 800ae54:	232d      	movs	r3, #45	; 0x2d
 800ae56:	4276      	negs	r6, r6
 800ae58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae5c:	230a      	movs	r3, #10
 800ae5e:	485e      	ldr	r0, [pc, #376]	; (800afd8 <_printf_i+0x244>)
 800ae60:	e019      	b.n	800ae96 <_printf_i+0x102>
 800ae62:	680e      	ldr	r6, [r1, #0]
 800ae64:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae68:	602b      	str	r3, [r5, #0]
 800ae6a:	bf18      	it	ne
 800ae6c:	b236      	sxthne	r6, r6
 800ae6e:	e7ef      	b.n	800ae50 <_printf_i+0xbc>
 800ae70:	682b      	ldr	r3, [r5, #0]
 800ae72:	6820      	ldr	r0, [r4, #0]
 800ae74:	1d19      	adds	r1, r3, #4
 800ae76:	6029      	str	r1, [r5, #0]
 800ae78:	0601      	lsls	r1, r0, #24
 800ae7a:	d501      	bpl.n	800ae80 <_printf_i+0xec>
 800ae7c:	681e      	ldr	r6, [r3, #0]
 800ae7e:	e002      	b.n	800ae86 <_printf_i+0xf2>
 800ae80:	0646      	lsls	r6, r0, #25
 800ae82:	d5fb      	bpl.n	800ae7c <_printf_i+0xe8>
 800ae84:	881e      	ldrh	r6, [r3, #0]
 800ae86:	2f6f      	cmp	r7, #111	; 0x6f
 800ae88:	bf0c      	ite	eq
 800ae8a:	2308      	moveq	r3, #8
 800ae8c:	230a      	movne	r3, #10
 800ae8e:	4852      	ldr	r0, [pc, #328]	; (800afd8 <_printf_i+0x244>)
 800ae90:	2100      	movs	r1, #0
 800ae92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae96:	6865      	ldr	r5, [r4, #4]
 800ae98:	2d00      	cmp	r5, #0
 800ae9a:	bfa8      	it	ge
 800ae9c:	6821      	ldrge	r1, [r4, #0]
 800ae9e:	60a5      	str	r5, [r4, #8]
 800aea0:	bfa4      	itt	ge
 800aea2:	f021 0104 	bicge.w	r1, r1, #4
 800aea6:	6021      	strge	r1, [r4, #0]
 800aea8:	b90e      	cbnz	r6, 800aeae <_printf_i+0x11a>
 800aeaa:	2d00      	cmp	r5, #0
 800aeac:	d04d      	beq.n	800af4a <_printf_i+0x1b6>
 800aeae:	4615      	mov	r5, r2
 800aeb0:	fbb6 f1f3 	udiv	r1, r6, r3
 800aeb4:	fb03 6711 	mls	r7, r3, r1, r6
 800aeb8:	5dc7      	ldrb	r7, [r0, r7]
 800aeba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aebe:	4637      	mov	r7, r6
 800aec0:	42bb      	cmp	r3, r7
 800aec2:	460e      	mov	r6, r1
 800aec4:	d9f4      	bls.n	800aeb0 <_printf_i+0x11c>
 800aec6:	2b08      	cmp	r3, #8
 800aec8:	d10b      	bne.n	800aee2 <_printf_i+0x14e>
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	07de      	lsls	r6, r3, #31
 800aece:	d508      	bpl.n	800aee2 <_printf_i+0x14e>
 800aed0:	6923      	ldr	r3, [r4, #16]
 800aed2:	6861      	ldr	r1, [r4, #4]
 800aed4:	4299      	cmp	r1, r3
 800aed6:	bfde      	ittt	le
 800aed8:	2330      	movle	r3, #48	; 0x30
 800aeda:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aede:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aee2:	1b52      	subs	r2, r2, r5
 800aee4:	6122      	str	r2, [r4, #16]
 800aee6:	464b      	mov	r3, r9
 800aee8:	4621      	mov	r1, r4
 800aeea:	4640      	mov	r0, r8
 800aeec:	f8cd a000 	str.w	sl, [sp]
 800aef0:	aa03      	add	r2, sp, #12
 800aef2:	f7ff fedf 	bl	800acb4 <_printf_common>
 800aef6:	3001      	adds	r0, #1
 800aef8:	d14c      	bne.n	800af94 <_printf_i+0x200>
 800aefa:	f04f 30ff 	mov.w	r0, #4294967295
 800aefe:	b004      	add	sp, #16
 800af00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af04:	4834      	ldr	r0, [pc, #208]	; (800afd8 <_printf_i+0x244>)
 800af06:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800af0a:	6829      	ldr	r1, [r5, #0]
 800af0c:	6823      	ldr	r3, [r4, #0]
 800af0e:	f851 6b04 	ldr.w	r6, [r1], #4
 800af12:	6029      	str	r1, [r5, #0]
 800af14:	061d      	lsls	r5, r3, #24
 800af16:	d514      	bpl.n	800af42 <_printf_i+0x1ae>
 800af18:	07df      	lsls	r7, r3, #31
 800af1a:	bf44      	itt	mi
 800af1c:	f043 0320 	orrmi.w	r3, r3, #32
 800af20:	6023      	strmi	r3, [r4, #0]
 800af22:	b91e      	cbnz	r6, 800af2c <_printf_i+0x198>
 800af24:	6823      	ldr	r3, [r4, #0]
 800af26:	f023 0320 	bic.w	r3, r3, #32
 800af2a:	6023      	str	r3, [r4, #0]
 800af2c:	2310      	movs	r3, #16
 800af2e:	e7af      	b.n	800ae90 <_printf_i+0xfc>
 800af30:	6823      	ldr	r3, [r4, #0]
 800af32:	f043 0320 	orr.w	r3, r3, #32
 800af36:	6023      	str	r3, [r4, #0]
 800af38:	2378      	movs	r3, #120	; 0x78
 800af3a:	4828      	ldr	r0, [pc, #160]	; (800afdc <_printf_i+0x248>)
 800af3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af40:	e7e3      	b.n	800af0a <_printf_i+0x176>
 800af42:	0659      	lsls	r1, r3, #25
 800af44:	bf48      	it	mi
 800af46:	b2b6      	uxthmi	r6, r6
 800af48:	e7e6      	b.n	800af18 <_printf_i+0x184>
 800af4a:	4615      	mov	r5, r2
 800af4c:	e7bb      	b.n	800aec6 <_printf_i+0x132>
 800af4e:	682b      	ldr	r3, [r5, #0]
 800af50:	6826      	ldr	r6, [r4, #0]
 800af52:	1d18      	adds	r0, r3, #4
 800af54:	6961      	ldr	r1, [r4, #20]
 800af56:	6028      	str	r0, [r5, #0]
 800af58:	0635      	lsls	r5, r6, #24
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	d501      	bpl.n	800af62 <_printf_i+0x1ce>
 800af5e:	6019      	str	r1, [r3, #0]
 800af60:	e002      	b.n	800af68 <_printf_i+0x1d4>
 800af62:	0670      	lsls	r0, r6, #25
 800af64:	d5fb      	bpl.n	800af5e <_printf_i+0x1ca>
 800af66:	8019      	strh	r1, [r3, #0]
 800af68:	2300      	movs	r3, #0
 800af6a:	4615      	mov	r5, r2
 800af6c:	6123      	str	r3, [r4, #16]
 800af6e:	e7ba      	b.n	800aee6 <_printf_i+0x152>
 800af70:	682b      	ldr	r3, [r5, #0]
 800af72:	2100      	movs	r1, #0
 800af74:	1d1a      	adds	r2, r3, #4
 800af76:	602a      	str	r2, [r5, #0]
 800af78:	681d      	ldr	r5, [r3, #0]
 800af7a:	6862      	ldr	r2, [r4, #4]
 800af7c:	4628      	mov	r0, r5
 800af7e:	f000 fffb 	bl	800bf78 <memchr>
 800af82:	b108      	cbz	r0, 800af88 <_printf_i+0x1f4>
 800af84:	1b40      	subs	r0, r0, r5
 800af86:	6060      	str	r0, [r4, #4]
 800af88:	6863      	ldr	r3, [r4, #4]
 800af8a:	6123      	str	r3, [r4, #16]
 800af8c:	2300      	movs	r3, #0
 800af8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af92:	e7a8      	b.n	800aee6 <_printf_i+0x152>
 800af94:	462a      	mov	r2, r5
 800af96:	4649      	mov	r1, r9
 800af98:	4640      	mov	r0, r8
 800af9a:	6923      	ldr	r3, [r4, #16]
 800af9c:	47d0      	blx	sl
 800af9e:	3001      	adds	r0, #1
 800afa0:	d0ab      	beq.n	800aefa <_printf_i+0x166>
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	079b      	lsls	r3, r3, #30
 800afa6:	d413      	bmi.n	800afd0 <_printf_i+0x23c>
 800afa8:	68e0      	ldr	r0, [r4, #12]
 800afaa:	9b03      	ldr	r3, [sp, #12]
 800afac:	4298      	cmp	r0, r3
 800afae:	bfb8      	it	lt
 800afb0:	4618      	movlt	r0, r3
 800afb2:	e7a4      	b.n	800aefe <_printf_i+0x16a>
 800afb4:	2301      	movs	r3, #1
 800afb6:	4632      	mov	r2, r6
 800afb8:	4649      	mov	r1, r9
 800afba:	4640      	mov	r0, r8
 800afbc:	47d0      	blx	sl
 800afbe:	3001      	adds	r0, #1
 800afc0:	d09b      	beq.n	800aefa <_printf_i+0x166>
 800afc2:	3501      	adds	r5, #1
 800afc4:	68e3      	ldr	r3, [r4, #12]
 800afc6:	9903      	ldr	r1, [sp, #12]
 800afc8:	1a5b      	subs	r3, r3, r1
 800afca:	42ab      	cmp	r3, r5
 800afcc:	dcf2      	bgt.n	800afb4 <_printf_i+0x220>
 800afce:	e7eb      	b.n	800afa8 <_printf_i+0x214>
 800afd0:	2500      	movs	r5, #0
 800afd2:	f104 0619 	add.w	r6, r4, #25
 800afd6:	e7f5      	b.n	800afc4 <_printf_i+0x230>
 800afd8:	0800d6b2 	.word	0x0800d6b2
 800afdc:	0800d6c3 	.word	0x0800d6c3

0800afe0 <iprintf>:
 800afe0:	b40f      	push	{r0, r1, r2, r3}
 800afe2:	4b0a      	ldr	r3, [pc, #40]	; (800b00c <iprintf+0x2c>)
 800afe4:	b513      	push	{r0, r1, r4, lr}
 800afe6:	681c      	ldr	r4, [r3, #0]
 800afe8:	b124      	cbz	r4, 800aff4 <iprintf+0x14>
 800afea:	69a3      	ldr	r3, [r4, #24]
 800afec:	b913      	cbnz	r3, 800aff4 <iprintf+0x14>
 800afee:	4620      	mov	r0, r4
 800aff0:	f000 ff14 	bl	800be1c <__sinit>
 800aff4:	ab05      	add	r3, sp, #20
 800aff6:	4620      	mov	r0, r4
 800aff8:	9a04      	ldr	r2, [sp, #16]
 800affa:	68a1      	ldr	r1, [r4, #8]
 800affc:	9301      	str	r3, [sp, #4]
 800affe:	f001 fdcd 	bl	800cb9c <_vfiprintf_r>
 800b002:	b002      	add	sp, #8
 800b004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b008:	b004      	add	sp, #16
 800b00a:	4770      	bx	lr
 800b00c:	20000180 	.word	0x20000180

0800b010 <putchar>:
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	4b08      	ldr	r3, [pc, #32]	; (800b034 <putchar+0x24>)
 800b014:	4605      	mov	r5, r0
 800b016:	681c      	ldr	r4, [r3, #0]
 800b018:	b124      	cbz	r4, 800b024 <putchar+0x14>
 800b01a:	69a3      	ldr	r3, [r4, #24]
 800b01c:	b913      	cbnz	r3, 800b024 <putchar+0x14>
 800b01e:	4620      	mov	r0, r4
 800b020:	f000 fefc 	bl	800be1c <__sinit>
 800b024:	4629      	mov	r1, r5
 800b026:	4620      	mov	r0, r4
 800b028:	68a2      	ldr	r2, [r4, #8]
 800b02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b02e:	f001 bee5 	b.w	800cdfc <_putc_r>
 800b032:	bf00      	nop
 800b034:	20000180 	.word	0x20000180

0800b038 <siprintf>:
 800b038:	b40e      	push	{r1, r2, r3}
 800b03a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b03e:	b500      	push	{lr}
 800b040:	b09c      	sub	sp, #112	; 0x70
 800b042:	ab1d      	add	r3, sp, #116	; 0x74
 800b044:	9002      	str	r0, [sp, #8]
 800b046:	9006      	str	r0, [sp, #24]
 800b048:	9107      	str	r1, [sp, #28]
 800b04a:	9104      	str	r1, [sp, #16]
 800b04c:	4808      	ldr	r0, [pc, #32]	; (800b070 <siprintf+0x38>)
 800b04e:	4909      	ldr	r1, [pc, #36]	; (800b074 <siprintf+0x3c>)
 800b050:	f853 2b04 	ldr.w	r2, [r3], #4
 800b054:	9105      	str	r1, [sp, #20]
 800b056:	6800      	ldr	r0, [r0, #0]
 800b058:	a902      	add	r1, sp, #8
 800b05a:	9301      	str	r3, [sp, #4]
 800b05c:	f001 fc76 	bl	800c94c <_svfiprintf_r>
 800b060:	2200      	movs	r2, #0
 800b062:	9b02      	ldr	r3, [sp, #8]
 800b064:	701a      	strb	r2, [r3, #0]
 800b066:	b01c      	add	sp, #112	; 0x70
 800b068:	f85d eb04 	ldr.w	lr, [sp], #4
 800b06c:	b003      	add	sp, #12
 800b06e:	4770      	bx	lr
 800b070:	20000180 	.word	0x20000180
 800b074:	ffff0208 	.word	0xffff0208

0800b078 <quorem>:
 800b078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07c:	6903      	ldr	r3, [r0, #16]
 800b07e:	690c      	ldr	r4, [r1, #16]
 800b080:	4607      	mov	r7, r0
 800b082:	42a3      	cmp	r3, r4
 800b084:	f2c0 8082 	blt.w	800b18c <quorem+0x114>
 800b088:	3c01      	subs	r4, #1
 800b08a:	f100 0514 	add.w	r5, r0, #20
 800b08e:	f101 0814 	add.w	r8, r1, #20
 800b092:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b096:	9301      	str	r3, [sp, #4]
 800b098:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b09c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b0ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0b0:	d331      	bcc.n	800b116 <quorem+0x9e>
 800b0b2:	f04f 0e00 	mov.w	lr, #0
 800b0b6:	4640      	mov	r0, r8
 800b0b8:	46ac      	mov	ip, r5
 800b0ba:	46f2      	mov	sl, lr
 800b0bc:	f850 2b04 	ldr.w	r2, [r0], #4
 800b0c0:	b293      	uxth	r3, r2
 800b0c2:	fb06 e303 	mla	r3, r6, r3, lr
 800b0c6:	0c12      	lsrs	r2, r2, #16
 800b0c8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	fb06 e202 	mla	r2, r6, r2, lr
 800b0d2:	ebaa 0303 	sub.w	r3, sl, r3
 800b0d6:	f8dc a000 	ldr.w	sl, [ip]
 800b0da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b0de:	fa1f fa8a 	uxth.w	sl, sl
 800b0e2:	4453      	add	r3, sl
 800b0e4:	f8dc a000 	ldr.w	sl, [ip]
 800b0e8:	b292      	uxth	r2, r2
 800b0ea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b0ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0f8:	4581      	cmp	r9, r0
 800b0fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b0fe:	f84c 3b04 	str.w	r3, [ip], #4
 800b102:	d2db      	bcs.n	800b0bc <quorem+0x44>
 800b104:	f855 300b 	ldr.w	r3, [r5, fp]
 800b108:	b92b      	cbnz	r3, 800b116 <quorem+0x9e>
 800b10a:	9b01      	ldr	r3, [sp, #4]
 800b10c:	3b04      	subs	r3, #4
 800b10e:	429d      	cmp	r5, r3
 800b110:	461a      	mov	r2, r3
 800b112:	d32f      	bcc.n	800b174 <quorem+0xfc>
 800b114:	613c      	str	r4, [r7, #16]
 800b116:	4638      	mov	r0, r7
 800b118:	f001 f9c8 	bl	800c4ac <__mcmp>
 800b11c:	2800      	cmp	r0, #0
 800b11e:	db25      	blt.n	800b16c <quorem+0xf4>
 800b120:	4628      	mov	r0, r5
 800b122:	f04f 0c00 	mov.w	ip, #0
 800b126:	3601      	adds	r6, #1
 800b128:	f858 1b04 	ldr.w	r1, [r8], #4
 800b12c:	f8d0 e000 	ldr.w	lr, [r0]
 800b130:	b28b      	uxth	r3, r1
 800b132:	ebac 0303 	sub.w	r3, ip, r3
 800b136:	fa1f f28e 	uxth.w	r2, lr
 800b13a:	4413      	add	r3, r2
 800b13c:	0c0a      	lsrs	r2, r1, #16
 800b13e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b142:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b146:	b29b      	uxth	r3, r3
 800b148:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b14c:	45c1      	cmp	r9, r8
 800b14e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b152:	f840 3b04 	str.w	r3, [r0], #4
 800b156:	d2e7      	bcs.n	800b128 <quorem+0xb0>
 800b158:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b15c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b160:	b922      	cbnz	r2, 800b16c <quorem+0xf4>
 800b162:	3b04      	subs	r3, #4
 800b164:	429d      	cmp	r5, r3
 800b166:	461a      	mov	r2, r3
 800b168:	d30a      	bcc.n	800b180 <quorem+0x108>
 800b16a:	613c      	str	r4, [r7, #16]
 800b16c:	4630      	mov	r0, r6
 800b16e:	b003      	add	sp, #12
 800b170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b174:	6812      	ldr	r2, [r2, #0]
 800b176:	3b04      	subs	r3, #4
 800b178:	2a00      	cmp	r2, #0
 800b17a:	d1cb      	bne.n	800b114 <quorem+0x9c>
 800b17c:	3c01      	subs	r4, #1
 800b17e:	e7c6      	b.n	800b10e <quorem+0x96>
 800b180:	6812      	ldr	r2, [r2, #0]
 800b182:	3b04      	subs	r3, #4
 800b184:	2a00      	cmp	r2, #0
 800b186:	d1f0      	bne.n	800b16a <quorem+0xf2>
 800b188:	3c01      	subs	r4, #1
 800b18a:	e7eb      	b.n	800b164 <quorem+0xec>
 800b18c:	2000      	movs	r0, #0
 800b18e:	e7ee      	b.n	800b16e <quorem+0xf6>

0800b190 <_dtoa_r>:
 800b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	4616      	mov	r6, r2
 800b196:	461f      	mov	r7, r3
 800b198:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b19a:	b099      	sub	sp, #100	; 0x64
 800b19c:	4605      	mov	r5, r0
 800b19e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b1a2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b1a6:	b974      	cbnz	r4, 800b1c6 <_dtoa_r+0x36>
 800b1a8:	2010      	movs	r0, #16
 800b1aa:	f000 fedd 	bl	800bf68 <malloc>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	6268      	str	r0, [r5, #36]	; 0x24
 800b1b2:	b920      	cbnz	r0, 800b1be <_dtoa_r+0x2e>
 800b1b4:	21ea      	movs	r1, #234	; 0xea
 800b1b6:	4ba8      	ldr	r3, [pc, #672]	; (800b458 <_dtoa_r+0x2c8>)
 800b1b8:	48a8      	ldr	r0, [pc, #672]	; (800b45c <_dtoa_r+0x2cc>)
 800b1ba:	f001 ff8d 	bl	800d0d8 <__assert_func>
 800b1be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1c2:	6004      	str	r4, [r0, #0]
 800b1c4:	60c4      	str	r4, [r0, #12]
 800b1c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1c8:	6819      	ldr	r1, [r3, #0]
 800b1ca:	b151      	cbz	r1, 800b1e2 <_dtoa_r+0x52>
 800b1cc:	685a      	ldr	r2, [r3, #4]
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	4093      	lsls	r3, r2
 800b1d2:	604a      	str	r2, [r1, #4]
 800b1d4:	608b      	str	r3, [r1, #8]
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	f000 ff2a 	bl	800c030 <_Bfree>
 800b1dc:	2200      	movs	r2, #0
 800b1de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	1e3b      	subs	r3, r7, #0
 800b1e4:	bfaf      	iteee	ge
 800b1e6:	2300      	movge	r3, #0
 800b1e8:	2201      	movlt	r2, #1
 800b1ea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b1ee:	9305      	strlt	r3, [sp, #20]
 800b1f0:	bfa8      	it	ge
 800b1f2:	f8c8 3000 	strge.w	r3, [r8]
 800b1f6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b1fa:	4b99      	ldr	r3, [pc, #612]	; (800b460 <_dtoa_r+0x2d0>)
 800b1fc:	bfb8      	it	lt
 800b1fe:	f8c8 2000 	strlt.w	r2, [r8]
 800b202:	ea33 0309 	bics.w	r3, r3, r9
 800b206:	d119      	bne.n	800b23c <_dtoa_r+0xac>
 800b208:	f242 730f 	movw	r3, #9999	; 0x270f
 800b20c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b20e:	6013      	str	r3, [r2, #0]
 800b210:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b214:	4333      	orrs	r3, r6
 800b216:	f000 857f 	beq.w	800bd18 <_dtoa_r+0xb88>
 800b21a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b21c:	b953      	cbnz	r3, 800b234 <_dtoa_r+0xa4>
 800b21e:	4b91      	ldr	r3, [pc, #580]	; (800b464 <_dtoa_r+0x2d4>)
 800b220:	e022      	b.n	800b268 <_dtoa_r+0xd8>
 800b222:	4b91      	ldr	r3, [pc, #580]	; (800b468 <_dtoa_r+0x2d8>)
 800b224:	9303      	str	r3, [sp, #12]
 800b226:	3308      	adds	r3, #8
 800b228:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b22a:	6013      	str	r3, [r2, #0]
 800b22c:	9803      	ldr	r0, [sp, #12]
 800b22e:	b019      	add	sp, #100	; 0x64
 800b230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b234:	4b8b      	ldr	r3, [pc, #556]	; (800b464 <_dtoa_r+0x2d4>)
 800b236:	9303      	str	r3, [sp, #12]
 800b238:	3303      	adds	r3, #3
 800b23a:	e7f5      	b.n	800b228 <_dtoa_r+0x98>
 800b23c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b240:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b244:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b248:	2200      	movs	r2, #0
 800b24a:	2300      	movs	r3, #0
 800b24c:	f7f5 fbac 	bl	80009a8 <__aeabi_dcmpeq>
 800b250:	4680      	mov	r8, r0
 800b252:	b158      	cbz	r0, 800b26c <_dtoa_r+0xdc>
 800b254:	2301      	movs	r3, #1
 800b256:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b258:	6013      	str	r3, [r2, #0]
 800b25a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f000 8558 	beq.w	800bd12 <_dtoa_r+0xb82>
 800b262:	4882      	ldr	r0, [pc, #520]	; (800b46c <_dtoa_r+0x2dc>)
 800b264:	6018      	str	r0, [r3, #0]
 800b266:	1e43      	subs	r3, r0, #1
 800b268:	9303      	str	r3, [sp, #12]
 800b26a:	e7df      	b.n	800b22c <_dtoa_r+0x9c>
 800b26c:	ab16      	add	r3, sp, #88	; 0x58
 800b26e:	9301      	str	r3, [sp, #4]
 800b270:	ab17      	add	r3, sp, #92	; 0x5c
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	4628      	mov	r0, r5
 800b276:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b27a:	f001 f9bf 	bl	800c5fc <__d2b>
 800b27e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b282:	4683      	mov	fp, r0
 800b284:	2c00      	cmp	r4, #0
 800b286:	d07f      	beq.n	800b388 <_dtoa_r+0x1f8>
 800b288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b28c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b28e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b292:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b296:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b29a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b29e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	4b72      	ldr	r3, [pc, #456]	; (800b470 <_dtoa_r+0x2e0>)
 800b2a6:	f7f4 ff5f 	bl	8000168 <__aeabi_dsub>
 800b2aa:	a365      	add	r3, pc, #404	; (adr r3, 800b440 <_dtoa_r+0x2b0>)
 800b2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b0:	f7f5 f912 	bl	80004d8 <__aeabi_dmul>
 800b2b4:	a364      	add	r3, pc, #400	; (adr r3, 800b448 <_dtoa_r+0x2b8>)
 800b2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ba:	f7f4 ff57 	bl	800016c <__adddf3>
 800b2be:	4606      	mov	r6, r0
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	460f      	mov	r7, r1
 800b2c4:	f7f5 f89e 	bl	8000404 <__aeabi_i2d>
 800b2c8:	a361      	add	r3, pc, #388	; (adr r3, 800b450 <_dtoa_r+0x2c0>)
 800b2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ce:	f7f5 f903 	bl	80004d8 <__aeabi_dmul>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	4630      	mov	r0, r6
 800b2d8:	4639      	mov	r1, r7
 800b2da:	f7f4 ff47 	bl	800016c <__adddf3>
 800b2de:	4606      	mov	r6, r0
 800b2e0:	460f      	mov	r7, r1
 800b2e2:	f7f5 fba9 	bl	8000a38 <__aeabi_d2iz>
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	4682      	mov	sl, r0
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	4639      	mov	r1, r7
 800b2f0:	f7f5 fb64 	bl	80009bc <__aeabi_dcmplt>
 800b2f4:	b148      	cbz	r0, 800b30a <_dtoa_r+0x17a>
 800b2f6:	4650      	mov	r0, sl
 800b2f8:	f7f5 f884 	bl	8000404 <__aeabi_i2d>
 800b2fc:	4632      	mov	r2, r6
 800b2fe:	463b      	mov	r3, r7
 800b300:	f7f5 fb52 	bl	80009a8 <__aeabi_dcmpeq>
 800b304:	b908      	cbnz	r0, 800b30a <_dtoa_r+0x17a>
 800b306:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b30a:	f1ba 0f16 	cmp.w	sl, #22
 800b30e:	d858      	bhi.n	800b3c2 <_dtoa_r+0x232>
 800b310:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b314:	4b57      	ldr	r3, [pc, #348]	; (800b474 <_dtoa_r+0x2e4>)
 800b316:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	f7f5 fb4d 	bl	80009bc <__aeabi_dcmplt>
 800b322:	2800      	cmp	r0, #0
 800b324:	d04f      	beq.n	800b3c6 <_dtoa_r+0x236>
 800b326:	2300      	movs	r3, #0
 800b328:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b32c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b32e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b330:	1b1c      	subs	r4, r3, r4
 800b332:	1e63      	subs	r3, r4, #1
 800b334:	9309      	str	r3, [sp, #36]	; 0x24
 800b336:	bf49      	itett	mi
 800b338:	f1c4 0301 	rsbmi	r3, r4, #1
 800b33c:	2300      	movpl	r3, #0
 800b33e:	9306      	strmi	r3, [sp, #24]
 800b340:	2300      	movmi	r3, #0
 800b342:	bf54      	ite	pl
 800b344:	9306      	strpl	r3, [sp, #24]
 800b346:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b348:	f1ba 0f00 	cmp.w	sl, #0
 800b34c:	db3d      	blt.n	800b3ca <_dtoa_r+0x23a>
 800b34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b350:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b354:	4453      	add	r3, sl
 800b356:	9309      	str	r3, [sp, #36]	; 0x24
 800b358:	2300      	movs	r3, #0
 800b35a:	930a      	str	r3, [sp, #40]	; 0x28
 800b35c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b35e:	2b09      	cmp	r3, #9
 800b360:	f200 808c 	bhi.w	800b47c <_dtoa_r+0x2ec>
 800b364:	2b05      	cmp	r3, #5
 800b366:	bfc4      	itt	gt
 800b368:	3b04      	subgt	r3, #4
 800b36a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b36c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b36e:	bfc8      	it	gt
 800b370:	2400      	movgt	r4, #0
 800b372:	f1a3 0302 	sub.w	r3, r3, #2
 800b376:	bfd8      	it	le
 800b378:	2401      	movle	r4, #1
 800b37a:	2b03      	cmp	r3, #3
 800b37c:	f200 808a 	bhi.w	800b494 <_dtoa_r+0x304>
 800b380:	e8df f003 	tbb	[pc, r3]
 800b384:	5b4d4f2d 	.word	0x5b4d4f2d
 800b388:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b38c:	441c      	add	r4, r3
 800b38e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b392:	2b20      	cmp	r3, #32
 800b394:	bfc3      	ittte	gt
 800b396:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b39a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b39e:	fa09 f303 	lslgt.w	r3, r9, r3
 800b3a2:	f1c3 0320 	rsble	r3, r3, #32
 800b3a6:	bfc6      	itte	gt
 800b3a8:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b3ac:	4318      	orrgt	r0, r3
 800b3ae:	fa06 f003 	lslle.w	r0, r6, r3
 800b3b2:	f7f5 f817 	bl	80003e4 <__aeabi_ui2d>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b3bc:	3c01      	subs	r4, #1
 800b3be:	9313      	str	r3, [sp, #76]	; 0x4c
 800b3c0:	e76f      	b.n	800b2a2 <_dtoa_r+0x112>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e7b2      	b.n	800b32c <_dtoa_r+0x19c>
 800b3c6:	900f      	str	r0, [sp, #60]	; 0x3c
 800b3c8:	e7b1      	b.n	800b32e <_dtoa_r+0x19e>
 800b3ca:	9b06      	ldr	r3, [sp, #24]
 800b3cc:	eba3 030a 	sub.w	r3, r3, sl
 800b3d0:	9306      	str	r3, [sp, #24]
 800b3d2:	f1ca 0300 	rsb	r3, sl, #0
 800b3d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b3d8:	2300      	movs	r3, #0
 800b3da:	930e      	str	r3, [sp, #56]	; 0x38
 800b3dc:	e7be      	b.n	800b35c <_dtoa_r+0x1cc>
 800b3de:	2300      	movs	r3, #0
 800b3e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	dc58      	bgt.n	800b49a <_dtoa_r+0x30a>
 800b3e8:	f04f 0901 	mov.w	r9, #1
 800b3ec:	464b      	mov	r3, r9
 800b3ee:	f8cd 9020 	str.w	r9, [sp, #32]
 800b3f2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b3fa:	6042      	str	r2, [r0, #4]
 800b3fc:	2204      	movs	r2, #4
 800b3fe:	f102 0614 	add.w	r6, r2, #20
 800b402:	429e      	cmp	r6, r3
 800b404:	6841      	ldr	r1, [r0, #4]
 800b406:	d94e      	bls.n	800b4a6 <_dtoa_r+0x316>
 800b408:	4628      	mov	r0, r5
 800b40a:	f000 fdd1 	bl	800bfb0 <_Balloc>
 800b40e:	9003      	str	r0, [sp, #12]
 800b410:	2800      	cmp	r0, #0
 800b412:	d14c      	bne.n	800b4ae <_dtoa_r+0x31e>
 800b414:	4602      	mov	r2, r0
 800b416:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b41a:	4b17      	ldr	r3, [pc, #92]	; (800b478 <_dtoa_r+0x2e8>)
 800b41c:	e6cc      	b.n	800b1b8 <_dtoa_r+0x28>
 800b41e:	2301      	movs	r3, #1
 800b420:	e7de      	b.n	800b3e0 <_dtoa_r+0x250>
 800b422:	2300      	movs	r3, #0
 800b424:	930b      	str	r3, [sp, #44]	; 0x2c
 800b426:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b428:	eb0a 0903 	add.w	r9, sl, r3
 800b42c:	f109 0301 	add.w	r3, r9, #1
 800b430:	2b01      	cmp	r3, #1
 800b432:	9308      	str	r3, [sp, #32]
 800b434:	bfb8      	it	lt
 800b436:	2301      	movlt	r3, #1
 800b438:	e7dd      	b.n	800b3f6 <_dtoa_r+0x266>
 800b43a:	2301      	movs	r3, #1
 800b43c:	e7f2      	b.n	800b424 <_dtoa_r+0x294>
 800b43e:	bf00      	nop
 800b440:	636f4361 	.word	0x636f4361
 800b444:	3fd287a7 	.word	0x3fd287a7
 800b448:	8b60c8b3 	.word	0x8b60c8b3
 800b44c:	3fc68a28 	.word	0x3fc68a28
 800b450:	509f79fb 	.word	0x509f79fb
 800b454:	3fd34413 	.word	0x3fd34413
 800b458:	0800d6e1 	.word	0x0800d6e1
 800b45c:	0800d6f8 	.word	0x0800d6f8
 800b460:	7ff00000 	.word	0x7ff00000
 800b464:	0800d6dd 	.word	0x0800d6dd
 800b468:	0800d6d4 	.word	0x0800d6d4
 800b46c:	0800d6b1 	.word	0x0800d6b1
 800b470:	3ff80000 	.word	0x3ff80000
 800b474:	0800d848 	.word	0x0800d848
 800b478:	0800d753 	.word	0x0800d753
 800b47c:	2401      	movs	r4, #1
 800b47e:	2300      	movs	r3, #0
 800b480:	940b      	str	r4, [sp, #44]	; 0x2c
 800b482:	9322      	str	r3, [sp, #136]	; 0x88
 800b484:	f04f 39ff 	mov.w	r9, #4294967295
 800b488:	2200      	movs	r2, #0
 800b48a:	2312      	movs	r3, #18
 800b48c:	f8cd 9020 	str.w	r9, [sp, #32]
 800b490:	9223      	str	r2, [sp, #140]	; 0x8c
 800b492:	e7b0      	b.n	800b3f6 <_dtoa_r+0x266>
 800b494:	2301      	movs	r3, #1
 800b496:	930b      	str	r3, [sp, #44]	; 0x2c
 800b498:	e7f4      	b.n	800b484 <_dtoa_r+0x2f4>
 800b49a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b49e:	464b      	mov	r3, r9
 800b4a0:	f8cd 9020 	str.w	r9, [sp, #32]
 800b4a4:	e7a7      	b.n	800b3f6 <_dtoa_r+0x266>
 800b4a6:	3101      	adds	r1, #1
 800b4a8:	6041      	str	r1, [r0, #4]
 800b4aa:	0052      	lsls	r2, r2, #1
 800b4ac:	e7a7      	b.n	800b3fe <_dtoa_r+0x26e>
 800b4ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b4b0:	9a03      	ldr	r2, [sp, #12]
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	9b08      	ldr	r3, [sp, #32]
 800b4b6:	2b0e      	cmp	r3, #14
 800b4b8:	f200 80a8 	bhi.w	800b60c <_dtoa_r+0x47c>
 800b4bc:	2c00      	cmp	r4, #0
 800b4be:	f000 80a5 	beq.w	800b60c <_dtoa_r+0x47c>
 800b4c2:	f1ba 0f00 	cmp.w	sl, #0
 800b4c6:	dd34      	ble.n	800b532 <_dtoa_r+0x3a2>
 800b4c8:	4a9a      	ldr	r2, [pc, #616]	; (800b734 <_dtoa_r+0x5a4>)
 800b4ca:	f00a 030f 	and.w	r3, sl, #15
 800b4ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b4d2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b4d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b4da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b4de:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b4e2:	d016      	beq.n	800b512 <_dtoa_r+0x382>
 800b4e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b4e8:	4b93      	ldr	r3, [pc, #588]	; (800b738 <_dtoa_r+0x5a8>)
 800b4ea:	2703      	movs	r7, #3
 800b4ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b4f0:	f7f5 f91c 	bl	800072c <__aeabi_ddiv>
 800b4f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4f8:	f004 040f 	and.w	r4, r4, #15
 800b4fc:	4e8e      	ldr	r6, [pc, #568]	; (800b738 <_dtoa_r+0x5a8>)
 800b4fe:	b954      	cbnz	r4, 800b516 <_dtoa_r+0x386>
 800b500:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b504:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b508:	f7f5 f910 	bl	800072c <__aeabi_ddiv>
 800b50c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b510:	e029      	b.n	800b566 <_dtoa_r+0x3d6>
 800b512:	2702      	movs	r7, #2
 800b514:	e7f2      	b.n	800b4fc <_dtoa_r+0x36c>
 800b516:	07e1      	lsls	r1, r4, #31
 800b518:	d508      	bpl.n	800b52c <_dtoa_r+0x39c>
 800b51a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b51e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b522:	f7f4 ffd9 	bl	80004d8 <__aeabi_dmul>
 800b526:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b52a:	3701      	adds	r7, #1
 800b52c:	1064      	asrs	r4, r4, #1
 800b52e:	3608      	adds	r6, #8
 800b530:	e7e5      	b.n	800b4fe <_dtoa_r+0x36e>
 800b532:	f000 80a5 	beq.w	800b680 <_dtoa_r+0x4f0>
 800b536:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b53a:	f1ca 0400 	rsb	r4, sl, #0
 800b53e:	4b7d      	ldr	r3, [pc, #500]	; (800b734 <_dtoa_r+0x5a4>)
 800b540:	f004 020f 	and.w	r2, r4, #15
 800b544:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54c:	f7f4 ffc4 	bl	80004d8 <__aeabi_dmul>
 800b550:	2702      	movs	r7, #2
 800b552:	2300      	movs	r3, #0
 800b554:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b558:	4e77      	ldr	r6, [pc, #476]	; (800b738 <_dtoa_r+0x5a8>)
 800b55a:	1124      	asrs	r4, r4, #4
 800b55c:	2c00      	cmp	r4, #0
 800b55e:	f040 8084 	bne.w	800b66a <_dtoa_r+0x4da>
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1d2      	bne.n	800b50c <_dtoa_r+0x37c>
 800b566:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f000 808b 	beq.w	800b684 <_dtoa_r+0x4f4>
 800b56e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b572:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b576:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b57a:	2200      	movs	r2, #0
 800b57c:	4b6f      	ldr	r3, [pc, #444]	; (800b73c <_dtoa_r+0x5ac>)
 800b57e:	f7f5 fa1d 	bl	80009bc <__aeabi_dcmplt>
 800b582:	2800      	cmp	r0, #0
 800b584:	d07e      	beq.n	800b684 <_dtoa_r+0x4f4>
 800b586:	9b08      	ldr	r3, [sp, #32]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d07b      	beq.n	800b684 <_dtoa_r+0x4f4>
 800b58c:	f1b9 0f00 	cmp.w	r9, #0
 800b590:	dd38      	ble.n	800b604 <_dtoa_r+0x474>
 800b592:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b596:	2200      	movs	r2, #0
 800b598:	4b69      	ldr	r3, [pc, #420]	; (800b740 <_dtoa_r+0x5b0>)
 800b59a:	f7f4 ff9d 	bl	80004d8 <__aeabi_dmul>
 800b59e:	464c      	mov	r4, r9
 800b5a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5a4:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b5a8:	3701      	adds	r7, #1
 800b5aa:	4638      	mov	r0, r7
 800b5ac:	f7f4 ff2a 	bl	8000404 <__aeabi_i2d>
 800b5b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5b4:	f7f4 ff90 	bl	80004d8 <__aeabi_dmul>
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	4b62      	ldr	r3, [pc, #392]	; (800b744 <_dtoa_r+0x5b4>)
 800b5bc:	f7f4 fdd6 	bl	800016c <__adddf3>
 800b5c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b5c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b5c8:	9611      	str	r6, [sp, #68]	; 0x44
 800b5ca:	2c00      	cmp	r4, #0
 800b5cc:	d15d      	bne.n	800b68a <_dtoa_r+0x4fa>
 800b5ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	4b5c      	ldr	r3, [pc, #368]	; (800b748 <_dtoa_r+0x5b8>)
 800b5d6:	f7f4 fdc7 	bl	8000168 <__aeabi_dsub>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	460b      	mov	r3, r1
 800b5de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b5e2:	4633      	mov	r3, r6
 800b5e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b5e6:	f7f5 fa07 	bl	80009f8 <__aeabi_dcmpgt>
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	f040 829c 	bne.w	800bb28 <_dtoa_r+0x998>
 800b5f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b5f6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b5fa:	f7f5 f9df 	bl	80009bc <__aeabi_dcmplt>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	f040 8290 	bne.w	800bb24 <_dtoa_r+0x994>
 800b604:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b608:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b60c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f2c0 8152 	blt.w	800b8b8 <_dtoa_r+0x728>
 800b614:	f1ba 0f0e 	cmp.w	sl, #14
 800b618:	f300 814e 	bgt.w	800b8b8 <_dtoa_r+0x728>
 800b61c:	4b45      	ldr	r3, [pc, #276]	; (800b734 <_dtoa_r+0x5a4>)
 800b61e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b622:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b626:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b62a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f280 80db 	bge.w	800b7e8 <_dtoa_r+0x658>
 800b632:	9b08      	ldr	r3, [sp, #32]
 800b634:	2b00      	cmp	r3, #0
 800b636:	f300 80d7 	bgt.w	800b7e8 <_dtoa_r+0x658>
 800b63a:	f040 8272 	bne.w	800bb22 <_dtoa_r+0x992>
 800b63e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b642:	2200      	movs	r2, #0
 800b644:	4b40      	ldr	r3, [pc, #256]	; (800b748 <_dtoa_r+0x5b8>)
 800b646:	f7f4 ff47 	bl	80004d8 <__aeabi_dmul>
 800b64a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b64e:	f7f5 f9c9 	bl	80009e4 <__aeabi_dcmpge>
 800b652:	9c08      	ldr	r4, [sp, #32]
 800b654:	4626      	mov	r6, r4
 800b656:	2800      	cmp	r0, #0
 800b658:	f040 8248 	bne.w	800baec <_dtoa_r+0x95c>
 800b65c:	2331      	movs	r3, #49	; 0x31
 800b65e:	9f03      	ldr	r7, [sp, #12]
 800b660:	f10a 0a01 	add.w	sl, sl, #1
 800b664:	f807 3b01 	strb.w	r3, [r7], #1
 800b668:	e244      	b.n	800baf4 <_dtoa_r+0x964>
 800b66a:	07e2      	lsls	r2, r4, #31
 800b66c:	d505      	bpl.n	800b67a <_dtoa_r+0x4ea>
 800b66e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b672:	f7f4 ff31 	bl	80004d8 <__aeabi_dmul>
 800b676:	2301      	movs	r3, #1
 800b678:	3701      	adds	r7, #1
 800b67a:	1064      	asrs	r4, r4, #1
 800b67c:	3608      	adds	r6, #8
 800b67e:	e76d      	b.n	800b55c <_dtoa_r+0x3cc>
 800b680:	2702      	movs	r7, #2
 800b682:	e770      	b.n	800b566 <_dtoa_r+0x3d6>
 800b684:	46d0      	mov	r8, sl
 800b686:	9c08      	ldr	r4, [sp, #32]
 800b688:	e78f      	b.n	800b5aa <_dtoa_r+0x41a>
 800b68a:	9903      	ldr	r1, [sp, #12]
 800b68c:	4b29      	ldr	r3, [pc, #164]	; (800b734 <_dtoa_r+0x5a4>)
 800b68e:	4421      	add	r1, r4
 800b690:	9112      	str	r1, [sp, #72]	; 0x48
 800b692:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b694:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b698:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b69c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b6a0:	2900      	cmp	r1, #0
 800b6a2:	d055      	beq.n	800b750 <_dtoa_r+0x5c0>
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	4929      	ldr	r1, [pc, #164]	; (800b74c <_dtoa_r+0x5bc>)
 800b6a8:	f7f5 f840 	bl	800072c <__aeabi_ddiv>
 800b6ac:	463b      	mov	r3, r7
 800b6ae:	4632      	mov	r2, r6
 800b6b0:	f7f4 fd5a 	bl	8000168 <__aeabi_dsub>
 800b6b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b6b8:	9f03      	ldr	r7, [sp, #12]
 800b6ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6be:	f7f5 f9bb 	bl	8000a38 <__aeabi_d2iz>
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	f7f4 fe9e 	bl	8000404 <__aeabi_i2d>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6d0:	f7f4 fd4a 	bl	8000168 <__aeabi_dsub>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	3430      	adds	r4, #48	; 0x30
 800b6da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b6de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b6e2:	f807 4b01 	strb.w	r4, [r7], #1
 800b6e6:	f7f5 f969 	bl	80009bc <__aeabi_dcmplt>
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	d174      	bne.n	800b7d8 <_dtoa_r+0x648>
 800b6ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6f2:	2000      	movs	r0, #0
 800b6f4:	4911      	ldr	r1, [pc, #68]	; (800b73c <_dtoa_r+0x5ac>)
 800b6f6:	f7f4 fd37 	bl	8000168 <__aeabi_dsub>
 800b6fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b6fe:	f7f5 f95d 	bl	80009bc <__aeabi_dcmplt>
 800b702:	2800      	cmp	r0, #0
 800b704:	f040 80b7 	bne.w	800b876 <_dtoa_r+0x6e6>
 800b708:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b70a:	429f      	cmp	r7, r3
 800b70c:	f43f af7a 	beq.w	800b604 <_dtoa_r+0x474>
 800b710:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b714:	2200      	movs	r2, #0
 800b716:	4b0a      	ldr	r3, [pc, #40]	; (800b740 <_dtoa_r+0x5b0>)
 800b718:	f7f4 fede 	bl	80004d8 <__aeabi_dmul>
 800b71c:	2200      	movs	r2, #0
 800b71e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b722:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b726:	4b06      	ldr	r3, [pc, #24]	; (800b740 <_dtoa_r+0x5b0>)
 800b728:	f7f4 fed6 	bl	80004d8 <__aeabi_dmul>
 800b72c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b730:	e7c3      	b.n	800b6ba <_dtoa_r+0x52a>
 800b732:	bf00      	nop
 800b734:	0800d848 	.word	0x0800d848
 800b738:	0800d820 	.word	0x0800d820
 800b73c:	3ff00000 	.word	0x3ff00000
 800b740:	40240000 	.word	0x40240000
 800b744:	401c0000 	.word	0x401c0000
 800b748:	40140000 	.word	0x40140000
 800b74c:	3fe00000 	.word	0x3fe00000
 800b750:	4630      	mov	r0, r6
 800b752:	4639      	mov	r1, r7
 800b754:	f7f4 fec0 	bl	80004d8 <__aeabi_dmul>
 800b758:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b75a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b75e:	9c03      	ldr	r4, [sp, #12]
 800b760:	9314      	str	r3, [sp, #80]	; 0x50
 800b762:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b766:	f7f5 f967 	bl	8000a38 <__aeabi_d2iz>
 800b76a:	9015      	str	r0, [sp, #84]	; 0x54
 800b76c:	f7f4 fe4a 	bl	8000404 <__aeabi_i2d>
 800b770:	4602      	mov	r2, r0
 800b772:	460b      	mov	r3, r1
 800b774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b778:	f7f4 fcf6 	bl	8000168 <__aeabi_dsub>
 800b77c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b77e:	4606      	mov	r6, r0
 800b780:	3330      	adds	r3, #48	; 0x30
 800b782:	f804 3b01 	strb.w	r3, [r4], #1
 800b786:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b788:	460f      	mov	r7, r1
 800b78a:	429c      	cmp	r4, r3
 800b78c:	f04f 0200 	mov.w	r2, #0
 800b790:	d124      	bne.n	800b7dc <_dtoa_r+0x64c>
 800b792:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b796:	4bb0      	ldr	r3, [pc, #704]	; (800ba58 <_dtoa_r+0x8c8>)
 800b798:	f7f4 fce8 	bl	800016c <__adddf3>
 800b79c:	4602      	mov	r2, r0
 800b79e:	460b      	mov	r3, r1
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	4639      	mov	r1, r7
 800b7a4:	f7f5 f928 	bl	80009f8 <__aeabi_dcmpgt>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	d163      	bne.n	800b874 <_dtoa_r+0x6e4>
 800b7ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	49a9      	ldr	r1, [pc, #676]	; (800ba58 <_dtoa_r+0x8c8>)
 800b7b4:	f7f4 fcd8 	bl	8000168 <__aeabi_dsub>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	4630      	mov	r0, r6
 800b7be:	4639      	mov	r1, r7
 800b7c0:	f7f5 f8fc 	bl	80009bc <__aeabi_dcmplt>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	f43f af1d 	beq.w	800b604 <_dtoa_r+0x474>
 800b7ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b7cc:	1e7b      	subs	r3, r7, #1
 800b7ce:	9314      	str	r3, [sp, #80]	; 0x50
 800b7d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b7d4:	2b30      	cmp	r3, #48	; 0x30
 800b7d6:	d0f8      	beq.n	800b7ca <_dtoa_r+0x63a>
 800b7d8:	46c2      	mov	sl, r8
 800b7da:	e03b      	b.n	800b854 <_dtoa_r+0x6c4>
 800b7dc:	4b9f      	ldr	r3, [pc, #636]	; (800ba5c <_dtoa_r+0x8cc>)
 800b7de:	f7f4 fe7b 	bl	80004d8 <__aeabi_dmul>
 800b7e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7e6:	e7bc      	b.n	800b762 <_dtoa_r+0x5d2>
 800b7e8:	9f03      	ldr	r7, [sp, #12]
 800b7ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b7ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	4649      	mov	r1, r9
 800b7f6:	f7f4 ff99 	bl	800072c <__aeabi_ddiv>
 800b7fa:	f7f5 f91d 	bl	8000a38 <__aeabi_d2iz>
 800b7fe:	4604      	mov	r4, r0
 800b800:	f7f4 fe00 	bl	8000404 <__aeabi_i2d>
 800b804:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b808:	f7f4 fe66 	bl	80004d8 <__aeabi_dmul>
 800b80c:	4602      	mov	r2, r0
 800b80e:	460b      	mov	r3, r1
 800b810:	4640      	mov	r0, r8
 800b812:	4649      	mov	r1, r9
 800b814:	f7f4 fca8 	bl	8000168 <__aeabi_dsub>
 800b818:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b81c:	f807 6b01 	strb.w	r6, [r7], #1
 800b820:	9e03      	ldr	r6, [sp, #12]
 800b822:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b826:	1bbe      	subs	r6, r7, r6
 800b828:	45b4      	cmp	ip, r6
 800b82a:	4602      	mov	r2, r0
 800b82c:	460b      	mov	r3, r1
 800b82e:	d136      	bne.n	800b89e <_dtoa_r+0x70e>
 800b830:	f7f4 fc9c 	bl	800016c <__adddf3>
 800b834:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b838:	4680      	mov	r8, r0
 800b83a:	4689      	mov	r9, r1
 800b83c:	f7f5 f8dc 	bl	80009f8 <__aeabi_dcmpgt>
 800b840:	bb58      	cbnz	r0, 800b89a <_dtoa_r+0x70a>
 800b842:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b846:	4640      	mov	r0, r8
 800b848:	4649      	mov	r1, r9
 800b84a:	f7f5 f8ad 	bl	80009a8 <__aeabi_dcmpeq>
 800b84e:	b108      	cbz	r0, 800b854 <_dtoa_r+0x6c4>
 800b850:	07e1      	lsls	r1, r4, #31
 800b852:	d422      	bmi.n	800b89a <_dtoa_r+0x70a>
 800b854:	4628      	mov	r0, r5
 800b856:	4659      	mov	r1, fp
 800b858:	f000 fbea 	bl	800c030 <_Bfree>
 800b85c:	2300      	movs	r3, #0
 800b85e:	703b      	strb	r3, [r7, #0]
 800b860:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b862:	f10a 0001 	add.w	r0, sl, #1
 800b866:	6018      	str	r0, [r3, #0]
 800b868:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f43f acde 	beq.w	800b22c <_dtoa_r+0x9c>
 800b870:	601f      	str	r7, [r3, #0]
 800b872:	e4db      	b.n	800b22c <_dtoa_r+0x9c>
 800b874:	4627      	mov	r7, r4
 800b876:	463b      	mov	r3, r7
 800b878:	461f      	mov	r7, r3
 800b87a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b87e:	2a39      	cmp	r2, #57	; 0x39
 800b880:	d107      	bne.n	800b892 <_dtoa_r+0x702>
 800b882:	9a03      	ldr	r2, [sp, #12]
 800b884:	429a      	cmp	r2, r3
 800b886:	d1f7      	bne.n	800b878 <_dtoa_r+0x6e8>
 800b888:	2230      	movs	r2, #48	; 0x30
 800b88a:	9903      	ldr	r1, [sp, #12]
 800b88c:	f108 0801 	add.w	r8, r8, #1
 800b890:	700a      	strb	r2, [r1, #0]
 800b892:	781a      	ldrb	r2, [r3, #0]
 800b894:	3201      	adds	r2, #1
 800b896:	701a      	strb	r2, [r3, #0]
 800b898:	e79e      	b.n	800b7d8 <_dtoa_r+0x648>
 800b89a:	46d0      	mov	r8, sl
 800b89c:	e7eb      	b.n	800b876 <_dtoa_r+0x6e6>
 800b89e:	2200      	movs	r2, #0
 800b8a0:	4b6e      	ldr	r3, [pc, #440]	; (800ba5c <_dtoa_r+0x8cc>)
 800b8a2:	f7f4 fe19 	bl	80004d8 <__aeabi_dmul>
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	4680      	mov	r8, r0
 800b8ac:	4689      	mov	r9, r1
 800b8ae:	f7f5 f87b 	bl	80009a8 <__aeabi_dcmpeq>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d09b      	beq.n	800b7ee <_dtoa_r+0x65e>
 800b8b6:	e7cd      	b.n	800b854 <_dtoa_r+0x6c4>
 800b8b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b8ba:	2a00      	cmp	r2, #0
 800b8bc:	f000 80d0 	beq.w	800ba60 <_dtoa_r+0x8d0>
 800b8c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b8c2:	2a01      	cmp	r2, #1
 800b8c4:	f300 80ae 	bgt.w	800ba24 <_dtoa_r+0x894>
 800b8c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b8ca:	2a00      	cmp	r2, #0
 800b8cc:	f000 80a6 	beq.w	800ba1c <_dtoa_r+0x88c>
 800b8d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b8d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b8d6:	9f06      	ldr	r7, [sp, #24]
 800b8d8:	9a06      	ldr	r2, [sp, #24]
 800b8da:	2101      	movs	r1, #1
 800b8dc:	441a      	add	r2, r3
 800b8de:	9206      	str	r2, [sp, #24]
 800b8e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	441a      	add	r2, r3
 800b8e6:	9209      	str	r2, [sp, #36]	; 0x24
 800b8e8:	f000 fc58 	bl	800c19c <__i2b>
 800b8ec:	4606      	mov	r6, r0
 800b8ee:	2f00      	cmp	r7, #0
 800b8f0:	dd0c      	ble.n	800b90c <_dtoa_r+0x77c>
 800b8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	dd09      	ble.n	800b90c <_dtoa_r+0x77c>
 800b8f8:	42bb      	cmp	r3, r7
 800b8fa:	bfa8      	it	ge
 800b8fc:	463b      	movge	r3, r7
 800b8fe:	9a06      	ldr	r2, [sp, #24]
 800b900:	1aff      	subs	r7, r7, r3
 800b902:	1ad2      	subs	r2, r2, r3
 800b904:	9206      	str	r2, [sp, #24]
 800b906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b908:	1ad3      	subs	r3, r2, r3
 800b90a:	9309      	str	r3, [sp, #36]	; 0x24
 800b90c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b90e:	b1f3      	cbz	r3, 800b94e <_dtoa_r+0x7be>
 800b910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b912:	2b00      	cmp	r3, #0
 800b914:	f000 80a8 	beq.w	800ba68 <_dtoa_r+0x8d8>
 800b918:	2c00      	cmp	r4, #0
 800b91a:	dd10      	ble.n	800b93e <_dtoa_r+0x7ae>
 800b91c:	4631      	mov	r1, r6
 800b91e:	4622      	mov	r2, r4
 800b920:	4628      	mov	r0, r5
 800b922:	f000 fcf9 	bl	800c318 <__pow5mult>
 800b926:	465a      	mov	r2, fp
 800b928:	4601      	mov	r1, r0
 800b92a:	4606      	mov	r6, r0
 800b92c:	4628      	mov	r0, r5
 800b92e:	f000 fc4b 	bl	800c1c8 <__multiply>
 800b932:	4680      	mov	r8, r0
 800b934:	4659      	mov	r1, fp
 800b936:	4628      	mov	r0, r5
 800b938:	f000 fb7a 	bl	800c030 <_Bfree>
 800b93c:	46c3      	mov	fp, r8
 800b93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b940:	1b1a      	subs	r2, r3, r4
 800b942:	d004      	beq.n	800b94e <_dtoa_r+0x7be>
 800b944:	4659      	mov	r1, fp
 800b946:	4628      	mov	r0, r5
 800b948:	f000 fce6 	bl	800c318 <__pow5mult>
 800b94c:	4683      	mov	fp, r0
 800b94e:	2101      	movs	r1, #1
 800b950:	4628      	mov	r0, r5
 800b952:	f000 fc23 	bl	800c19c <__i2b>
 800b956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b958:	4604      	mov	r4, r0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	f340 8086 	ble.w	800ba6c <_dtoa_r+0x8dc>
 800b960:	461a      	mov	r2, r3
 800b962:	4601      	mov	r1, r0
 800b964:	4628      	mov	r0, r5
 800b966:	f000 fcd7 	bl	800c318 <__pow5mult>
 800b96a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b96c:	4604      	mov	r4, r0
 800b96e:	2b01      	cmp	r3, #1
 800b970:	dd7f      	ble.n	800ba72 <_dtoa_r+0x8e2>
 800b972:	f04f 0800 	mov.w	r8, #0
 800b976:	6923      	ldr	r3, [r4, #16]
 800b978:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b97c:	6918      	ldr	r0, [r3, #16]
 800b97e:	f000 fbbf 	bl	800c100 <__hi0bits>
 800b982:	f1c0 0020 	rsb	r0, r0, #32
 800b986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b988:	4418      	add	r0, r3
 800b98a:	f010 001f 	ands.w	r0, r0, #31
 800b98e:	f000 8092 	beq.w	800bab6 <_dtoa_r+0x926>
 800b992:	f1c0 0320 	rsb	r3, r0, #32
 800b996:	2b04      	cmp	r3, #4
 800b998:	f340 808a 	ble.w	800bab0 <_dtoa_r+0x920>
 800b99c:	f1c0 001c 	rsb	r0, r0, #28
 800b9a0:	9b06      	ldr	r3, [sp, #24]
 800b9a2:	4407      	add	r7, r0
 800b9a4:	4403      	add	r3, r0
 800b9a6:	9306      	str	r3, [sp, #24]
 800b9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9aa:	4403      	add	r3, r0
 800b9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ae:	9b06      	ldr	r3, [sp, #24]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	dd05      	ble.n	800b9c0 <_dtoa_r+0x830>
 800b9b4:	4659      	mov	r1, fp
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	f000 fd07 	bl	800c3cc <__lshift>
 800b9be:	4683      	mov	fp, r0
 800b9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	dd05      	ble.n	800b9d2 <_dtoa_r+0x842>
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	f000 fcfe 	bl	800c3cc <__lshift>
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d070      	beq.n	800baba <_dtoa_r+0x92a>
 800b9d8:	4621      	mov	r1, r4
 800b9da:	4658      	mov	r0, fp
 800b9dc:	f000 fd66 	bl	800c4ac <__mcmp>
 800b9e0:	2800      	cmp	r0, #0
 800b9e2:	da6a      	bge.n	800baba <_dtoa_r+0x92a>
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	4659      	mov	r1, fp
 800b9e8:	220a      	movs	r2, #10
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	f000 fb42 	bl	800c074 <__multadd>
 800b9f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9f2:	4683      	mov	fp, r0
 800b9f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 8194 	beq.w	800bd26 <_dtoa_r+0xb96>
 800b9fe:	4631      	mov	r1, r6
 800ba00:	2300      	movs	r3, #0
 800ba02:	220a      	movs	r2, #10
 800ba04:	4628      	mov	r0, r5
 800ba06:	f000 fb35 	bl	800c074 <__multadd>
 800ba0a:	f1b9 0f00 	cmp.w	r9, #0
 800ba0e:	4606      	mov	r6, r0
 800ba10:	f300 8093 	bgt.w	800bb3a <_dtoa_r+0x9aa>
 800ba14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	dc57      	bgt.n	800baca <_dtoa_r+0x93a>
 800ba1a:	e08e      	b.n	800bb3a <_dtoa_r+0x9aa>
 800ba1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ba1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba22:	e757      	b.n	800b8d4 <_dtoa_r+0x744>
 800ba24:	9b08      	ldr	r3, [sp, #32]
 800ba26:	1e5c      	subs	r4, r3, #1
 800ba28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba2a:	42a3      	cmp	r3, r4
 800ba2c:	bfb7      	itett	lt
 800ba2e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ba30:	1b1c      	subge	r4, r3, r4
 800ba32:	1ae2      	sublt	r2, r4, r3
 800ba34:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ba36:	bfbe      	ittt	lt
 800ba38:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ba3a:	189b      	addlt	r3, r3, r2
 800ba3c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ba3e:	9b08      	ldr	r3, [sp, #32]
 800ba40:	bfb8      	it	lt
 800ba42:	2400      	movlt	r4, #0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	bfbb      	ittet	lt
 800ba48:	9b06      	ldrlt	r3, [sp, #24]
 800ba4a:	9a08      	ldrlt	r2, [sp, #32]
 800ba4c:	9f06      	ldrge	r7, [sp, #24]
 800ba4e:	1a9f      	sublt	r7, r3, r2
 800ba50:	bfac      	ite	ge
 800ba52:	9b08      	ldrge	r3, [sp, #32]
 800ba54:	2300      	movlt	r3, #0
 800ba56:	e73f      	b.n	800b8d8 <_dtoa_r+0x748>
 800ba58:	3fe00000 	.word	0x3fe00000
 800ba5c:	40240000 	.word	0x40240000
 800ba60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ba62:	9f06      	ldr	r7, [sp, #24]
 800ba64:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ba66:	e742      	b.n	800b8ee <_dtoa_r+0x75e>
 800ba68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba6a:	e76b      	b.n	800b944 <_dtoa_r+0x7b4>
 800ba6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	dc19      	bgt.n	800baa6 <_dtoa_r+0x916>
 800ba72:	9b04      	ldr	r3, [sp, #16]
 800ba74:	b9bb      	cbnz	r3, 800baa6 <_dtoa_r+0x916>
 800ba76:	9b05      	ldr	r3, [sp, #20]
 800ba78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba7c:	b99b      	cbnz	r3, 800baa6 <_dtoa_r+0x916>
 800ba7e:	9b05      	ldr	r3, [sp, #20]
 800ba80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba84:	0d1b      	lsrs	r3, r3, #20
 800ba86:	051b      	lsls	r3, r3, #20
 800ba88:	b183      	cbz	r3, 800baac <_dtoa_r+0x91c>
 800ba8a:	f04f 0801 	mov.w	r8, #1
 800ba8e:	9b06      	ldr	r3, [sp, #24]
 800ba90:	3301      	adds	r3, #1
 800ba92:	9306      	str	r3, [sp, #24]
 800ba94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba96:	3301      	adds	r3, #1
 800ba98:	9309      	str	r3, [sp, #36]	; 0x24
 800ba9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f47f af6a 	bne.w	800b976 <_dtoa_r+0x7e6>
 800baa2:	2001      	movs	r0, #1
 800baa4:	e76f      	b.n	800b986 <_dtoa_r+0x7f6>
 800baa6:	f04f 0800 	mov.w	r8, #0
 800baaa:	e7f6      	b.n	800ba9a <_dtoa_r+0x90a>
 800baac:	4698      	mov	r8, r3
 800baae:	e7f4      	b.n	800ba9a <_dtoa_r+0x90a>
 800bab0:	f43f af7d 	beq.w	800b9ae <_dtoa_r+0x81e>
 800bab4:	4618      	mov	r0, r3
 800bab6:	301c      	adds	r0, #28
 800bab8:	e772      	b.n	800b9a0 <_dtoa_r+0x810>
 800baba:	9b08      	ldr	r3, [sp, #32]
 800babc:	2b00      	cmp	r3, #0
 800babe:	dc36      	bgt.n	800bb2e <_dtoa_r+0x99e>
 800bac0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bac2:	2b02      	cmp	r3, #2
 800bac4:	dd33      	ble.n	800bb2e <_dtoa_r+0x99e>
 800bac6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800baca:	f1b9 0f00 	cmp.w	r9, #0
 800bace:	d10d      	bne.n	800baec <_dtoa_r+0x95c>
 800bad0:	4621      	mov	r1, r4
 800bad2:	464b      	mov	r3, r9
 800bad4:	2205      	movs	r2, #5
 800bad6:	4628      	mov	r0, r5
 800bad8:	f000 facc 	bl	800c074 <__multadd>
 800badc:	4601      	mov	r1, r0
 800bade:	4604      	mov	r4, r0
 800bae0:	4658      	mov	r0, fp
 800bae2:	f000 fce3 	bl	800c4ac <__mcmp>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	f73f adb8 	bgt.w	800b65c <_dtoa_r+0x4cc>
 800baec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800baee:	9f03      	ldr	r7, [sp, #12]
 800baf0:	ea6f 0a03 	mvn.w	sl, r3
 800baf4:	f04f 0800 	mov.w	r8, #0
 800baf8:	4621      	mov	r1, r4
 800bafa:	4628      	mov	r0, r5
 800bafc:	f000 fa98 	bl	800c030 <_Bfree>
 800bb00:	2e00      	cmp	r6, #0
 800bb02:	f43f aea7 	beq.w	800b854 <_dtoa_r+0x6c4>
 800bb06:	f1b8 0f00 	cmp.w	r8, #0
 800bb0a:	d005      	beq.n	800bb18 <_dtoa_r+0x988>
 800bb0c:	45b0      	cmp	r8, r6
 800bb0e:	d003      	beq.n	800bb18 <_dtoa_r+0x988>
 800bb10:	4641      	mov	r1, r8
 800bb12:	4628      	mov	r0, r5
 800bb14:	f000 fa8c 	bl	800c030 <_Bfree>
 800bb18:	4631      	mov	r1, r6
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	f000 fa88 	bl	800c030 <_Bfree>
 800bb20:	e698      	b.n	800b854 <_dtoa_r+0x6c4>
 800bb22:	2400      	movs	r4, #0
 800bb24:	4626      	mov	r6, r4
 800bb26:	e7e1      	b.n	800baec <_dtoa_r+0x95c>
 800bb28:	46c2      	mov	sl, r8
 800bb2a:	4626      	mov	r6, r4
 800bb2c:	e596      	b.n	800b65c <_dtoa_r+0x4cc>
 800bb2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f000 80fd 	beq.w	800bd34 <_dtoa_r+0xba4>
 800bb3a:	2f00      	cmp	r7, #0
 800bb3c:	dd05      	ble.n	800bb4a <_dtoa_r+0x9ba>
 800bb3e:	4631      	mov	r1, r6
 800bb40:	463a      	mov	r2, r7
 800bb42:	4628      	mov	r0, r5
 800bb44:	f000 fc42 	bl	800c3cc <__lshift>
 800bb48:	4606      	mov	r6, r0
 800bb4a:	f1b8 0f00 	cmp.w	r8, #0
 800bb4e:	d05c      	beq.n	800bc0a <_dtoa_r+0xa7a>
 800bb50:	4628      	mov	r0, r5
 800bb52:	6871      	ldr	r1, [r6, #4]
 800bb54:	f000 fa2c 	bl	800bfb0 <_Balloc>
 800bb58:	4607      	mov	r7, r0
 800bb5a:	b928      	cbnz	r0, 800bb68 <_dtoa_r+0x9d8>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bb62:	4b7f      	ldr	r3, [pc, #508]	; (800bd60 <_dtoa_r+0xbd0>)
 800bb64:	f7ff bb28 	b.w	800b1b8 <_dtoa_r+0x28>
 800bb68:	6932      	ldr	r2, [r6, #16]
 800bb6a:	f106 010c 	add.w	r1, r6, #12
 800bb6e:	3202      	adds	r2, #2
 800bb70:	0092      	lsls	r2, r2, #2
 800bb72:	300c      	adds	r0, #12
 800bb74:	f000 fa0e 	bl	800bf94 <memcpy>
 800bb78:	2201      	movs	r2, #1
 800bb7a:	4639      	mov	r1, r7
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	f000 fc25 	bl	800c3cc <__lshift>
 800bb82:	46b0      	mov	r8, r6
 800bb84:	4606      	mov	r6, r0
 800bb86:	9b03      	ldr	r3, [sp, #12]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	9308      	str	r3, [sp, #32]
 800bb8c:	9b03      	ldr	r3, [sp, #12]
 800bb8e:	444b      	add	r3, r9
 800bb90:	930a      	str	r3, [sp, #40]	; 0x28
 800bb92:	9b04      	ldr	r3, [sp, #16]
 800bb94:	f003 0301 	and.w	r3, r3, #1
 800bb98:	9309      	str	r3, [sp, #36]	; 0x24
 800bb9a:	9b08      	ldr	r3, [sp, #32]
 800bb9c:	4621      	mov	r1, r4
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	4658      	mov	r0, fp
 800bba2:	9304      	str	r3, [sp, #16]
 800bba4:	f7ff fa68 	bl	800b078 <quorem>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	4641      	mov	r1, r8
 800bbac:	3330      	adds	r3, #48	; 0x30
 800bbae:	9006      	str	r0, [sp, #24]
 800bbb0:	4658      	mov	r0, fp
 800bbb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbb4:	f000 fc7a 	bl	800c4ac <__mcmp>
 800bbb8:	4632      	mov	r2, r6
 800bbba:	4681      	mov	r9, r0
 800bbbc:	4621      	mov	r1, r4
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	f000 fc90 	bl	800c4e4 <__mdiff>
 800bbc4:	68c2      	ldr	r2, [r0, #12]
 800bbc6:	4607      	mov	r7, r0
 800bbc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbca:	bb02      	cbnz	r2, 800bc0e <_dtoa_r+0xa7e>
 800bbcc:	4601      	mov	r1, r0
 800bbce:	4658      	mov	r0, fp
 800bbd0:	f000 fc6c 	bl	800c4ac <__mcmp>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbd8:	4639      	mov	r1, r7
 800bbda:	4628      	mov	r0, r5
 800bbdc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800bbe0:	f000 fa26 	bl	800c030 <_Bfree>
 800bbe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bbe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbe8:	9f08      	ldr	r7, [sp, #32]
 800bbea:	ea43 0102 	orr.w	r1, r3, r2
 800bbee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf0:	430b      	orrs	r3, r1
 800bbf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbf4:	d10d      	bne.n	800bc12 <_dtoa_r+0xa82>
 800bbf6:	2b39      	cmp	r3, #57	; 0x39
 800bbf8:	d029      	beq.n	800bc4e <_dtoa_r+0xabe>
 800bbfa:	f1b9 0f00 	cmp.w	r9, #0
 800bbfe:	dd01      	ble.n	800bc04 <_dtoa_r+0xa74>
 800bc00:	9b06      	ldr	r3, [sp, #24]
 800bc02:	3331      	adds	r3, #49	; 0x31
 800bc04:	9a04      	ldr	r2, [sp, #16]
 800bc06:	7013      	strb	r3, [r2, #0]
 800bc08:	e776      	b.n	800baf8 <_dtoa_r+0x968>
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	e7b9      	b.n	800bb82 <_dtoa_r+0x9f2>
 800bc0e:	2201      	movs	r2, #1
 800bc10:	e7e2      	b.n	800bbd8 <_dtoa_r+0xa48>
 800bc12:	f1b9 0f00 	cmp.w	r9, #0
 800bc16:	db06      	blt.n	800bc26 <_dtoa_r+0xa96>
 800bc18:	9922      	ldr	r1, [sp, #136]	; 0x88
 800bc1a:	ea41 0909 	orr.w	r9, r1, r9
 800bc1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc20:	ea59 0101 	orrs.w	r1, r9, r1
 800bc24:	d120      	bne.n	800bc68 <_dtoa_r+0xad8>
 800bc26:	2a00      	cmp	r2, #0
 800bc28:	ddec      	ble.n	800bc04 <_dtoa_r+0xa74>
 800bc2a:	4659      	mov	r1, fp
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	4628      	mov	r0, r5
 800bc30:	9308      	str	r3, [sp, #32]
 800bc32:	f000 fbcb 	bl	800c3cc <__lshift>
 800bc36:	4621      	mov	r1, r4
 800bc38:	4683      	mov	fp, r0
 800bc3a:	f000 fc37 	bl	800c4ac <__mcmp>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	9b08      	ldr	r3, [sp, #32]
 800bc42:	dc02      	bgt.n	800bc4a <_dtoa_r+0xaba>
 800bc44:	d1de      	bne.n	800bc04 <_dtoa_r+0xa74>
 800bc46:	07da      	lsls	r2, r3, #31
 800bc48:	d5dc      	bpl.n	800bc04 <_dtoa_r+0xa74>
 800bc4a:	2b39      	cmp	r3, #57	; 0x39
 800bc4c:	d1d8      	bne.n	800bc00 <_dtoa_r+0xa70>
 800bc4e:	2339      	movs	r3, #57	; 0x39
 800bc50:	9a04      	ldr	r2, [sp, #16]
 800bc52:	7013      	strb	r3, [r2, #0]
 800bc54:	463b      	mov	r3, r7
 800bc56:	461f      	mov	r7, r3
 800bc58:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	2a39      	cmp	r2, #57	; 0x39
 800bc60:	d050      	beq.n	800bd04 <_dtoa_r+0xb74>
 800bc62:	3201      	adds	r2, #1
 800bc64:	701a      	strb	r2, [r3, #0]
 800bc66:	e747      	b.n	800baf8 <_dtoa_r+0x968>
 800bc68:	2a00      	cmp	r2, #0
 800bc6a:	dd03      	ble.n	800bc74 <_dtoa_r+0xae4>
 800bc6c:	2b39      	cmp	r3, #57	; 0x39
 800bc6e:	d0ee      	beq.n	800bc4e <_dtoa_r+0xabe>
 800bc70:	3301      	adds	r3, #1
 800bc72:	e7c7      	b.n	800bc04 <_dtoa_r+0xa74>
 800bc74:	9a08      	ldr	r2, [sp, #32]
 800bc76:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bc78:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bc7c:	428a      	cmp	r2, r1
 800bc7e:	d02a      	beq.n	800bcd6 <_dtoa_r+0xb46>
 800bc80:	4659      	mov	r1, fp
 800bc82:	2300      	movs	r3, #0
 800bc84:	220a      	movs	r2, #10
 800bc86:	4628      	mov	r0, r5
 800bc88:	f000 f9f4 	bl	800c074 <__multadd>
 800bc8c:	45b0      	cmp	r8, r6
 800bc8e:	4683      	mov	fp, r0
 800bc90:	f04f 0300 	mov.w	r3, #0
 800bc94:	f04f 020a 	mov.w	r2, #10
 800bc98:	4641      	mov	r1, r8
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	d107      	bne.n	800bcae <_dtoa_r+0xb1e>
 800bc9e:	f000 f9e9 	bl	800c074 <__multadd>
 800bca2:	4680      	mov	r8, r0
 800bca4:	4606      	mov	r6, r0
 800bca6:	9b08      	ldr	r3, [sp, #32]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	9308      	str	r3, [sp, #32]
 800bcac:	e775      	b.n	800bb9a <_dtoa_r+0xa0a>
 800bcae:	f000 f9e1 	bl	800c074 <__multadd>
 800bcb2:	4631      	mov	r1, r6
 800bcb4:	4680      	mov	r8, r0
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	220a      	movs	r2, #10
 800bcba:	4628      	mov	r0, r5
 800bcbc:	f000 f9da 	bl	800c074 <__multadd>
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	e7f0      	b.n	800bca6 <_dtoa_r+0xb16>
 800bcc4:	f1b9 0f00 	cmp.w	r9, #0
 800bcc8:	bfcc      	ite	gt
 800bcca:	464f      	movgt	r7, r9
 800bccc:	2701      	movle	r7, #1
 800bcce:	f04f 0800 	mov.w	r8, #0
 800bcd2:	9a03      	ldr	r2, [sp, #12]
 800bcd4:	4417      	add	r7, r2
 800bcd6:	4659      	mov	r1, fp
 800bcd8:	2201      	movs	r2, #1
 800bcda:	4628      	mov	r0, r5
 800bcdc:	9308      	str	r3, [sp, #32]
 800bcde:	f000 fb75 	bl	800c3cc <__lshift>
 800bce2:	4621      	mov	r1, r4
 800bce4:	4683      	mov	fp, r0
 800bce6:	f000 fbe1 	bl	800c4ac <__mcmp>
 800bcea:	2800      	cmp	r0, #0
 800bcec:	dcb2      	bgt.n	800bc54 <_dtoa_r+0xac4>
 800bcee:	d102      	bne.n	800bcf6 <_dtoa_r+0xb66>
 800bcf0:	9b08      	ldr	r3, [sp, #32]
 800bcf2:	07db      	lsls	r3, r3, #31
 800bcf4:	d4ae      	bmi.n	800bc54 <_dtoa_r+0xac4>
 800bcf6:	463b      	mov	r3, r7
 800bcf8:	461f      	mov	r7, r3
 800bcfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcfe:	2a30      	cmp	r2, #48	; 0x30
 800bd00:	d0fa      	beq.n	800bcf8 <_dtoa_r+0xb68>
 800bd02:	e6f9      	b.n	800baf8 <_dtoa_r+0x968>
 800bd04:	9a03      	ldr	r2, [sp, #12]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d1a5      	bne.n	800bc56 <_dtoa_r+0xac6>
 800bd0a:	2331      	movs	r3, #49	; 0x31
 800bd0c:	f10a 0a01 	add.w	sl, sl, #1
 800bd10:	e779      	b.n	800bc06 <_dtoa_r+0xa76>
 800bd12:	4b14      	ldr	r3, [pc, #80]	; (800bd64 <_dtoa_r+0xbd4>)
 800bd14:	f7ff baa8 	b.w	800b268 <_dtoa_r+0xd8>
 800bd18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f47f aa81 	bne.w	800b222 <_dtoa_r+0x92>
 800bd20:	4b11      	ldr	r3, [pc, #68]	; (800bd68 <_dtoa_r+0xbd8>)
 800bd22:	f7ff baa1 	b.w	800b268 <_dtoa_r+0xd8>
 800bd26:	f1b9 0f00 	cmp.w	r9, #0
 800bd2a:	dc03      	bgt.n	800bd34 <_dtoa_r+0xba4>
 800bd2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd2e:	2b02      	cmp	r3, #2
 800bd30:	f73f aecb 	bgt.w	800baca <_dtoa_r+0x93a>
 800bd34:	9f03      	ldr	r7, [sp, #12]
 800bd36:	4621      	mov	r1, r4
 800bd38:	4658      	mov	r0, fp
 800bd3a:	f7ff f99d 	bl	800b078 <quorem>
 800bd3e:	9a03      	ldr	r2, [sp, #12]
 800bd40:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bd44:	f807 3b01 	strb.w	r3, [r7], #1
 800bd48:	1aba      	subs	r2, r7, r2
 800bd4a:	4591      	cmp	r9, r2
 800bd4c:	ddba      	ble.n	800bcc4 <_dtoa_r+0xb34>
 800bd4e:	4659      	mov	r1, fp
 800bd50:	2300      	movs	r3, #0
 800bd52:	220a      	movs	r2, #10
 800bd54:	4628      	mov	r0, r5
 800bd56:	f000 f98d 	bl	800c074 <__multadd>
 800bd5a:	4683      	mov	fp, r0
 800bd5c:	e7eb      	b.n	800bd36 <_dtoa_r+0xba6>
 800bd5e:	bf00      	nop
 800bd60:	0800d753 	.word	0x0800d753
 800bd64:	0800d6b0 	.word	0x0800d6b0
 800bd68:	0800d6d4 	.word	0x0800d6d4

0800bd6c <std>:
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	b510      	push	{r4, lr}
 800bd70:	4604      	mov	r4, r0
 800bd72:	e9c0 3300 	strd	r3, r3, [r0]
 800bd76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd7a:	6083      	str	r3, [r0, #8]
 800bd7c:	8181      	strh	r1, [r0, #12]
 800bd7e:	6643      	str	r3, [r0, #100]	; 0x64
 800bd80:	81c2      	strh	r2, [r0, #14]
 800bd82:	6183      	str	r3, [r0, #24]
 800bd84:	4619      	mov	r1, r3
 800bd86:	2208      	movs	r2, #8
 800bd88:	305c      	adds	r0, #92	; 0x5c
 800bd8a:	f7fe fcc1 	bl	800a710 <memset>
 800bd8e:	4b05      	ldr	r3, [pc, #20]	; (800bda4 <std+0x38>)
 800bd90:	6224      	str	r4, [r4, #32]
 800bd92:	6263      	str	r3, [r4, #36]	; 0x24
 800bd94:	4b04      	ldr	r3, [pc, #16]	; (800bda8 <std+0x3c>)
 800bd96:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd98:	4b04      	ldr	r3, [pc, #16]	; (800bdac <std+0x40>)
 800bd9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd9c:	4b04      	ldr	r3, [pc, #16]	; (800bdb0 <std+0x44>)
 800bd9e:	6323      	str	r3, [r4, #48]	; 0x30
 800bda0:	bd10      	pop	{r4, pc}
 800bda2:	bf00      	nop
 800bda4:	0800cead 	.word	0x0800cead
 800bda8:	0800cecf 	.word	0x0800cecf
 800bdac:	0800cf07 	.word	0x0800cf07
 800bdb0:	0800cf2b 	.word	0x0800cf2b

0800bdb4 <_cleanup_r>:
 800bdb4:	4901      	ldr	r1, [pc, #4]	; (800bdbc <_cleanup_r+0x8>)
 800bdb6:	f000 b8af 	b.w	800bf18 <_fwalk_reent>
 800bdba:	bf00      	nop
 800bdbc:	0800d239 	.word	0x0800d239

0800bdc0 <__sfmoreglue>:
 800bdc0:	2268      	movs	r2, #104	; 0x68
 800bdc2:	b570      	push	{r4, r5, r6, lr}
 800bdc4:	1e4d      	subs	r5, r1, #1
 800bdc6:	4355      	muls	r5, r2
 800bdc8:	460e      	mov	r6, r1
 800bdca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bdce:	f000 fced 	bl	800c7ac <_malloc_r>
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	b140      	cbz	r0, 800bde8 <__sfmoreglue+0x28>
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	e9c0 1600 	strd	r1, r6, [r0]
 800bddc:	300c      	adds	r0, #12
 800bdde:	60a0      	str	r0, [r4, #8]
 800bde0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bde4:	f7fe fc94 	bl	800a710 <memset>
 800bde8:	4620      	mov	r0, r4
 800bdea:	bd70      	pop	{r4, r5, r6, pc}

0800bdec <__sfp_lock_acquire>:
 800bdec:	4801      	ldr	r0, [pc, #4]	; (800bdf4 <__sfp_lock_acquire+0x8>)
 800bdee:	f000 b8b8 	b.w	800bf62 <__retarget_lock_acquire_recursive>
 800bdf2:	bf00      	nop
 800bdf4:	20001606 	.word	0x20001606

0800bdf8 <__sfp_lock_release>:
 800bdf8:	4801      	ldr	r0, [pc, #4]	; (800be00 <__sfp_lock_release+0x8>)
 800bdfa:	f000 b8b3 	b.w	800bf64 <__retarget_lock_release_recursive>
 800bdfe:	bf00      	nop
 800be00:	20001606 	.word	0x20001606

0800be04 <__sinit_lock_acquire>:
 800be04:	4801      	ldr	r0, [pc, #4]	; (800be0c <__sinit_lock_acquire+0x8>)
 800be06:	f000 b8ac 	b.w	800bf62 <__retarget_lock_acquire_recursive>
 800be0a:	bf00      	nop
 800be0c:	20001607 	.word	0x20001607

0800be10 <__sinit_lock_release>:
 800be10:	4801      	ldr	r0, [pc, #4]	; (800be18 <__sinit_lock_release+0x8>)
 800be12:	f000 b8a7 	b.w	800bf64 <__retarget_lock_release_recursive>
 800be16:	bf00      	nop
 800be18:	20001607 	.word	0x20001607

0800be1c <__sinit>:
 800be1c:	b510      	push	{r4, lr}
 800be1e:	4604      	mov	r4, r0
 800be20:	f7ff fff0 	bl	800be04 <__sinit_lock_acquire>
 800be24:	69a3      	ldr	r3, [r4, #24]
 800be26:	b11b      	cbz	r3, 800be30 <__sinit+0x14>
 800be28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be2c:	f7ff bff0 	b.w	800be10 <__sinit_lock_release>
 800be30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be34:	6523      	str	r3, [r4, #80]	; 0x50
 800be36:	4b13      	ldr	r3, [pc, #76]	; (800be84 <__sinit+0x68>)
 800be38:	4a13      	ldr	r2, [pc, #76]	; (800be88 <__sinit+0x6c>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800be3e:	42a3      	cmp	r3, r4
 800be40:	bf08      	it	eq
 800be42:	2301      	moveq	r3, #1
 800be44:	4620      	mov	r0, r4
 800be46:	bf08      	it	eq
 800be48:	61a3      	streq	r3, [r4, #24]
 800be4a:	f000 f81f 	bl	800be8c <__sfp>
 800be4e:	6060      	str	r0, [r4, #4]
 800be50:	4620      	mov	r0, r4
 800be52:	f000 f81b 	bl	800be8c <__sfp>
 800be56:	60a0      	str	r0, [r4, #8]
 800be58:	4620      	mov	r0, r4
 800be5a:	f000 f817 	bl	800be8c <__sfp>
 800be5e:	2200      	movs	r2, #0
 800be60:	2104      	movs	r1, #4
 800be62:	60e0      	str	r0, [r4, #12]
 800be64:	6860      	ldr	r0, [r4, #4]
 800be66:	f7ff ff81 	bl	800bd6c <std>
 800be6a:	2201      	movs	r2, #1
 800be6c:	2109      	movs	r1, #9
 800be6e:	68a0      	ldr	r0, [r4, #8]
 800be70:	f7ff ff7c 	bl	800bd6c <std>
 800be74:	2202      	movs	r2, #2
 800be76:	2112      	movs	r1, #18
 800be78:	68e0      	ldr	r0, [r4, #12]
 800be7a:	f7ff ff77 	bl	800bd6c <std>
 800be7e:	2301      	movs	r3, #1
 800be80:	61a3      	str	r3, [r4, #24]
 800be82:	e7d1      	b.n	800be28 <__sinit+0xc>
 800be84:	0800d69c 	.word	0x0800d69c
 800be88:	0800bdb5 	.word	0x0800bdb5

0800be8c <__sfp>:
 800be8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be8e:	4607      	mov	r7, r0
 800be90:	f7ff ffac 	bl	800bdec <__sfp_lock_acquire>
 800be94:	4b1e      	ldr	r3, [pc, #120]	; (800bf10 <__sfp+0x84>)
 800be96:	681e      	ldr	r6, [r3, #0]
 800be98:	69b3      	ldr	r3, [r6, #24]
 800be9a:	b913      	cbnz	r3, 800bea2 <__sfp+0x16>
 800be9c:	4630      	mov	r0, r6
 800be9e:	f7ff ffbd 	bl	800be1c <__sinit>
 800bea2:	3648      	adds	r6, #72	; 0x48
 800bea4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bea8:	3b01      	subs	r3, #1
 800beaa:	d503      	bpl.n	800beb4 <__sfp+0x28>
 800beac:	6833      	ldr	r3, [r6, #0]
 800beae:	b30b      	cbz	r3, 800bef4 <__sfp+0x68>
 800beb0:	6836      	ldr	r6, [r6, #0]
 800beb2:	e7f7      	b.n	800bea4 <__sfp+0x18>
 800beb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800beb8:	b9d5      	cbnz	r5, 800bef0 <__sfp+0x64>
 800beba:	4b16      	ldr	r3, [pc, #88]	; (800bf14 <__sfp+0x88>)
 800bebc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bec0:	60e3      	str	r3, [r4, #12]
 800bec2:	6665      	str	r5, [r4, #100]	; 0x64
 800bec4:	f000 f84c 	bl	800bf60 <__retarget_lock_init_recursive>
 800bec8:	f7ff ff96 	bl	800bdf8 <__sfp_lock_release>
 800becc:	2208      	movs	r2, #8
 800bece:	4629      	mov	r1, r5
 800bed0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bed4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bed8:	6025      	str	r5, [r4, #0]
 800beda:	61a5      	str	r5, [r4, #24]
 800bedc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bee0:	f7fe fc16 	bl	800a710 <memset>
 800bee4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bee8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800beec:	4620      	mov	r0, r4
 800beee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bef0:	3468      	adds	r4, #104	; 0x68
 800bef2:	e7d9      	b.n	800bea8 <__sfp+0x1c>
 800bef4:	2104      	movs	r1, #4
 800bef6:	4638      	mov	r0, r7
 800bef8:	f7ff ff62 	bl	800bdc0 <__sfmoreglue>
 800befc:	4604      	mov	r4, r0
 800befe:	6030      	str	r0, [r6, #0]
 800bf00:	2800      	cmp	r0, #0
 800bf02:	d1d5      	bne.n	800beb0 <__sfp+0x24>
 800bf04:	f7ff ff78 	bl	800bdf8 <__sfp_lock_release>
 800bf08:	230c      	movs	r3, #12
 800bf0a:	603b      	str	r3, [r7, #0]
 800bf0c:	e7ee      	b.n	800beec <__sfp+0x60>
 800bf0e:	bf00      	nop
 800bf10:	0800d69c 	.word	0x0800d69c
 800bf14:	ffff0001 	.word	0xffff0001

0800bf18 <_fwalk_reent>:
 800bf18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	4688      	mov	r8, r1
 800bf20:	2700      	movs	r7, #0
 800bf22:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf2a:	f1b9 0901 	subs.w	r9, r9, #1
 800bf2e:	d505      	bpl.n	800bf3c <_fwalk_reent+0x24>
 800bf30:	6824      	ldr	r4, [r4, #0]
 800bf32:	2c00      	cmp	r4, #0
 800bf34:	d1f7      	bne.n	800bf26 <_fwalk_reent+0xe>
 800bf36:	4638      	mov	r0, r7
 800bf38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf3c:	89ab      	ldrh	r3, [r5, #12]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d907      	bls.n	800bf52 <_fwalk_reent+0x3a>
 800bf42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf46:	3301      	adds	r3, #1
 800bf48:	d003      	beq.n	800bf52 <_fwalk_reent+0x3a>
 800bf4a:	4629      	mov	r1, r5
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	47c0      	blx	r8
 800bf50:	4307      	orrs	r7, r0
 800bf52:	3568      	adds	r5, #104	; 0x68
 800bf54:	e7e9      	b.n	800bf2a <_fwalk_reent+0x12>
	...

0800bf58 <_localeconv_r>:
 800bf58:	4800      	ldr	r0, [pc, #0]	; (800bf5c <_localeconv_r+0x4>)
 800bf5a:	4770      	bx	lr
 800bf5c:	200002d4 	.word	0x200002d4

0800bf60 <__retarget_lock_init_recursive>:
 800bf60:	4770      	bx	lr

0800bf62 <__retarget_lock_acquire_recursive>:
 800bf62:	4770      	bx	lr

0800bf64 <__retarget_lock_release_recursive>:
 800bf64:	4770      	bx	lr
	...

0800bf68 <malloc>:
 800bf68:	4b02      	ldr	r3, [pc, #8]	; (800bf74 <malloc+0xc>)
 800bf6a:	4601      	mov	r1, r0
 800bf6c:	6818      	ldr	r0, [r3, #0]
 800bf6e:	f000 bc1d 	b.w	800c7ac <_malloc_r>
 800bf72:	bf00      	nop
 800bf74:	20000180 	.word	0x20000180

0800bf78 <memchr>:
 800bf78:	4603      	mov	r3, r0
 800bf7a:	b510      	push	{r4, lr}
 800bf7c:	b2c9      	uxtb	r1, r1
 800bf7e:	4402      	add	r2, r0
 800bf80:	4293      	cmp	r3, r2
 800bf82:	4618      	mov	r0, r3
 800bf84:	d101      	bne.n	800bf8a <memchr+0x12>
 800bf86:	2000      	movs	r0, #0
 800bf88:	e003      	b.n	800bf92 <memchr+0x1a>
 800bf8a:	7804      	ldrb	r4, [r0, #0]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	428c      	cmp	r4, r1
 800bf90:	d1f6      	bne.n	800bf80 <memchr+0x8>
 800bf92:	bd10      	pop	{r4, pc}

0800bf94 <memcpy>:
 800bf94:	440a      	add	r2, r1
 800bf96:	4291      	cmp	r1, r2
 800bf98:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf9c:	d100      	bne.n	800bfa0 <memcpy+0xc>
 800bf9e:	4770      	bx	lr
 800bfa0:	b510      	push	{r4, lr}
 800bfa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfa6:	4291      	cmp	r1, r2
 800bfa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfac:	d1f9      	bne.n	800bfa2 <memcpy+0xe>
 800bfae:	bd10      	pop	{r4, pc}

0800bfb0 <_Balloc>:
 800bfb0:	b570      	push	{r4, r5, r6, lr}
 800bfb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bfb4:	4604      	mov	r4, r0
 800bfb6:	460d      	mov	r5, r1
 800bfb8:	b976      	cbnz	r6, 800bfd8 <_Balloc+0x28>
 800bfba:	2010      	movs	r0, #16
 800bfbc:	f7ff ffd4 	bl	800bf68 <malloc>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	6260      	str	r0, [r4, #36]	; 0x24
 800bfc4:	b920      	cbnz	r0, 800bfd0 <_Balloc+0x20>
 800bfc6:	2166      	movs	r1, #102	; 0x66
 800bfc8:	4b17      	ldr	r3, [pc, #92]	; (800c028 <_Balloc+0x78>)
 800bfca:	4818      	ldr	r0, [pc, #96]	; (800c02c <_Balloc+0x7c>)
 800bfcc:	f001 f884 	bl	800d0d8 <__assert_func>
 800bfd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfd4:	6006      	str	r6, [r0, #0]
 800bfd6:	60c6      	str	r6, [r0, #12]
 800bfd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bfda:	68f3      	ldr	r3, [r6, #12]
 800bfdc:	b183      	cbz	r3, 800c000 <_Balloc+0x50>
 800bfde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfe0:	68db      	ldr	r3, [r3, #12]
 800bfe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bfe6:	b9b8      	cbnz	r0, 800c018 <_Balloc+0x68>
 800bfe8:	2101      	movs	r1, #1
 800bfea:	fa01 f605 	lsl.w	r6, r1, r5
 800bfee:	1d72      	adds	r2, r6, #5
 800bff0:	4620      	mov	r0, r4
 800bff2:	0092      	lsls	r2, r2, #2
 800bff4:	f000 fb5e 	bl	800c6b4 <_calloc_r>
 800bff8:	b160      	cbz	r0, 800c014 <_Balloc+0x64>
 800bffa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bffe:	e00e      	b.n	800c01e <_Balloc+0x6e>
 800c000:	2221      	movs	r2, #33	; 0x21
 800c002:	2104      	movs	r1, #4
 800c004:	4620      	mov	r0, r4
 800c006:	f000 fb55 	bl	800c6b4 <_calloc_r>
 800c00a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c00c:	60f0      	str	r0, [r6, #12]
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1e4      	bne.n	800bfde <_Balloc+0x2e>
 800c014:	2000      	movs	r0, #0
 800c016:	bd70      	pop	{r4, r5, r6, pc}
 800c018:	6802      	ldr	r2, [r0, #0]
 800c01a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c01e:	2300      	movs	r3, #0
 800c020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c024:	e7f7      	b.n	800c016 <_Balloc+0x66>
 800c026:	bf00      	nop
 800c028:	0800d6e1 	.word	0x0800d6e1
 800c02c:	0800d7c4 	.word	0x0800d7c4

0800c030 <_Bfree>:
 800c030:	b570      	push	{r4, r5, r6, lr}
 800c032:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c034:	4605      	mov	r5, r0
 800c036:	460c      	mov	r4, r1
 800c038:	b976      	cbnz	r6, 800c058 <_Bfree+0x28>
 800c03a:	2010      	movs	r0, #16
 800c03c:	f7ff ff94 	bl	800bf68 <malloc>
 800c040:	4602      	mov	r2, r0
 800c042:	6268      	str	r0, [r5, #36]	; 0x24
 800c044:	b920      	cbnz	r0, 800c050 <_Bfree+0x20>
 800c046:	218a      	movs	r1, #138	; 0x8a
 800c048:	4b08      	ldr	r3, [pc, #32]	; (800c06c <_Bfree+0x3c>)
 800c04a:	4809      	ldr	r0, [pc, #36]	; (800c070 <_Bfree+0x40>)
 800c04c:	f001 f844 	bl	800d0d8 <__assert_func>
 800c050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c054:	6006      	str	r6, [r0, #0]
 800c056:	60c6      	str	r6, [r0, #12]
 800c058:	b13c      	cbz	r4, 800c06a <_Bfree+0x3a>
 800c05a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c05c:	6862      	ldr	r2, [r4, #4]
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c064:	6021      	str	r1, [r4, #0]
 800c066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c06a:	bd70      	pop	{r4, r5, r6, pc}
 800c06c:	0800d6e1 	.word	0x0800d6e1
 800c070:	0800d7c4 	.word	0x0800d7c4

0800c074 <__multadd>:
 800c074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c078:	4607      	mov	r7, r0
 800c07a:	460c      	mov	r4, r1
 800c07c:	461e      	mov	r6, r3
 800c07e:	2000      	movs	r0, #0
 800c080:	690d      	ldr	r5, [r1, #16]
 800c082:	f101 0c14 	add.w	ip, r1, #20
 800c086:	f8dc 3000 	ldr.w	r3, [ip]
 800c08a:	3001      	adds	r0, #1
 800c08c:	b299      	uxth	r1, r3
 800c08e:	fb02 6101 	mla	r1, r2, r1, r6
 800c092:	0c1e      	lsrs	r6, r3, #16
 800c094:	0c0b      	lsrs	r3, r1, #16
 800c096:	fb02 3306 	mla	r3, r2, r6, r3
 800c09a:	b289      	uxth	r1, r1
 800c09c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c0a0:	4285      	cmp	r5, r0
 800c0a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c0a6:	f84c 1b04 	str.w	r1, [ip], #4
 800c0aa:	dcec      	bgt.n	800c086 <__multadd+0x12>
 800c0ac:	b30e      	cbz	r6, 800c0f2 <__multadd+0x7e>
 800c0ae:	68a3      	ldr	r3, [r4, #8]
 800c0b0:	42ab      	cmp	r3, r5
 800c0b2:	dc19      	bgt.n	800c0e8 <__multadd+0x74>
 800c0b4:	6861      	ldr	r1, [r4, #4]
 800c0b6:	4638      	mov	r0, r7
 800c0b8:	3101      	adds	r1, #1
 800c0ba:	f7ff ff79 	bl	800bfb0 <_Balloc>
 800c0be:	4680      	mov	r8, r0
 800c0c0:	b928      	cbnz	r0, 800c0ce <__multadd+0x5a>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	21b5      	movs	r1, #181	; 0xb5
 800c0c6:	4b0c      	ldr	r3, [pc, #48]	; (800c0f8 <__multadd+0x84>)
 800c0c8:	480c      	ldr	r0, [pc, #48]	; (800c0fc <__multadd+0x88>)
 800c0ca:	f001 f805 	bl	800d0d8 <__assert_func>
 800c0ce:	6922      	ldr	r2, [r4, #16]
 800c0d0:	f104 010c 	add.w	r1, r4, #12
 800c0d4:	3202      	adds	r2, #2
 800c0d6:	0092      	lsls	r2, r2, #2
 800c0d8:	300c      	adds	r0, #12
 800c0da:	f7ff ff5b 	bl	800bf94 <memcpy>
 800c0de:	4621      	mov	r1, r4
 800c0e0:	4638      	mov	r0, r7
 800c0e2:	f7ff ffa5 	bl	800c030 <_Bfree>
 800c0e6:	4644      	mov	r4, r8
 800c0e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c0ec:	3501      	adds	r5, #1
 800c0ee:	615e      	str	r6, [r3, #20]
 800c0f0:	6125      	str	r5, [r4, #16]
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f8:	0800d753 	.word	0x0800d753
 800c0fc:	0800d7c4 	.word	0x0800d7c4

0800c100 <__hi0bits>:
 800c100:	0c02      	lsrs	r2, r0, #16
 800c102:	0412      	lsls	r2, r2, #16
 800c104:	4603      	mov	r3, r0
 800c106:	b9ca      	cbnz	r2, 800c13c <__hi0bits+0x3c>
 800c108:	0403      	lsls	r3, r0, #16
 800c10a:	2010      	movs	r0, #16
 800c10c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c110:	bf04      	itt	eq
 800c112:	021b      	lsleq	r3, r3, #8
 800c114:	3008      	addeq	r0, #8
 800c116:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c11a:	bf04      	itt	eq
 800c11c:	011b      	lsleq	r3, r3, #4
 800c11e:	3004      	addeq	r0, #4
 800c120:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c124:	bf04      	itt	eq
 800c126:	009b      	lsleq	r3, r3, #2
 800c128:	3002      	addeq	r0, #2
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	db05      	blt.n	800c13a <__hi0bits+0x3a>
 800c12e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c132:	f100 0001 	add.w	r0, r0, #1
 800c136:	bf08      	it	eq
 800c138:	2020      	moveq	r0, #32
 800c13a:	4770      	bx	lr
 800c13c:	2000      	movs	r0, #0
 800c13e:	e7e5      	b.n	800c10c <__hi0bits+0xc>

0800c140 <__lo0bits>:
 800c140:	6803      	ldr	r3, [r0, #0]
 800c142:	4602      	mov	r2, r0
 800c144:	f013 0007 	ands.w	r0, r3, #7
 800c148:	d00b      	beq.n	800c162 <__lo0bits+0x22>
 800c14a:	07d9      	lsls	r1, r3, #31
 800c14c:	d421      	bmi.n	800c192 <__lo0bits+0x52>
 800c14e:	0798      	lsls	r0, r3, #30
 800c150:	bf49      	itett	mi
 800c152:	085b      	lsrmi	r3, r3, #1
 800c154:	089b      	lsrpl	r3, r3, #2
 800c156:	2001      	movmi	r0, #1
 800c158:	6013      	strmi	r3, [r2, #0]
 800c15a:	bf5c      	itt	pl
 800c15c:	2002      	movpl	r0, #2
 800c15e:	6013      	strpl	r3, [r2, #0]
 800c160:	4770      	bx	lr
 800c162:	b299      	uxth	r1, r3
 800c164:	b909      	cbnz	r1, 800c16a <__lo0bits+0x2a>
 800c166:	2010      	movs	r0, #16
 800c168:	0c1b      	lsrs	r3, r3, #16
 800c16a:	b2d9      	uxtb	r1, r3
 800c16c:	b909      	cbnz	r1, 800c172 <__lo0bits+0x32>
 800c16e:	3008      	adds	r0, #8
 800c170:	0a1b      	lsrs	r3, r3, #8
 800c172:	0719      	lsls	r1, r3, #28
 800c174:	bf04      	itt	eq
 800c176:	091b      	lsreq	r3, r3, #4
 800c178:	3004      	addeq	r0, #4
 800c17a:	0799      	lsls	r1, r3, #30
 800c17c:	bf04      	itt	eq
 800c17e:	089b      	lsreq	r3, r3, #2
 800c180:	3002      	addeq	r0, #2
 800c182:	07d9      	lsls	r1, r3, #31
 800c184:	d403      	bmi.n	800c18e <__lo0bits+0x4e>
 800c186:	085b      	lsrs	r3, r3, #1
 800c188:	f100 0001 	add.w	r0, r0, #1
 800c18c:	d003      	beq.n	800c196 <__lo0bits+0x56>
 800c18e:	6013      	str	r3, [r2, #0]
 800c190:	4770      	bx	lr
 800c192:	2000      	movs	r0, #0
 800c194:	4770      	bx	lr
 800c196:	2020      	movs	r0, #32
 800c198:	4770      	bx	lr
	...

0800c19c <__i2b>:
 800c19c:	b510      	push	{r4, lr}
 800c19e:	460c      	mov	r4, r1
 800c1a0:	2101      	movs	r1, #1
 800c1a2:	f7ff ff05 	bl	800bfb0 <_Balloc>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	b928      	cbnz	r0, 800c1b6 <__i2b+0x1a>
 800c1aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c1ae:	4b04      	ldr	r3, [pc, #16]	; (800c1c0 <__i2b+0x24>)
 800c1b0:	4804      	ldr	r0, [pc, #16]	; (800c1c4 <__i2b+0x28>)
 800c1b2:	f000 ff91 	bl	800d0d8 <__assert_func>
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	6144      	str	r4, [r0, #20]
 800c1ba:	6103      	str	r3, [r0, #16]
 800c1bc:	bd10      	pop	{r4, pc}
 800c1be:	bf00      	nop
 800c1c0:	0800d753 	.word	0x0800d753
 800c1c4:	0800d7c4 	.word	0x0800d7c4

0800c1c8 <__multiply>:
 800c1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1cc:	4691      	mov	r9, r2
 800c1ce:	690a      	ldr	r2, [r1, #16]
 800c1d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1d4:	460c      	mov	r4, r1
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	bfbe      	ittt	lt
 800c1da:	460b      	movlt	r3, r1
 800c1dc:	464c      	movlt	r4, r9
 800c1de:	4699      	movlt	r9, r3
 800c1e0:	6927      	ldr	r7, [r4, #16]
 800c1e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c1e6:	68a3      	ldr	r3, [r4, #8]
 800c1e8:	6861      	ldr	r1, [r4, #4]
 800c1ea:	eb07 060a 	add.w	r6, r7, sl
 800c1ee:	42b3      	cmp	r3, r6
 800c1f0:	b085      	sub	sp, #20
 800c1f2:	bfb8      	it	lt
 800c1f4:	3101      	addlt	r1, #1
 800c1f6:	f7ff fedb 	bl	800bfb0 <_Balloc>
 800c1fa:	b930      	cbnz	r0, 800c20a <__multiply+0x42>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	f240 115d 	movw	r1, #349	; 0x15d
 800c202:	4b43      	ldr	r3, [pc, #268]	; (800c310 <__multiply+0x148>)
 800c204:	4843      	ldr	r0, [pc, #268]	; (800c314 <__multiply+0x14c>)
 800c206:	f000 ff67 	bl	800d0d8 <__assert_func>
 800c20a:	f100 0514 	add.w	r5, r0, #20
 800c20e:	462b      	mov	r3, r5
 800c210:	2200      	movs	r2, #0
 800c212:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c216:	4543      	cmp	r3, r8
 800c218:	d321      	bcc.n	800c25e <__multiply+0x96>
 800c21a:	f104 0314 	add.w	r3, r4, #20
 800c21e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c222:	f109 0314 	add.w	r3, r9, #20
 800c226:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c22a:	9202      	str	r2, [sp, #8]
 800c22c:	1b3a      	subs	r2, r7, r4
 800c22e:	3a15      	subs	r2, #21
 800c230:	f022 0203 	bic.w	r2, r2, #3
 800c234:	3204      	adds	r2, #4
 800c236:	f104 0115 	add.w	r1, r4, #21
 800c23a:	428f      	cmp	r7, r1
 800c23c:	bf38      	it	cc
 800c23e:	2204      	movcc	r2, #4
 800c240:	9201      	str	r2, [sp, #4]
 800c242:	9a02      	ldr	r2, [sp, #8]
 800c244:	9303      	str	r3, [sp, #12]
 800c246:	429a      	cmp	r2, r3
 800c248:	d80c      	bhi.n	800c264 <__multiply+0x9c>
 800c24a:	2e00      	cmp	r6, #0
 800c24c:	dd03      	ble.n	800c256 <__multiply+0x8e>
 800c24e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c252:	2b00      	cmp	r3, #0
 800c254:	d059      	beq.n	800c30a <__multiply+0x142>
 800c256:	6106      	str	r6, [r0, #16]
 800c258:	b005      	add	sp, #20
 800c25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c25e:	f843 2b04 	str.w	r2, [r3], #4
 800c262:	e7d8      	b.n	800c216 <__multiply+0x4e>
 800c264:	f8b3 a000 	ldrh.w	sl, [r3]
 800c268:	f1ba 0f00 	cmp.w	sl, #0
 800c26c:	d023      	beq.n	800c2b6 <__multiply+0xee>
 800c26e:	46a9      	mov	r9, r5
 800c270:	f04f 0c00 	mov.w	ip, #0
 800c274:	f104 0e14 	add.w	lr, r4, #20
 800c278:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c27c:	f8d9 1000 	ldr.w	r1, [r9]
 800c280:	fa1f fb82 	uxth.w	fp, r2
 800c284:	b289      	uxth	r1, r1
 800c286:	fb0a 110b 	mla	r1, sl, fp, r1
 800c28a:	4461      	add	r1, ip
 800c28c:	f8d9 c000 	ldr.w	ip, [r9]
 800c290:	0c12      	lsrs	r2, r2, #16
 800c292:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c296:	fb0a c202 	mla	r2, sl, r2, ip
 800c29a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c29e:	b289      	uxth	r1, r1
 800c2a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c2a4:	4577      	cmp	r7, lr
 800c2a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c2aa:	f849 1b04 	str.w	r1, [r9], #4
 800c2ae:	d8e3      	bhi.n	800c278 <__multiply+0xb0>
 800c2b0:	9a01      	ldr	r2, [sp, #4]
 800c2b2:	f845 c002 	str.w	ip, [r5, r2]
 800c2b6:	9a03      	ldr	r2, [sp, #12]
 800c2b8:	3304      	adds	r3, #4
 800c2ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c2be:	f1b9 0f00 	cmp.w	r9, #0
 800c2c2:	d020      	beq.n	800c306 <__multiply+0x13e>
 800c2c4:	46ae      	mov	lr, r5
 800c2c6:	f04f 0a00 	mov.w	sl, #0
 800c2ca:	6829      	ldr	r1, [r5, #0]
 800c2cc:	f104 0c14 	add.w	ip, r4, #20
 800c2d0:	f8bc b000 	ldrh.w	fp, [ip]
 800c2d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c2d8:	b289      	uxth	r1, r1
 800c2da:	fb09 220b 	mla	r2, r9, fp, r2
 800c2de:	4492      	add	sl, r2
 800c2e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c2e4:	f84e 1b04 	str.w	r1, [lr], #4
 800c2e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c2ec:	f8be 1000 	ldrh.w	r1, [lr]
 800c2f0:	0c12      	lsrs	r2, r2, #16
 800c2f2:	fb09 1102 	mla	r1, r9, r2, r1
 800c2f6:	4567      	cmp	r7, ip
 800c2f8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c2fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c300:	d8e6      	bhi.n	800c2d0 <__multiply+0x108>
 800c302:	9a01      	ldr	r2, [sp, #4]
 800c304:	50a9      	str	r1, [r5, r2]
 800c306:	3504      	adds	r5, #4
 800c308:	e79b      	b.n	800c242 <__multiply+0x7a>
 800c30a:	3e01      	subs	r6, #1
 800c30c:	e79d      	b.n	800c24a <__multiply+0x82>
 800c30e:	bf00      	nop
 800c310:	0800d753 	.word	0x0800d753
 800c314:	0800d7c4 	.word	0x0800d7c4

0800c318 <__pow5mult>:
 800c318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c31c:	4615      	mov	r5, r2
 800c31e:	f012 0203 	ands.w	r2, r2, #3
 800c322:	4606      	mov	r6, r0
 800c324:	460f      	mov	r7, r1
 800c326:	d007      	beq.n	800c338 <__pow5mult+0x20>
 800c328:	4c25      	ldr	r4, [pc, #148]	; (800c3c0 <__pow5mult+0xa8>)
 800c32a:	3a01      	subs	r2, #1
 800c32c:	2300      	movs	r3, #0
 800c32e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c332:	f7ff fe9f 	bl	800c074 <__multadd>
 800c336:	4607      	mov	r7, r0
 800c338:	10ad      	asrs	r5, r5, #2
 800c33a:	d03d      	beq.n	800c3b8 <__pow5mult+0xa0>
 800c33c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c33e:	b97c      	cbnz	r4, 800c360 <__pow5mult+0x48>
 800c340:	2010      	movs	r0, #16
 800c342:	f7ff fe11 	bl	800bf68 <malloc>
 800c346:	4602      	mov	r2, r0
 800c348:	6270      	str	r0, [r6, #36]	; 0x24
 800c34a:	b928      	cbnz	r0, 800c358 <__pow5mult+0x40>
 800c34c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c350:	4b1c      	ldr	r3, [pc, #112]	; (800c3c4 <__pow5mult+0xac>)
 800c352:	481d      	ldr	r0, [pc, #116]	; (800c3c8 <__pow5mult+0xb0>)
 800c354:	f000 fec0 	bl	800d0d8 <__assert_func>
 800c358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c35c:	6004      	str	r4, [r0, #0]
 800c35e:	60c4      	str	r4, [r0, #12]
 800c360:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c368:	b94c      	cbnz	r4, 800c37e <__pow5mult+0x66>
 800c36a:	f240 2171 	movw	r1, #625	; 0x271
 800c36e:	4630      	mov	r0, r6
 800c370:	f7ff ff14 	bl	800c19c <__i2b>
 800c374:	2300      	movs	r3, #0
 800c376:	4604      	mov	r4, r0
 800c378:	f8c8 0008 	str.w	r0, [r8, #8]
 800c37c:	6003      	str	r3, [r0, #0]
 800c37e:	f04f 0900 	mov.w	r9, #0
 800c382:	07eb      	lsls	r3, r5, #31
 800c384:	d50a      	bpl.n	800c39c <__pow5mult+0x84>
 800c386:	4639      	mov	r1, r7
 800c388:	4622      	mov	r2, r4
 800c38a:	4630      	mov	r0, r6
 800c38c:	f7ff ff1c 	bl	800c1c8 <__multiply>
 800c390:	4680      	mov	r8, r0
 800c392:	4639      	mov	r1, r7
 800c394:	4630      	mov	r0, r6
 800c396:	f7ff fe4b 	bl	800c030 <_Bfree>
 800c39a:	4647      	mov	r7, r8
 800c39c:	106d      	asrs	r5, r5, #1
 800c39e:	d00b      	beq.n	800c3b8 <__pow5mult+0xa0>
 800c3a0:	6820      	ldr	r0, [r4, #0]
 800c3a2:	b938      	cbnz	r0, 800c3b4 <__pow5mult+0x9c>
 800c3a4:	4622      	mov	r2, r4
 800c3a6:	4621      	mov	r1, r4
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	f7ff ff0d 	bl	800c1c8 <__multiply>
 800c3ae:	6020      	str	r0, [r4, #0]
 800c3b0:	f8c0 9000 	str.w	r9, [r0]
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	e7e4      	b.n	800c382 <__pow5mult+0x6a>
 800c3b8:	4638      	mov	r0, r7
 800c3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3be:	bf00      	nop
 800c3c0:	0800d910 	.word	0x0800d910
 800c3c4:	0800d6e1 	.word	0x0800d6e1
 800c3c8:	0800d7c4 	.word	0x0800d7c4

0800c3cc <__lshift>:
 800c3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3d0:	460c      	mov	r4, r1
 800c3d2:	4607      	mov	r7, r0
 800c3d4:	4691      	mov	r9, r2
 800c3d6:	6923      	ldr	r3, [r4, #16]
 800c3d8:	6849      	ldr	r1, [r1, #4]
 800c3da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3de:	68a3      	ldr	r3, [r4, #8]
 800c3e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3e4:	f108 0601 	add.w	r6, r8, #1
 800c3e8:	42b3      	cmp	r3, r6
 800c3ea:	db0b      	blt.n	800c404 <__lshift+0x38>
 800c3ec:	4638      	mov	r0, r7
 800c3ee:	f7ff fddf 	bl	800bfb0 <_Balloc>
 800c3f2:	4605      	mov	r5, r0
 800c3f4:	b948      	cbnz	r0, 800c40a <__lshift+0x3e>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c3fc:	4b29      	ldr	r3, [pc, #164]	; (800c4a4 <__lshift+0xd8>)
 800c3fe:	482a      	ldr	r0, [pc, #168]	; (800c4a8 <__lshift+0xdc>)
 800c400:	f000 fe6a 	bl	800d0d8 <__assert_func>
 800c404:	3101      	adds	r1, #1
 800c406:	005b      	lsls	r3, r3, #1
 800c408:	e7ee      	b.n	800c3e8 <__lshift+0x1c>
 800c40a:	2300      	movs	r3, #0
 800c40c:	f100 0114 	add.w	r1, r0, #20
 800c410:	f100 0210 	add.w	r2, r0, #16
 800c414:	4618      	mov	r0, r3
 800c416:	4553      	cmp	r3, sl
 800c418:	db37      	blt.n	800c48a <__lshift+0xbe>
 800c41a:	6920      	ldr	r0, [r4, #16]
 800c41c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c420:	f104 0314 	add.w	r3, r4, #20
 800c424:	f019 091f 	ands.w	r9, r9, #31
 800c428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c42c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c430:	d02f      	beq.n	800c492 <__lshift+0xc6>
 800c432:	468a      	mov	sl, r1
 800c434:	f04f 0c00 	mov.w	ip, #0
 800c438:	f1c9 0e20 	rsb	lr, r9, #32
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	fa02 f209 	lsl.w	r2, r2, r9
 800c442:	ea42 020c 	orr.w	r2, r2, ip
 800c446:	f84a 2b04 	str.w	r2, [sl], #4
 800c44a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c44e:	4298      	cmp	r0, r3
 800c450:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c454:	d8f2      	bhi.n	800c43c <__lshift+0x70>
 800c456:	1b03      	subs	r3, r0, r4
 800c458:	3b15      	subs	r3, #21
 800c45a:	f023 0303 	bic.w	r3, r3, #3
 800c45e:	3304      	adds	r3, #4
 800c460:	f104 0215 	add.w	r2, r4, #21
 800c464:	4290      	cmp	r0, r2
 800c466:	bf38      	it	cc
 800c468:	2304      	movcc	r3, #4
 800c46a:	f841 c003 	str.w	ip, [r1, r3]
 800c46e:	f1bc 0f00 	cmp.w	ip, #0
 800c472:	d001      	beq.n	800c478 <__lshift+0xac>
 800c474:	f108 0602 	add.w	r6, r8, #2
 800c478:	3e01      	subs	r6, #1
 800c47a:	4638      	mov	r0, r7
 800c47c:	4621      	mov	r1, r4
 800c47e:	612e      	str	r6, [r5, #16]
 800c480:	f7ff fdd6 	bl	800c030 <_Bfree>
 800c484:	4628      	mov	r0, r5
 800c486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c48a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c48e:	3301      	adds	r3, #1
 800c490:	e7c1      	b.n	800c416 <__lshift+0x4a>
 800c492:	3904      	subs	r1, #4
 800c494:	f853 2b04 	ldr.w	r2, [r3], #4
 800c498:	4298      	cmp	r0, r3
 800c49a:	f841 2f04 	str.w	r2, [r1, #4]!
 800c49e:	d8f9      	bhi.n	800c494 <__lshift+0xc8>
 800c4a0:	e7ea      	b.n	800c478 <__lshift+0xac>
 800c4a2:	bf00      	nop
 800c4a4:	0800d753 	.word	0x0800d753
 800c4a8:	0800d7c4 	.word	0x0800d7c4

0800c4ac <__mcmp>:
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	690a      	ldr	r2, [r1, #16]
 800c4b0:	6900      	ldr	r0, [r0, #16]
 800c4b2:	b530      	push	{r4, r5, lr}
 800c4b4:	1a80      	subs	r0, r0, r2
 800c4b6:	d10d      	bne.n	800c4d4 <__mcmp+0x28>
 800c4b8:	3314      	adds	r3, #20
 800c4ba:	3114      	adds	r1, #20
 800c4bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c4c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c4c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c4c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c4cc:	4295      	cmp	r5, r2
 800c4ce:	d002      	beq.n	800c4d6 <__mcmp+0x2a>
 800c4d0:	d304      	bcc.n	800c4dc <__mcmp+0x30>
 800c4d2:	2001      	movs	r0, #1
 800c4d4:	bd30      	pop	{r4, r5, pc}
 800c4d6:	42a3      	cmp	r3, r4
 800c4d8:	d3f4      	bcc.n	800c4c4 <__mcmp+0x18>
 800c4da:	e7fb      	b.n	800c4d4 <__mcmp+0x28>
 800c4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e0:	e7f8      	b.n	800c4d4 <__mcmp+0x28>
	...

0800c4e4 <__mdiff>:
 800c4e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e8:	460d      	mov	r5, r1
 800c4ea:	4607      	mov	r7, r0
 800c4ec:	4611      	mov	r1, r2
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	4614      	mov	r4, r2
 800c4f2:	f7ff ffdb 	bl	800c4ac <__mcmp>
 800c4f6:	1e06      	subs	r6, r0, #0
 800c4f8:	d111      	bne.n	800c51e <__mdiff+0x3a>
 800c4fa:	4631      	mov	r1, r6
 800c4fc:	4638      	mov	r0, r7
 800c4fe:	f7ff fd57 	bl	800bfb0 <_Balloc>
 800c502:	4602      	mov	r2, r0
 800c504:	b928      	cbnz	r0, 800c512 <__mdiff+0x2e>
 800c506:	f240 2132 	movw	r1, #562	; 0x232
 800c50a:	4b3a      	ldr	r3, [pc, #232]	; (800c5f4 <__mdiff+0x110>)
 800c50c:	483a      	ldr	r0, [pc, #232]	; (800c5f8 <__mdiff+0x114>)
 800c50e:	f000 fde3 	bl	800d0d8 <__assert_func>
 800c512:	2301      	movs	r3, #1
 800c514:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c518:	4610      	mov	r0, r2
 800c51a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c51e:	bfa4      	itt	ge
 800c520:	4623      	movge	r3, r4
 800c522:	462c      	movge	r4, r5
 800c524:	4638      	mov	r0, r7
 800c526:	6861      	ldr	r1, [r4, #4]
 800c528:	bfa6      	itte	ge
 800c52a:	461d      	movge	r5, r3
 800c52c:	2600      	movge	r6, #0
 800c52e:	2601      	movlt	r6, #1
 800c530:	f7ff fd3e 	bl	800bfb0 <_Balloc>
 800c534:	4602      	mov	r2, r0
 800c536:	b918      	cbnz	r0, 800c540 <__mdiff+0x5c>
 800c538:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c53c:	4b2d      	ldr	r3, [pc, #180]	; (800c5f4 <__mdiff+0x110>)
 800c53e:	e7e5      	b.n	800c50c <__mdiff+0x28>
 800c540:	f102 0814 	add.w	r8, r2, #20
 800c544:	46c2      	mov	sl, r8
 800c546:	f04f 0c00 	mov.w	ip, #0
 800c54a:	6927      	ldr	r7, [r4, #16]
 800c54c:	60c6      	str	r6, [r0, #12]
 800c54e:	692e      	ldr	r6, [r5, #16]
 800c550:	f104 0014 	add.w	r0, r4, #20
 800c554:	f105 0914 	add.w	r9, r5, #20
 800c558:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c55c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c560:	3410      	adds	r4, #16
 800c562:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c566:	f859 3b04 	ldr.w	r3, [r9], #4
 800c56a:	fa1f f18b 	uxth.w	r1, fp
 800c56e:	448c      	add	ip, r1
 800c570:	b299      	uxth	r1, r3
 800c572:	0c1b      	lsrs	r3, r3, #16
 800c574:	ebac 0101 	sub.w	r1, ip, r1
 800c578:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c57c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c580:	b289      	uxth	r1, r1
 800c582:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c586:	454e      	cmp	r6, r9
 800c588:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c58c:	f84a 3b04 	str.w	r3, [sl], #4
 800c590:	d8e7      	bhi.n	800c562 <__mdiff+0x7e>
 800c592:	1b73      	subs	r3, r6, r5
 800c594:	3b15      	subs	r3, #21
 800c596:	f023 0303 	bic.w	r3, r3, #3
 800c59a:	3515      	adds	r5, #21
 800c59c:	3304      	adds	r3, #4
 800c59e:	42ae      	cmp	r6, r5
 800c5a0:	bf38      	it	cc
 800c5a2:	2304      	movcc	r3, #4
 800c5a4:	4418      	add	r0, r3
 800c5a6:	4443      	add	r3, r8
 800c5a8:	461e      	mov	r6, r3
 800c5aa:	4605      	mov	r5, r0
 800c5ac:	4575      	cmp	r5, lr
 800c5ae:	d30e      	bcc.n	800c5ce <__mdiff+0xea>
 800c5b0:	f10e 0103 	add.w	r1, lr, #3
 800c5b4:	1a09      	subs	r1, r1, r0
 800c5b6:	f021 0103 	bic.w	r1, r1, #3
 800c5ba:	3803      	subs	r0, #3
 800c5bc:	4586      	cmp	lr, r0
 800c5be:	bf38      	it	cc
 800c5c0:	2100      	movcc	r1, #0
 800c5c2:	4419      	add	r1, r3
 800c5c4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c5c8:	b18b      	cbz	r3, 800c5ee <__mdiff+0x10a>
 800c5ca:	6117      	str	r7, [r2, #16]
 800c5cc:	e7a4      	b.n	800c518 <__mdiff+0x34>
 800c5ce:	f855 8b04 	ldr.w	r8, [r5], #4
 800c5d2:	fa1f f188 	uxth.w	r1, r8
 800c5d6:	4461      	add	r1, ip
 800c5d8:	140c      	asrs	r4, r1, #16
 800c5da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c5de:	b289      	uxth	r1, r1
 800c5e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c5e4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c5e8:	f846 1b04 	str.w	r1, [r6], #4
 800c5ec:	e7de      	b.n	800c5ac <__mdiff+0xc8>
 800c5ee:	3f01      	subs	r7, #1
 800c5f0:	e7e8      	b.n	800c5c4 <__mdiff+0xe0>
 800c5f2:	bf00      	nop
 800c5f4:	0800d753 	.word	0x0800d753
 800c5f8:	0800d7c4 	.word	0x0800d7c4

0800c5fc <__d2b>:
 800c5fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c600:	2101      	movs	r1, #1
 800c602:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c606:	4690      	mov	r8, r2
 800c608:	461d      	mov	r5, r3
 800c60a:	f7ff fcd1 	bl	800bfb0 <_Balloc>
 800c60e:	4604      	mov	r4, r0
 800c610:	b930      	cbnz	r0, 800c620 <__d2b+0x24>
 800c612:	4602      	mov	r2, r0
 800c614:	f240 310a 	movw	r1, #778	; 0x30a
 800c618:	4b24      	ldr	r3, [pc, #144]	; (800c6ac <__d2b+0xb0>)
 800c61a:	4825      	ldr	r0, [pc, #148]	; (800c6b0 <__d2b+0xb4>)
 800c61c:	f000 fd5c 	bl	800d0d8 <__assert_func>
 800c620:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c624:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c628:	bb2d      	cbnz	r5, 800c676 <__d2b+0x7a>
 800c62a:	9301      	str	r3, [sp, #4]
 800c62c:	f1b8 0300 	subs.w	r3, r8, #0
 800c630:	d026      	beq.n	800c680 <__d2b+0x84>
 800c632:	4668      	mov	r0, sp
 800c634:	9300      	str	r3, [sp, #0]
 800c636:	f7ff fd83 	bl	800c140 <__lo0bits>
 800c63a:	9900      	ldr	r1, [sp, #0]
 800c63c:	b1f0      	cbz	r0, 800c67c <__d2b+0x80>
 800c63e:	9a01      	ldr	r2, [sp, #4]
 800c640:	f1c0 0320 	rsb	r3, r0, #32
 800c644:	fa02 f303 	lsl.w	r3, r2, r3
 800c648:	430b      	orrs	r3, r1
 800c64a:	40c2      	lsrs	r2, r0
 800c64c:	6163      	str	r3, [r4, #20]
 800c64e:	9201      	str	r2, [sp, #4]
 800c650:	9b01      	ldr	r3, [sp, #4]
 800c652:	2b00      	cmp	r3, #0
 800c654:	bf14      	ite	ne
 800c656:	2102      	movne	r1, #2
 800c658:	2101      	moveq	r1, #1
 800c65a:	61a3      	str	r3, [r4, #24]
 800c65c:	6121      	str	r1, [r4, #16]
 800c65e:	b1c5      	cbz	r5, 800c692 <__d2b+0x96>
 800c660:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c664:	4405      	add	r5, r0
 800c666:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c66a:	603d      	str	r5, [r7, #0]
 800c66c:	6030      	str	r0, [r6, #0]
 800c66e:	4620      	mov	r0, r4
 800c670:	b002      	add	sp, #8
 800c672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c67a:	e7d6      	b.n	800c62a <__d2b+0x2e>
 800c67c:	6161      	str	r1, [r4, #20]
 800c67e:	e7e7      	b.n	800c650 <__d2b+0x54>
 800c680:	a801      	add	r0, sp, #4
 800c682:	f7ff fd5d 	bl	800c140 <__lo0bits>
 800c686:	2101      	movs	r1, #1
 800c688:	9b01      	ldr	r3, [sp, #4]
 800c68a:	6121      	str	r1, [r4, #16]
 800c68c:	6163      	str	r3, [r4, #20]
 800c68e:	3020      	adds	r0, #32
 800c690:	e7e5      	b.n	800c65e <__d2b+0x62>
 800c692:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c696:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c69a:	6038      	str	r0, [r7, #0]
 800c69c:	6918      	ldr	r0, [r3, #16]
 800c69e:	f7ff fd2f 	bl	800c100 <__hi0bits>
 800c6a2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c6a6:	6031      	str	r1, [r6, #0]
 800c6a8:	e7e1      	b.n	800c66e <__d2b+0x72>
 800c6aa:	bf00      	nop
 800c6ac:	0800d753 	.word	0x0800d753
 800c6b0:	0800d7c4 	.word	0x0800d7c4

0800c6b4 <_calloc_r>:
 800c6b4:	b570      	push	{r4, r5, r6, lr}
 800c6b6:	fba1 5402 	umull	r5, r4, r1, r2
 800c6ba:	b934      	cbnz	r4, 800c6ca <_calloc_r+0x16>
 800c6bc:	4629      	mov	r1, r5
 800c6be:	f000 f875 	bl	800c7ac <_malloc_r>
 800c6c2:	4606      	mov	r6, r0
 800c6c4:	b928      	cbnz	r0, 800c6d2 <_calloc_r+0x1e>
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	bd70      	pop	{r4, r5, r6, pc}
 800c6ca:	220c      	movs	r2, #12
 800c6cc:	2600      	movs	r6, #0
 800c6ce:	6002      	str	r2, [r0, #0]
 800c6d0:	e7f9      	b.n	800c6c6 <_calloc_r+0x12>
 800c6d2:	462a      	mov	r2, r5
 800c6d4:	4621      	mov	r1, r4
 800c6d6:	f7fe f81b 	bl	800a710 <memset>
 800c6da:	e7f4      	b.n	800c6c6 <_calloc_r+0x12>

0800c6dc <_free_r>:
 800c6dc:	b538      	push	{r3, r4, r5, lr}
 800c6de:	4605      	mov	r5, r0
 800c6e0:	2900      	cmp	r1, #0
 800c6e2:	d040      	beq.n	800c766 <_free_r+0x8a>
 800c6e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6e8:	1f0c      	subs	r4, r1, #4
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	bfb8      	it	lt
 800c6ee:	18e4      	addlt	r4, r4, r3
 800c6f0:	f000 fe94 	bl	800d41c <__malloc_lock>
 800c6f4:	4a1c      	ldr	r2, [pc, #112]	; (800c768 <_free_r+0x8c>)
 800c6f6:	6813      	ldr	r3, [r2, #0]
 800c6f8:	b933      	cbnz	r3, 800c708 <_free_r+0x2c>
 800c6fa:	6063      	str	r3, [r4, #4]
 800c6fc:	6014      	str	r4, [r2, #0]
 800c6fe:	4628      	mov	r0, r5
 800c700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c704:	f000 be90 	b.w	800d428 <__malloc_unlock>
 800c708:	42a3      	cmp	r3, r4
 800c70a:	d908      	bls.n	800c71e <_free_r+0x42>
 800c70c:	6820      	ldr	r0, [r4, #0]
 800c70e:	1821      	adds	r1, r4, r0
 800c710:	428b      	cmp	r3, r1
 800c712:	bf01      	itttt	eq
 800c714:	6819      	ldreq	r1, [r3, #0]
 800c716:	685b      	ldreq	r3, [r3, #4]
 800c718:	1809      	addeq	r1, r1, r0
 800c71a:	6021      	streq	r1, [r4, #0]
 800c71c:	e7ed      	b.n	800c6fa <_free_r+0x1e>
 800c71e:	461a      	mov	r2, r3
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	b10b      	cbz	r3, 800c728 <_free_r+0x4c>
 800c724:	42a3      	cmp	r3, r4
 800c726:	d9fa      	bls.n	800c71e <_free_r+0x42>
 800c728:	6811      	ldr	r1, [r2, #0]
 800c72a:	1850      	adds	r0, r2, r1
 800c72c:	42a0      	cmp	r0, r4
 800c72e:	d10b      	bne.n	800c748 <_free_r+0x6c>
 800c730:	6820      	ldr	r0, [r4, #0]
 800c732:	4401      	add	r1, r0
 800c734:	1850      	adds	r0, r2, r1
 800c736:	4283      	cmp	r3, r0
 800c738:	6011      	str	r1, [r2, #0]
 800c73a:	d1e0      	bne.n	800c6fe <_free_r+0x22>
 800c73c:	6818      	ldr	r0, [r3, #0]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	4401      	add	r1, r0
 800c742:	6011      	str	r1, [r2, #0]
 800c744:	6053      	str	r3, [r2, #4]
 800c746:	e7da      	b.n	800c6fe <_free_r+0x22>
 800c748:	d902      	bls.n	800c750 <_free_r+0x74>
 800c74a:	230c      	movs	r3, #12
 800c74c:	602b      	str	r3, [r5, #0]
 800c74e:	e7d6      	b.n	800c6fe <_free_r+0x22>
 800c750:	6820      	ldr	r0, [r4, #0]
 800c752:	1821      	adds	r1, r4, r0
 800c754:	428b      	cmp	r3, r1
 800c756:	bf01      	itttt	eq
 800c758:	6819      	ldreq	r1, [r3, #0]
 800c75a:	685b      	ldreq	r3, [r3, #4]
 800c75c:	1809      	addeq	r1, r1, r0
 800c75e:	6021      	streq	r1, [r4, #0]
 800c760:	6063      	str	r3, [r4, #4]
 800c762:	6054      	str	r4, [r2, #4]
 800c764:	e7cb      	b.n	800c6fe <_free_r+0x22>
 800c766:	bd38      	pop	{r3, r4, r5, pc}
 800c768:	20001608 	.word	0x20001608

0800c76c <sbrk_aligned>:
 800c76c:	b570      	push	{r4, r5, r6, lr}
 800c76e:	4e0e      	ldr	r6, [pc, #56]	; (800c7a8 <sbrk_aligned+0x3c>)
 800c770:	460c      	mov	r4, r1
 800c772:	6831      	ldr	r1, [r6, #0]
 800c774:	4605      	mov	r5, r0
 800c776:	b911      	cbnz	r1, 800c77e <sbrk_aligned+0x12>
 800c778:	f000 fb88 	bl	800ce8c <_sbrk_r>
 800c77c:	6030      	str	r0, [r6, #0]
 800c77e:	4621      	mov	r1, r4
 800c780:	4628      	mov	r0, r5
 800c782:	f000 fb83 	bl	800ce8c <_sbrk_r>
 800c786:	1c43      	adds	r3, r0, #1
 800c788:	d00a      	beq.n	800c7a0 <sbrk_aligned+0x34>
 800c78a:	1cc4      	adds	r4, r0, #3
 800c78c:	f024 0403 	bic.w	r4, r4, #3
 800c790:	42a0      	cmp	r0, r4
 800c792:	d007      	beq.n	800c7a4 <sbrk_aligned+0x38>
 800c794:	1a21      	subs	r1, r4, r0
 800c796:	4628      	mov	r0, r5
 800c798:	f000 fb78 	bl	800ce8c <_sbrk_r>
 800c79c:	3001      	adds	r0, #1
 800c79e:	d101      	bne.n	800c7a4 <sbrk_aligned+0x38>
 800c7a0:	f04f 34ff 	mov.w	r4, #4294967295
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	bd70      	pop	{r4, r5, r6, pc}
 800c7a8:	2000160c 	.word	0x2000160c

0800c7ac <_malloc_r>:
 800c7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b0:	1ccd      	adds	r5, r1, #3
 800c7b2:	f025 0503 	bic.w	r5, r5, #3
 800c7b6:	3508      	adds	r5, #8
 800c7b8:	2d0c      	cmp	r5, #12
 800c7ba:	bf38      	it	cc
 800c7bc:	250c      	movcc	r5, #12
 800c7be:	2d00      	cmp	r5, #0
 800c7c0:	4607      	mov	r7, r0
 800c7c2:	db01      	blt.n	800c7c8 <_malloc_r+0x1c>
 800c7c4:	42a9      	cmp	r1, r5
 800c7c6:	d905      	bls.n	800c7d4 <_malloc_r+0x28>
 800c7c8:	230c      	movs	r3, #12
 800c7ca:	2600      	movs	r6, #0
 800c7cc:	603b      	str	r3, [r7, #0]
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7d4:	4e2e      	ldr	r6, [pc, #184]	; (800c890 <_malloc_r+0xe4>)
 800c7d6:	f000 fe21 	bl	800d41c <__malloc_lock>
 800c7da:	6833      	ldr	r3, [r6, #0]
 800c7dc:	461c      	mov	r4, r3
 800c7de:	bb34      	cbnz	r4, 800c82e <_malloc_r+0x82>
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	4638      	mov	r0, r7
 800c7e4:	f7ff ffc2 	bl	800c76c <sbrk_aligned>
 800c7e8:	1c43      	adds	r3, r0, #1
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	d14d      	bne.n	800c88a <_malloc_r+0xde>
 800c7ee:	6834      	ldr	r4, [r6, #0]
 800c7f0:	4626      	mov	r6, r4
 800c7f2:	2e00      	cmp	r6, #0
 800c7f4:	d140      	bne.n	800c878 <_malloc_r+0xcc>
 800c7f6:	6823      	ldr	r3, [r4, #0]
 800c7f8:	4631      	mov	r1, r6
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	eb04 0803 	add.w	r8, r4, r3
 800c800:	f000 fb44 	bl	800ce8c <_sbrk_r>
 800c804:	4580      	cmp	r8, r0
 800c806:	d13a      	bne.n	800c87e <_malloc_r+0xd2>
 800c808:	6821      	ldr	r1, [r4, #0]
 800c80a:	3503      	adds	r5, #3
 800c80c:	1a6d      	subs	r5, r5, r1
 800c80e:	f025 0503 	bic.w	r5, r5, #3
 800c812:	3508      	adds	r5, #8
 800c814:	2d0c      	cmp	r5, #12
 800c816:	bf38      	it	cc
 800c818:	250c      	movcc	r5, #12
 800c81a:	4638      	mov	r0, r7
 800c81c:	4629      	mov	r1, r5
 800c81e:	f7ff ffa5 	bl	800c76c <sbrk_aligned>
 800c822:	3001      	adds	r0, #1
 800c824:	d02b      	beq.n	800c87e <_malloc_r+0xd2>
 800c826:	6823      	ldr	r3, [r4, #0]
 800c828:	442b      	add	r3, r5
 800c82a:	6023      	str	r3, [r4, #0]
 800c82c:	e00e      	b.n	800c84c <_malloc_r+0xa0>
 800c82e:	6822      	ldr	r2, [r4, #0]
 800c830:	1b52      	subs	r2, r2, r5
 800c832:	d41e      	bmi.n	800c872 <_malloc_r+0xc6>
 800c834:	2a0b      	cmp	r2, #11
 800c836:	d916      	bls.n	800c866 <_malloc_r+0xba>
 800c838:	1961      	adds	r1, r4, r5
 800c83a:	42a3      	cmp	r3, r4
 800c83c:	6025      	str	r5, [r4, #0]
 800c83e:	bf18      	it	ne
 800c840:	6059      	strne	r1, [r3, #4]
 800c842:	6863      	ldr	r3, [r4, #4]
 800c844:	bf08      	it	eq
 800c846:	6031      	streq	r1, [r6, #0]
 800c848:	5162      	str	r2, [r4, r5]
 800c84a:	604b      	str	r3, [r1, #4]
 800c84c:	4638      	mov	r0, r7
 800c84e:	f104 060b 	add.w	r6, r4, #11
 800c852:	f000 fde9 	bl	800d428 <__malloc_unlock>
 800c856:	f026 0607 	bic.w	r6, r6, #7
 800c85a:	1d23      	adds	r3, r4, #4
 800c85c:	1af2      	subs	r2, r6, r3
 800c85e:	d0b6      	beq.n	800c7ce <_malloc_r+0x22>
 800c860:	1b9b      	subs	r3, r3, r6
 800c862:	50a3      	str	r3, [r4, r2]
 800c864:	e7b3      	b.n	800c7ce <_malloc_r+0x22>
 800c866:	6862      	ldr	r2, [r4, #4]
 800c868:	42a3      	cmp	r3, r4
 800c86a:	bf0c      	ite	eq
 800c86c:	6032      	streq	r2, [r6, #0]
 800c86e:	605a      	strne	r2, [r3, #4]
 800c870:	e7ec      	b.n	800c84c <_malloc_r+0xa0>
 800c872:	4623      	mov	r3, r4
 800c874:	6864      	ldr	r4, [r4, #4]
 800c876:	e7b2      	b.n	800c7de <_malloc_r+0x32>
 800c878:	4634      	mov	r4, r6
 800c87a:	6876      	ldr	r6, [r6, #4]
 800c87c:	e7b9      	b.n	800c7f2 <_malloc_r+0x46>
 800c87e:	230c      	movs	r3, #12
 800c880:	4638      	mov	r0, r7
 800c882:	603b      	str	r3, [r7, #0]
 800c884:	f000 fdd0 	bl	800d428 <__malloc_unlock>
 800c888:	e7a1      	b.n	800c7ce <_malloc_r+0x22>
 800c88a:	6025      	str	r5, [r4, #0]
 800c88c:	e7de      	b.n	800c84c <_malloc_r+0xa0>
 800c88e:	bf00      	nop
 800c890:	20001608 	.word	0x20001608

0800c894 <__ssputs_r>:
 800c894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c898:	688e      	ldr	r6, [r1, #8]
 800c89a:	4682      	mov	sl, r0
 800c89c:	429e      	cmp	r6, r3
 800c89e:	460c      	mov	r4, r1
 800c8a0:	4690      	mov	r8, r2
 800c8a2:	461f      	mov	r7, r3
 800c8a4:	d838      	bhi.n	800c918 <__ssputs_r+0x84>
 800c8a6:	898a      	ldrh	r2, [r1, #12]
 800c8a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c8ac:	d032      	beq.n	800c914 <__ssputs_r+0x80>
 800c8ae:	6825      	ldr	r5, [r4, #0]
 800c8b0:	6909      	ldr	r1, [r1, #16]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	eba5 0901 	sub.w	r9, r5, r1
 800c8b8:	6965      	ldr	r5, [r4, #20]
 800c8ba:	444b      	add	r3, r9
 800c8bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8c4:	106d      	asrs	r5, r5, #1
 800c8c6:	429d      	cmp	r5, r3
 800c8c8:	bf38      	it	cc
 800c8ca:	461d      	movcc	r5, r3
 800c8cc:	0553      	lsls	r3, r2, #21
 800c8ce:	d531      	bpl.n	800c934 <__ssputs_r+0xa0>
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	f7ff ff6b 	bl	800c7ac <_malloc_r>
 800c8d6:	4606      	mov	r6, r0
 800c8d8:	b950      	cbnz	r0, 800c8f0 <__ssputs_r+0x5c>
 800c8da:	230c      	movs	r3, #12
 800c8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e0:	f8ca 3000 	str.w	r3, [sl]
 800c8e4:	89a3      	ldrh	r3, [r4, #12]
 800c8e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8ea:	81a3      	strh	r3, [r4, #12]
 800c8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8f0:	464a      	mov	r2, r9
 800c8f2:	6921      	ldr	r1, [r4, #16]
 800c8f4:	f7ff fb4e 	bl	800bf94 <memcpy>
 800c8f8:	89a3      	ldrh	r3, [r4, #12]
 800c8fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c8fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c902:	81a3      	strh	r3, [r4, #12]
 800c904:	6126      	str	r6, [r4, #16]
 800c906:	444e      	add	r6, r9
 800c908:	6026      	str	r6, [r4, #0]
 800c90a:	463e      	mov	r6, r7
 800c90c:	6165      	str	r5, [r4, #20]
 800c90e:	eba5 0509 	sub.w	r5, r5, r9
 800c912:	60a5      	str	r5, [r4, #8]
 800c914:	42be      	cmp	r6, r7
 800c916:	d900      	bls.n	800c91a <__ssputs_r+0x86>
 800c918:	463e      	mov	r6, r7
 800c91a:	4632      	mov	r2, r6
 800c91c:	4641      	mov	r1, r8
 800c91e:	6820      	ldr	r0, [r4, #0]
 800c920:	f000 fd62 	bl	800d3e8 <memmove>
 800c924:	68a3      	ldr	r3, [r4, #8]
 800c926:	2000      	movs	r0, #0
 800c928:	1b9b      	subs	r3, r3, r6
 800c92a:	60a3      	str	r3, [r4, #8]
 800c92c:	6823      	ldr	r3, [r4, #0]
 800c92e:	4433      	add	r3, r6
 800c930:	6023      	str	r3, [r4, #0]
 800c932:	e7db      	b.n	800c8ec <__ssputs_r+0x58>
 800c934:	462a      	mov	r2, r5
 800c936:	f000 fd7d 	bl	800d434 <_realloc_r>
 800c93a:	4606      	mov	r6, r0
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d1e1      	bne.n	800c904 <__ssputs_r+0x70>
 800c940:	4650      	mov	r0, sl
 800c942:	6921      	ldr	r1, [r4, #16]
 800c944:	f7ff feca 	bl	800c6dc <_free_r>
 800c948:	e7c7      	b.n	800c8da <__ssputs_r+0x46>
	...

0800c94c <_svfiprintf_r>:
 800c94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c950:	4698      	mov	r8, r3
 800c952:	898b      	ldrh	r3, [r1, #12]
 800c954:	4607      	mov	r7, r0
 800c956:	061b      	lsls	r3, r3, #24
 800c958:	460d      	mov	r5, r1
 800c95a:	4614      	mov	r4, r2
 800c95c:	b09d      	sub	sp, #116	; 0x74
 800c95e:	d50e      	bpl.n	800c97e <_svfiprintf_r+0x32>
 800c960:	690b      	ldr	r3, [r1, #16]
 800c962:	b963      	cbnz	r3, 800c97e <_svfiprintf_r+0x32>
 800c964:	2140      	movs	r1, #64	; 0x40
 800c966:	f7ff ff21 	bl	800c7ac <_malloc_r>
 800c96a:	6028      	str	r0, [r5, #0]
 800c96c:	6128      	str	r0, [r5, #16]
 800c96e:	b920      	cbnz	r0, 800c97a <_svfiprintf_r+0x2e>
 800c970:	230c      	movs	r3, #12
 800c972:	603b      	str	r3, [r7, #0]
 800c974:	f04f 30ff 	mov.w	r0, #4294967295
 800c978:	e0d1      	b.n	800cb1e <_svfiprintf_r+0x1d2>
 800c97a:	2340      	movs	r3, #64	; 0x40
 800c97c:	616b      	str	r3, [r5, #20]
 800c97e:	2300      	movs	r3, #0
 800c980:	9309      	str	r3, [sp, #36]	; 0x24
 800c982:	2320      	movs	r3, #32
 800c984:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c988:	2330      	movs	r3, #48	; 0x30
 800c98a:	f04f 0901 	mov.w	r9, #1
 800c98e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c992:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cb38 <_svfiprintf_r+0x1ec>
 800c996:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c99a:	4623      	mov	r3, r4
 800c99c:	469a      	mov	sl, r3
 800c99e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9a2:	b10a      	cbz	r2, 800c9a8 <_svfiprintf_r+0x5c>
 800c9a4:	2a25      	cmp	r2, #37	; 0x25
 800c9a6:	d1f9      	bne.n	800c99c <_svfiprintf_r+0x50>
 800c9a8:	ebba 0b04 	subs.w	fp, sl, r4
 800c9ac:	d00b      	beq.n	800c9c6 <_svfiprintf_r+0x7a>
 800c9ae:	465b      	mov	r3, fp
 800c9b0:	4622      	mov	r2, r4
 800c9b2:	4629      	mov	r1, r5
 800c9b4:	4638      	mov	r0, r7
 800c9b6:	f7ff ff6d 	bl	800c894 <__ssputs_r>
 800c9ba:	3001      	adds	r0, #1
 800c9bc:	f000 80aa 	beq.w	800cb14 <_svfiprintf_r+0x1c8>
 800c9c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9c2:	445a      	add	r2, fp
 800c9c4:	9209      	str	r2, [sp, #36]	; 0x24
 800c9c6:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f000 80a2 	beq.w	800cb14 <_svfiprintf_r+0x1c8>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c9d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9da:	f10a 0a01 	add.w	sl, sl, #1
 800c9de:	9304      	str	r3, [sp, #16]
 800c9e0:	9307      	str	r3, [sp, #28]
 800c9e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9e6:	931a      	str	r3, [sp, #104]	; 0x68
 800c9e8:	4654      	mov	r4, sl
 800c9ea:	2205      	movs	r2, #5
 800c9ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f0:	4851      	ldr	r0, [pc, #324]	; (800cb38 <_svfiprintf_r+0x1ec>)
 800c9f2:	f7ff fac1 	bl	800bf78 <memchr>
 800c9f6:	9a04      	ldr	r2, [sp, #16]
 800c9f8:	b9d8      	cbnz	r0, 800ca32 <_svfiprintf_r+0xe6>
 800c9fa:	06d0      	lsls	r0, r2, #27
 800c9fc:	bf44      	itt	mi
 800c9fe:	2320      	movmi	r3, #32
 800ca00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca04:	0711      	lsls	r1, r2, #28
 800ca06:	bf44      	itt	mi
 800ca08:	232b      	movmi	r3, #43	; 0x2b
 800ca0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ca12:	2b2a      	cmp	r3, #42	; 0x2a
 800ca14:	d015      	beq.n	800ca42 <_svfiprintf_r+0xf6>
 800ca16:	4654      	mov	r4, sl
 800ca18:	2000      	movs	r0, #0
 800ca1a:	f04f 0c0a 	mov.w	ip, #10
 800ca1e:	9a07      	ldr	r2, [sp, #28]
 800ca20:	4621      	mov	r1, r4
 800ca22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca26:	3b30      	subs	r3, #48	; 0x30
 800ca28:	2b09      	cmp	r3, #9
 800ca2a:	d94e      	bls.n	800caca <_svfiprintf_r+0x17e>
 800ca2c:	b1b0      	cbz	r0, 800ca5c <_svfiprintf_r+0x110>
 800ca2e:	9207      	str	r2, [sp, #28]
 800ca30:	e014      	b.n	800ca5c <_svfiprintf_r+0x110>
 800ca32:	eba0 0308 	sub.w	r3, r0, r8
 800ca36:	fa09 f303 	lsl.w	r3, r9, r3
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	46a2      	mov	sl, r4
 800ca3e:	9304      	str	r3, [sp, #16]
 800ca40:	e7d2      	b.n	800c9e8 <_svfiprintf_r+0x9c>
 800ca42:	9b03      	ldr	r3, [sp, #12]
 800ca44:	1d19      	adds	r1, r3, #4
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	9103      	str	r1, [sp, #12]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	bfbb      	ittet	lt
 800ca4e:	425b      	neglt	r3, r3
 800ca50:	f042 0202 	orrlt.w	r2, r2, #2
 800ca54:	9307      	strge	r3, [sp, #28]
 800ca56:	9307      	strlt	r3, [sp, #28]
 800ca58:	bfb8      	it	lt
 800ca5a:	9204      	strlt	r2, [sp, #16]
 800ca5c:	7823      	ldrb	r3, [r4, #0]
 800ca5e:	2b2e      	cmp	r3, #46	; 0x2e
 800ca60:	d10c      	bne.n	800ca7c <_svfiprintf_r+0x130>
 800ca62:	7863      	ldrb	r3, [r4, #1]
 800ca64:	2b2a      	cmp	r3, #42	; 0x2a
 800ca66:	d135      	bne.n	800cad4 <_svfiprintf_r+0x188>
 800ca68:	9b03      	ldr	r3, [sp, #12]
 800ca6a:	3402      	adds	r4, #2
 800ca6c:	1d1a      	adds	r2, r3, #4
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	9203      	str	r2, [sp, #12]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	bfb8      	it	lt
 800ca76:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca7a:	9305      	str	r3, [sp, #20]
 800ca7c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800cb3c <_svfiprintf_r+0x1f0>
 800ca80:	2203      	movs	r2, #3
 800ca82:	4650      	mov	r0, sl
 800ca84:	7821      	ldrb	r1, [r4, #0]
 800ca86:	f7ff fa77 	bl	800bf78 <memchr>
 800ca8a:	b140      	cbz	r0, 800ca9e <_svfiprintf_r+0x152>
 800ca8c:	2340      	movs	r3, #64	; 0x40
 800ca8e:	eba0 000a 	sub.w	r0, r0, sl
 800ca92:	fa03 f000 	lsl.w	r0, r3, r0
 800ca96:	9b04      	ldr	r3, [sp, #16]
 800ca98:	3401      	adds	r4, #1
 800ca9a:	4303      	orrs	r3, r0
 800ca9c:	9304      	str	r3, [sp, #16]
 800ca9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caa2:	2206      	movs	r2, #6
 800caa4:	4826      	ldr	r0, [pc, #152]	; (800cb40 <_svfiprintf_r+0x1f4>)
 800caa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800caaa:	f7ff fa65 	bl	800bf78 <memchr>
 800caae:	2800      	cmp	r0, #0
 800cab0:	d038      	beq.n	800cb24 <_svfiprintf_r+0x1d8>
 800cab2:	4b24      	ldr	r3, [pc, #144]	; (800cb44 <_svfiprintf_r+0x1f8>)
 800cab4:	bb1b      	cbnz	r3, 800cafe <_svfiprintf_r+0x1b2>
 800cab6:	9b03      	ldr	r3, [sp, #12]
 800cab8:	3307      	adds	r3, #7
 800caba:	f023 0307 	bic.w	r3, r3, #7
 800cabe:	3308      	adds	r3, #8
 800cac0:	9303      	str	r3, [sp, #12]
 800cac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cac4:	4433      	add	r3, r6
 800cac6:	9309      	str	r3, [sp, #36]	; 0x24
 800cac8:	e767      	b.n	800c99a <_svfiprintf_r+0x4e>
 800caca:	460c      	mov	r4, r1
 800cacc:	2001      	movs	r0, #1
 800cace:	fb0c 3202 	mla	r2, ip, r2, r3
 800cad2:	e7a5      	b.n	800ca20 <_svfiprintf_r+0xd4>
 800cad4:	2300      	movs	r3, #0
 800cad6:	f04f 0c0a 	mov.w	ip, #10
 800cada:	4619      	mov	r1, r3
 800cadc:	3401      	adds	r4, #1
 800cade:	9305      	str	r3, [sp, #20]
 800cae0:	4620      	mov	r0, r4
 800cae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cae6:	3a30      	subs	r2, #48	; 0x30
 800cae8:	2a09      	cmp	r2, #9
 800caea:	d903      	bls.n	800caf4 <_svfiprintf_r+0x1a8>
 800caec:	2b00      	cmp	r3, #0
 800caee:	d0c5      	beq.n	800ca7c <_svfiprintf_r+0x130>
 800caf0:	9105      	str	r1, [sp, #20]
 800caf2:	e7c3      	b.n	800ca7c <_svfiprintf_r+0x130>
 800caf4:	4604      	mov	r4, r0
 800caf6:	2301      	movs	r3, #1
 800caf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cafc:	e7f0      	b.n	800cae0 <_svfiprintf_r+0x194>
 800cafe:	ab03      	add	r3, sp, #12
 800cb00:	9300      	str	r3, [sp, #0]
 800cb02:	462a      	mov	r2, r5
 800cb04:	4638      	mov	r0, r7
 800cb06:	4b10      	ldr	r3, [pc, #64]	; (800cb48 <_svfiprintf_r+0x1fc>)
 800cb08:	a904      	add	r1, sp, #16
 800cb0a:	f7fd fea7 	bl	800a85c <_printf_float>
 800cb0e:	1c42      	adds	r2, r0, #1
 800cb10:	4606      	mov	r6, r0
 800cb12:	d1d6      	bne.n	800cac2 <_svfiprintf_r+0x176>
 800cb14:	89ab      	ldrh	r3, [r5, #12]
 800cb16:	065b      	lsls	r3, r3, #25
 800cb18:	f53f af2c 	bmi.w	800c974 <_svfiprintf_r+0x28>
 800cb1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb1e:	b01d      	add	sp, #116	; 0x74
 800cb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb24:	ab03      	add	r3, sp, #12
 800cb26:	9300      	str	r3, [sp, #0]
 800cb28:	462a      	mov	r2, r5
 800cb2a:	4638      	mov	r0, r7
 800cb2c:	4b06      	ldr	r3, [pc, #24]	; (800cb48 <_svfiprintf_r+0x1fc>)
 800cb2e:	a904      	add	r1, sp, #16
 800cb30:	f7fe f930 	bl	800ad94 <_printf_i>
 800cb34:	e7eb      	b.n	800cb0e <_svfiprintf_r+0x1c2>
 800cb36:	bf00      	nop
 800cb38:	0800d91c 	.word	0x0800d91c
 800cb3c:	0800d922 	.word	0x0800d922
 800cb40:	0800d926 	.word	0x0800d926
 800cb44:	0800a85d 	.word	0x0800a85d
 800cb48:	0800c895 	.word	0x0800c895

0800cb4c <__sfputc_r>:
 800cb4c:	6893      	ldr	r3, [r2, #8]
 800cb4e:	b410      	push	{r4}
 800cb50:	3b01      	subs	r3, #1
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	6093      	str	r3, [r2, #8]
 800cb56:	da07      	bge.n	800cb68 <__sfputc_r+0x1c>
 800cb58:	6994      	ldr	r4, [r2, #24]
 800cb5a:	42a3      	cmp	r3, r4
 800cb5c:	db01      	blt.n	800cb62 <__sfputc_r+0x16>
 800cb5e:	290a      	cmp	r1, #10
 800cb60:	d102      	bne.n	800cb68 <__sfputc_r+0x1c>
 800cb62:	bc10      	pop	{r4}
 800cb64:	f000 b9e6 	b.w	800cf34 <__swbuf_r>
 800cb68:	6813      	ldr	r3, [r2, #0]
 800cb6a:	1c58      	adds	r0, r3, #1
 800cb6c:	6010      	str	r0, [r2, #0]
 800cb6e:	7019      	strb	r1, [r3, #0]
 800cb70:	4608      	mov	r0, r1
 800cb72:	bc10      	pop	{r4}
 800cb74:	4770      	bx	lr

0800cb76 <__sfputs_r>:
 800cb76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb78:	4606      	mov	r6, r0
 800cb7a:	460f      	mov	r7, r1
 800cb7c:	4614      	mov	r4, r2
 800cb7e:	18d5      	adds	r5, r2, r3
 800cb80:	42ac      	cmp	r4, r5
 800cb82:	d101      	bne.n	800cb88 <__sfputs_r+0x12>
 800cb84:	2000      	movs	r0, #0
 800cb86:	e007      	b.n	800cb98 <__sfputs_r+0x22>
 800cb88:	463a      	mov	r2, r7
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb90:	f7ff ffdc 	bl	800cb4c <__sfputc_r>
 800cb94:	1c43      	adds	r3, r0, #1
 800cb96:	d1f3      	bne.n	800cb80 <__sfputs_r+0xa>
 800cb98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cb9c <_vfiprintf_r>:
 800cb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba0:	460d      	mov	r5, r1
 800cba2:	4614      	mov	r4, r2
 800cba4:	4698      	mov	r8, r3
 800cba6:	4606      	mov	r6, r0
 800cba8:	b09d      	sub	sp, #116	; 0x74
 800cbaa:	b118      	cbz	r0, 800cbb4 <_vfiprintf_r+0x18>
 800cbac:	6983      	ldr	r3, [r0, #24]
 800cbae:	b90b      	cbnz	r3, 800cbb4 <_vfiprintf_r+0x18>
 800cbb0:	f7ff f934 	bl	800be1c <__sinit>
 800cbb4:	4b89      	ldr	r3, [pc, #548]	; (800cddc <_vfiprintf_r+0x240>)
 800cbb6:	429d      	cmp	r5, r3
 800cbb8:	d11b      	bne.n	800cbf2 <_vfiprintf_r+0x56>
 800cbba:	6875      	ldr	r5, [r6, #4]
 800cbbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbbe:	07d9      	lsls	r1, r3, #31
 800cbc0:	d405      	bmi.n	800cbce <_vfiprintf_r+0x32>
 800cbc2:	89ab      	ldrh	r3, [r5, #12]
 800cbc4:	059a      	lsls	r2, r3, #22
 800cbc6:	d402      	bmi.n	800cbce <_vfiprintf_r+0x32>
 800cbc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbca:	f7ff f9ca 	bl	800bf62 <__retarget_lock_acquire_recursive>
 800cbce:	89ab      	ldrh	r3, [r5, #12]
 800cbd0:	071b      	lsls	r3, r3, #28
 800cbd2:	d501      	bpl.n	800cbd8 <_vfiprintf_r+0x3c>
 800cbd4:	692b      	ldr	r3, [r5, #16]
 800cbd6:	b9eb      	cbnz	r3, 800cc14 <_vfiprintf_r+0x78>
 800cbd8:	4629      	mov	r1, r5
 800cbda:	4630      	mov	r0, r6
 800cbdc:	f000 fa0e 	bl	800cffc <__swsetup_r>
 800cbe0:	b1c0      	cbz	r0, 800cc14 <_vfiprintf_r+0x78>
 800cbe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbe4:	07dc      	lsls	r4, r3, #31
 800cbe6:	d50e      	bpl.n	800cc06 <_vfiprintf_r+0x6a>
 800cbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbec:	b01d      	add	sp, #116	; 0x74
 800cbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbf2:	4b7b      	ldr	r3, [pc, #492]	; (800cde0 <_vfiprintf_r+0x244>)
 800cbf4:	429d      	cmp	r5, r3
 800cbf6:	d101      	bne.n	800cbfc <_vfiprintf_r+0x60>
 800cbf8:	68b5      	ldr	r5, [r6, #8]
 800cbfa:	e7df      	b.n	800cbbc <_vfiprintf_r+0x20>
 800cbfc:	4b79      	ldr	r3, [pc, #484]	; (800cde4 <_vfiprintf_r+0x248>)
 800cbfe:	429d      	cmp	r5, r3
 800cc00:	bf08      	it	eq
 800cc02:	68f5      	ldreq	r5, [r6, #12]
 800cc04:	e7da      	b.n	800cbbc <_vfiprintf_r+0x20>
 800cc06:	89ab      	ldrh	r3, [r5, #12]
 800cc08:	0598      	lsls	r0, r3, #22
 800cc0a:	d4ed      	bmi.n	800cbe8 <_vfiprintf_r+0x4c>
 800cc0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc0e:	f7ff f9a9 	bl	800bf64 <__retarget_lock_release_recursive>
 800cc12:	e7e9      	b.n	800cbe8 <_vfiprintf_r+0x4c>
 800cc14:	2300      	movs	r3, #0
 800cc16:	9309      	str	r3, [sp, #36]	; 0x24
 800cc18:	2320      	movs	r3, #32
 800cc1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc1e:	2330      	movs	r3, #48	; 0x30
 800cc20:	f04f 0901 	mov.w	r9, #1
 800cc24:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc28:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800cde8 <_vfiprintf_r+0x24c>
 800cc2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc30:	4623      	mov	r3, r4
 800cc32:	469a      	mov	sl, r3
 800cc34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc38:	b10a      	cbz	r2, 800cc3e <_vfiprintf_r+0xa2>
 800cc3a:	2a25      	cmp	r2, #37	; 0x25
 800cc3c:	d1f9      	bne.n	800cc32 <_vfiprintf_r+0x96>
 800cc3e:	ebba 0b04 	subs.w	fp, sl, r4
 800cc42:	d00b      	beq.n	800cc5c <_vfiprintf_r+0xc0>
 800cc44:	465b      	mov	r3, fp
 800cc46:	4622      	mov	r2, r4
 800cc48:	4629      	mov	r1, r5
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	f7ff ff93 	bl	800cb76 <__sfputs_r>
 800cc50:	3001      	adds	r0, #1
 800cc52:	f000 80aa 	beq.w	800cdaa <_vfiprintf_r+0x20e>
 800cc56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc58:	445a      	add	r2, fp
 800cc5a:	9209      	str	r2, [sp, #36]	; 0x24
 800cc5c:	f89a 3000 	ldrb.w	r3, [sl]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	f000 80a2 	beq.w	800cdaa <_vfiprintf_r+0x20e>
 800cc66:	2300      	movs	r3, #0
 800cc68:	f04f 32ff 	mov.w	r2, #4294967295
 800cc6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc70:	f10a 0a01 	add.w	sl, sl, #1
 800cc74:	9304      	str	r3, [sp, #16]
 800cc76:	9307      	str	r3, [sp, #28]
 800cc78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc7c:	931a      	str	r3, [sp, #104]	; 0x68
 800cc7e:	4654      	mov	r4, sl
 800cc80:	2205      	movs	r2, #5
 800cc82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc86:	4858      	ldr	r0, [pc, #352]	; (800cde8 <_vfiprintf_r+0x24c>)
 800cc88:	f7ff f976 	bl	800bf78 <memchr>
 800cc8c:	9a04      	ldr	r2, [sp, #16]
 800cc8e:	b9d8      	cbnz	r0, 800ccc8 <_vfiprintf_r+0x12c>
 800cc90:	06d1      	lsls	r1, r2, #27
 800cc92:	bf44      	itt	mi
 800cc94:	2320      	movmi	r3, #32
 800cc96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc9a:	0713      	lsls	r3, r2, #28
 800cc9c:	bf44      	itt	mi
 800cc9e:	232b      	movmi	r3, #43	; 0x2b
 800cca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cca4:	f89a 3000 	ldrb.w	r3, [sl]
 800cca8:	2b2a      	cmp	r3, #42	; 0x2a
 800ccaa:	d015      	beq.n	800ccd8 <_vfiprintf_r+0x13c>
 800ccac:	4654      	mov	r4, sl
 800ccae:	2000      	movs	r0, #0
 800ccb0:	f04f 0c0a 	mov.w	ip, #10
 800ccb4:	9a07      	ldr	r2, [sp, #28]
 800ccb6:	4621      	mov	r1, r4
 800ccb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccbc:	3b30      	subs	r3, #48	; 0x30
 800ccbe:	2b09      	cmp	r3, #9
 800ccc0:	d94e      	bls.n	800cd60 <_vfiprintf_r+0x1c4>
 800ccc2:	b1b0      	cbz	r0, 800ccf2 <_vfiprintf_r+0x156>
 800ccc4:	9207      	str	r2, [sp, #28]
 800ccc6:	e014      	b.n	800ccf2 <_vfiprintf_r+0x156>
 800ccc8:	eba0 0308 	sub.w	r3, r0, r8
 800cccc:	fa09 f303 	lsl.w	r3, r9, r3
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	46a2      	mov	sl, r4
 800ccd4:	9304      	str	r3, [sp, #16]
 800ccd6:	e7d2      	b.n	800cc7e <_vfiprintf_r+0xe2>
 800ccd8:	9b03      	ldr	r3, [sp, #12]
 800ccda:	1d19      	adds	r1, r3, #4
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	9103      	str	r1, [sp, #12]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	bfbb      	ittet	lt
 800cce4:	425b      	neglt	r3, r3
 800cce6:	f042 0202 	orrlt.w	r2, r2, #2
 800ccea:	9307      	strge	r3, [sp, #28]
 800ccec:	9307      	strlt	r3, [sp, #28]
 800ccee:	bfb8      	it	lt
 800ccf0:	9204      	strlt	r2, [sp, #16]
 800ccf2:	7823      	ldrb	r3, [r4, #0]
 800ccf4:	2b2e      	cmp	r3, #46	; 0x2e
 800ccf6:	d10c      	bne.n	800cd12 <_vfiprintf_r+0x176>
 800ccf8:	7863      	ldrb	r3, [r4, #1]
 800ccfa:	2b2a      	cmp	r3, #42	; 0x2a
 800ccfc:	d135      	bne.n	800cd6a <_vfiprintf_r+0x1ce>
 800ccfe:	9b03      	ldr	r3, [sp, #12]
 800cd00:	3402      	adds	r4, #2
 800cd02:	1d1a      	adds	r2, r3, #4
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	9203      	str	r2, [sp, #12]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	bfb8      	it	lt
 800cd0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd10:	9305      	str	r3, [sp, #20]
 800cd12:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800cdec <_vfiprintf_r+0x250>
 800cd16:	2203      	movs	r2, #3
 800cd18:	4650      	mov	r0, sl
 800cd1a:	7821      	ldrb	r1, [r4, #0]
 800cd1c:	f7ff f92c 	bl	800bf78 <memchr>
 800cd20:	b140      	cbz	r0, 800cd34 <_vfiprintf_r+0x198>
 800cd22:	2340      	movs	r3, #64	; 0x40
 800cd24:	eba0 000a 	sub.w	r0, r0, sl
 800cd28:	fa03 f000 	lsl.w	r0, r3, r0
 800cd2c:	9b04      	ldr	r3, [sp, #16]
 800cd2e:	3401      	adds	r4, #1
 800cd30:	4303      	orrs	r3, r0
 800cd32:	9304      	str	r3, [sp, #16]
 800cd34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd38:	2206      	movs	r2, #6
 800cd3a:	482d      	ldr	r0, [pc, #180]	; (800cdf0 <_vfiprintf_r+0x254>)
 800cd3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd40:	f7ff f91a 	bl	800bf78 <memchr>
 800cd44:	2800      	cmp	r0, #0
 800cd46:	d03f      	beq.n	800cdc8 <_vfiprintf_r+0x22c>
 800cd48:	4b2a      	ldr	r3, [pc, #168]	; (800cdf4 <_vfiprintf_r+0x258>)
 800cd4a:	bb1b      	cbnz	r3, 800cd94 <_vfiprintf_r+0x1f8>
 800cd4c:	9b03      	ldr	r3, [sp, #12]
 800cd4e:	3307      	adds	r3, #7
 800cd50:	f023 0307 	bic.w	r3, r3, #7
 800cd54:	3308      	adds	r3, #8
 800cd56:	9303      	str	r3, [sp, #12]
 800cd58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd5a:	443b      	add	r3, r7
 800cd5c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd5e:	e767      	b.n	800cc30 <_vfiprintf_r+0x94>
 800cd60:	460c      	mov	r4, r1
 800cd62:	2001      	movs	r0, #1
 800cd64:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd68:	e7a5      	b.n	800ccb6 <_vfiprintf_r+0x11a>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	f04f 0c0a 	mov.w	ip, #10
 800cd70:	4619      	mov	r1, r3
 800cd72:	3401      	adds	r4, #1
 800cd74:	9305      	str	r3, [sp, #20]
 800cd76:	4620      	mov	r0, r4
 800cd78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd7c:	3a30      	subs	r2, #48	; 0x30
 800cd7e:	2a09      	cmp	r2, #9
 800cd80:	d903      	bls.n	800cd8a <_vfiprintf_r+0x1ee>
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d0c5      	beq.n	800cd12 <_vfiprintf_r+0x176>
 800cd86:	9105      	str	r1, [sp, #20]
 800cd88:	e7c3      	b.n	800cd12 <_vfiprintf_r+0x176>
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd92:	e7f0      	b.n	800cd76 <_vfiprintf_r+0x1da>
 800cd94:	ab03      	add	r3, sp, #12
 800cd96:	9300      	str	r3, [sp, #0]
 800cd98:	462a      	mov	r2, r5
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	4b16      	ldr	r3, [pc, #88]	; (800cdf8 <_vfiprintf_r+0x25c>)
 800cd9e:	a904      	add	r1, sp, #16
 800cda0:	f7fd fd5c 	bl	800a85c <_printf_float>
 800cda4:	4607      	mov	r7, r0
 800cda6:	1c78      	adds	r0, r7, #1
 800cda8:	d1d6      	bne.n	800cd58 <_vfiprintf_r+0x1bc>
 800cdaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdac:	07d9      	lsls	r1, r3, #31
 800cdae:	d405      	bmi.n	800cdbc <_vfiprintf_r+0x220>
 800cdb0:	89ab      	ldrh	r3, [r5, #12]
 800cdb2:	059a      	lsls	r2, r3, #22
 800cdb4:	d402      	bmi.n	800cdbc <_vfiprintf_r+0x220>
 800cdb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdb8:	f7ff f8d4 	bl	800bf64 <__retarget_lock_release_recursive>
 800cdbc:	89ab      	ldrh	r3, [r5, #12]
 800cdbe:	065b      	lsls	r3, r3, #25
 800cdc0:	f53f af12 	bmi.w	800cbe8 <_vfiprintf_r+0x4c>
 800cdc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdc6:	e711      	b.n	800cbec <_vfiprintf_r+0x50>
 800cdc8:	ab03      	add	r3, sp, #12
 800cdca:	9300      	str	r3, [sp, #0]
 800cdcc:	462a      	mov	r2, r5
 800cdce:	4630      	mov	r0, r6
 800cdd0:	4b09      	ldr	r3, [pc, #36]	; (800cdf8 <_vfiprintf_r+0x25c>)
 800cdd2:	a904      	add	r1, sp, #16
 800cdd4:	f7fd ffde 	bl	800ad94 <_printf_i>
 800cdd8:	e7e4      	b.n	800cda4 <_vfiprintf_r+0x208>
 800cdda:	bf00      	nop
 800cddc:	0800d784 	.word	0x0800d784
 800cde0:	0800d7a4 	.word	0x0800d7a4
 800cde4:	0800d764 	.word	0x0800d764
 800cde8:	0800d91c 	.word	0x0800d91c
 800cdec:	0800d922 	.word	0x0800d922
 800cdf0:	0800d926 	.word	0x0800d926
 800cdf4:	0800a85d 	.word	0x0800a85d
 800cdf8:	0800cb77 	.word	0x0800cb77

0800cdfc <_putc_r>:
 800cdfc:	b570      	push	{r4, r5, r6, lr}
 800cdfe:	460d      	mov	r5, r1
 800ce00:	4614      	mov	r4, r2
 800ce02:	4606      	mov	r6, r0
 800ce04:	b118      	cbz	r0, 800ce0e <_putc_r+0x12>
 800ce06:	6983      	ldr	r3, [r0, #24]
 800ce08:	b90b      	cbnz	r3, 800ce0e <_putc_r+0x12>
 800ce0a:	f7ff f807 	bl	800be1c <__sinit>
 800ce0e:	4b1c      	ldr	r3, [pc, #112]	; (800ce80 <_putc_r+0x84>)
 800ce10:	429c      	cmp	r4, r3
 800ce12:	d124      	bne.n	800ce5e <_putc_r+0x62>
 800ce14:	6874      	ldr	r4, [r6, #4]
 800ce16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce18:	07d8      	lsls	r0, r3, #31
 800ce1a:	d405      	bmi.n	800ce28 <_putc_r+0x2c>
 800ce1c:	89a3      	ldrh	r3, [r4, #12]
 800ce1e:	0599      	lsls	r1, r3, #22
 800ce20:	d402      	bmi.n	800ce28 <_putc_r+0x2c>
 800ce22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce24:	f7ff f89d 	bl	800bf62 <__retarget_lock_acquire_recursive>
 800ce28:	68a3      	ldr	r3, [r4, #8]
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	60a3      	str	r3, [r4, #8]
 800ce30:	da05      	bge.n	800ce3e <_putc_r+0x42>
 800ce32:	69a2      	ldr	r2, [r4, #24]
 800ce34:	4293      	cmp	r3, r2
 800ce36:	db1c      	blt.n	800ce72 <_putc_r+0x76>
 800ce38:	b2eb      	uxtb	r3, r5
 800ce3a:	2b0a      	cmp	r3, #10
 800ce3c:	d019      	beq.n	800ce72 <_putc_r+0x76>
 800ce3e:	6823      	ldr	r3, [r4, #0]
 800ce40:	1c5a      	adds	r2, r3, #1
 800ce42:	6022      	str	r2, [r4, #0]
 800ce44:	701d      	strb	r5, [r3, #0]
 800ce46:	b2ed      	uxtb	r5, r5
 800ce48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce4a:	07da      	lsls	r2, r3, #31
 800ce4c:	d405      	bmi.n	800ce5a <_putc_r+0x5e>
 800ce4e:	89a3      	ldrh	r3, [r4, #12]
 800ce50:	059b      	lsls	r3, r3, #22
 800ce52:	d402      	bmi.n	800ce5a <_putc_r+0x5e>
 800ce54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce56:	f7ff f885 	bl	800bf64 <__retarget_lock_release_recursive>
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	bd70      	pop	{r4, r5, r6, pc}
 800ce5e:	4b09      	ldr	r3, [pc, #36]	; (800ce84 <_putc_r+0x88>)
 800ce60:	429c      	cmp	r4, r3
 800ce62:	d101      	bne.n	800ce68 <_putc_r+0x6c>
 800ce64:	68b4      	ldr	r4, [r6, #8]
 800ce66:	e7d6      	b.n	800ce16 <_putc_r+0x1a>
 800ce68:	4b07      	ldr	r3, [pc, #28]	; (800ce88 <_putc_r+0x8c>)
 800ce6a:	429c      	cmp	r4, r3
 800ce6c:	bf08      	it	eq
 800ce6e:	68f4      	ldreq	r4, [r6, #12]
 800ce70:	e7d1      	b.n	800ce16 <_putc_r+0x1a>
 800ce72:	4629      	mov	r1, r5
 800ce74:	4622      	mov	r2, r4
 800ce76:	4630      	mov	r0, r6
 800ce78:	f000 f85c 	bl	800cf34 <__swbuf_r>
 800ce7c:	4605      	mov	r5, r0
 800ce7e:	e7e3      	b.n	800ce48 <_putc_r+0x4c>
 800ce80:	0800d784 	.word	0x0800d784
 800ce84:	0800d7a4 	.word	0x0800d7a4
 800ce88:	0800d764 	.word	0x0800d764

0800ce8c <_sbrk_r>:
 800ce8c:	b538      	push	{r3, r4, r5, lr}
 800ce8e:	2300      	movs	r3, #0
 800ce90:	4d05      	ldr	r5, [pc, #20]	; (800cea8 <_sbrk_r+0x1c>)
 800ce92:	4604      	mov	r4, r0
 800ce94:	4608      	mov	r0, r1
 800ce96:	602b      	str	r3, [r5, #0]
 800ce98:	f7f4 febc 	bl	8001c14 <_sbrk>
 800ce9c:	1c43      	adds	r3, r0, #1
 800ce9e:	d102      	bne.n	800cea6 <_sbrk_r+0x1a>
 800cea0:	682b      	ldr	r3, [r5, #0]
 800cea2:	b103      	cbz	r3, 800cea6 <_sbrk_r+0x1a>
 800cea4:	6023      	str	r3, [r4, #0]
 800cea6:	bd38      	pop	{r3, r4, r5, pc}
 800cea8:	20001610 	.word	0x20001610

0800ceac <__sread>:
 800ceac:	b510      	push	{r4, lr}
 800ceae:	460c      	mov	r4, r1
 800ceb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb4:	f000 faee 	bl	800d494 <_read_r>
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	bfab      	itete	ge
 800cebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cebe:	89a3      	ldrhlt	r3, [r4, #12]
 800cec0:	181b      	addge	r3, r3, r0
 800cec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cec6:	bfac      	ite	ge
 800cec8:	6563      	strge	r3, [r4, #84]	; 0x54
 800ceca:	81a3      	strhlt	r3, [r4, #12]
 800cecc:	bd10      	pop	{r4, pc}

0800cece <__swrite>:
 800cece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ced2:	461f      	mov	r7, r3
 800ced4:	898b      	ldrh	r3, [r1, #12]
 800ced6:	4605      	mov	r5, r0
 800ced8:	05db      	lsls	r3, r3, #23
 800ceda:	460c      	mov	r4, r1
 800cedc:	4616      	mov	r6, r2
 800cede:	d505      	bpl.n	800ceec <__swrite+0x1e>
 800cee0:	2302      	movs	r3, #2
 800cee2:	2200      	movs	r2, #0
 800cee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cee8:	f000 f9f4 	bl	800d2d4 <_lseek_r>
 800ceec:	89a3      	ldrh	r3, [r4, #12]
 800ceee:	4632      	mov	r2, r6
 800cef0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cef4:	81a3      	strh	r3, [r4, #12]
 800cef6:	4628      	mov	r0, r5
 800cef8:	463b      	mov	r3, r7
 800cefa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cefe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf02:	f000 b869 	b.w	800cfd8 <_write_r>

0800cf06 <__sseek>:
 800cf06:	b510      	push	{r4, lr}
 800cf08:	460c      	mov	r4, r1
 800cf0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf0e:	f000 f9e1 	bl	800d2d4 <_lseek_r>
 800cf12:	1c43      	adds	r3, r0, #1
 800cf14:	89a3      	ldrh	r3, [r4, #12]
 800cf16:	bf15      	itete	ne
 800cf18:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf22:	81a3      	strheq	r3, [r4, #12]
 800cf24:	bf18      	it	ne
 800cf26:	81a3      	strhne	r3, [r4, #12]
 800cf28:	bd10      	pop	{r4, pc}

0800cf2a <__sclose>:
 800cf2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf2e:	f000 b8f1 	b.w	800d114 <_close_r>
	...

0800cf34 <__swbuf_r>:
 800cf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf36:	460e      	mov	r6, r1
 800cf38:	4614      	mov	r4, r2
 800cf3a:	4605      	mov	r5, r0
 800cf3c:	b118      	cbz	r0, 800cf46 <__swbuf_r+0x12>
 800cf3e:	6983      	ldr	r3, [r0, #24]
 800cf40:	b90b      	cbnz	r3, 800cf46 <__swbuf_r+0x12>
 800cf42:	f7fe ff6b 	bl	800be1c <__sinit>
 800cf46:	4b21      	ldr	r3, [pc, #132]	; (800cfcc <__swbuf_r+0x98>)
 800cf48:	429c      	cmp	r4, r3
 800cf4a:	d12b      	bne.n	800cfa4 <__swbuf_r+0x70>
 800cf4c:	686c      	ldr	r4, [r5, #4]
 800cf4e:	69a3      	ldr	r3, [r4, #24]
 800cf50:	60a3      	str	r3, [r4, #8]
 800cf52:	89a3      	ldrh	r3, [r4, #12]
 800cf54:	071a      	lsls	r2, r3, #28
 800cf56:	d52f      	bpl.n	800cfb8 <__swbuf_r+0x84>
 800cf58:	6923      	ldr	r3, [r4, #16]
 800cf5a:	b36b      	cbz	r3, 800cfb8 <__swbuf_r+0x84>
 800cf5c:	6923      	ldr	r3, [r4, #16]
 800cf5e:	6820      	ldr	r0, [r4, #0]
 800cf60:	b2f6      	uxtb	r6, r6
 800cf62:	1ac0      	subs	r0, r0, r3
 800cf64:	6963      	ldr	r3, [r4, #20]
 800cf66:	4637      	mov	r7, r6
 800cf68:	4283      	cmp	r3, r0
 800cf6a:	dc04      	bgt.n	800cf76 <__swbuf_r+0x42>
 800cf6c:	4621      	mov	r1, r4
 800cf6e:	4628      	mov	r0, r5
 800cf70:	f000 f962 	bl	800d238 <_fflush_r>
 800cf74:	bb30      	cbnz	r0, 800cfc4 <__swbuf_r+0x90>
 800cf76:	68a3      	ldr	r3, [r4, #8]
 800cf78:	3001      	adds	r0, #1
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	60a3      	str	r3, [r4, #8]
 800cf7e:	6823      	ldr	r3, [r4, #0]
 800cf80:	1c5a      	adds	r2, r3, #1
 800cf82:	6022      	str	r2, [r4, #0]
 800cf84:	701e      	strb	r6, [r3, #0]
 800cf86:	6963      	ldr	r3, [r4, #20]
 800cf88:	4283      	cmp	r3, r0
 800cf8a:	d004      	beq.n	800cf96 <__swbuf_r+0x62>
 800cf8c:	89a3      	ldrh	r3, [r4, #12]
 800cf8e:	07db      	lsls	r3, r3, #31
 800cf90:	d506      	bpl.n	800cfa0 <__swbuf_r+0x6c>
 800cf92:	2e0a      	cmp	r6, #10
 800cf94:	d104      	bne.n	800cfa0 <__swbuf_r+0x6c>
 800cf96:	4621      	mov	r1, r4
 800cf98:	4628      	mov	r0, r5
 800cf9a:	f000 f94d 	bl	800d238 <_fflush_r>
 800cf9e:	b988      	cbnz	r0, 800cfc4 <__swbuf_r+0x90>
 800cfa0:	4638      	mov	r0, r7
 800cfa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfa4:	4b0a      	ldr	r3, [pc, #40]	; (800cfd0 <__swbuf_r+0x9c>)
 800cfa6:	429c      	cmp	r4, r3
 800cfa8:	d101      	bne.n	800cfae <__swbuf_r+0x7a>
 800cfaa:	68ac      	ldr	r4, [r5, #8]
 800cfac:	e7cf      	b.n	800cf4e <__swbuf_r+0x1a>
 800cfae:	4b09      	ldr	r3, [pc, #36]	; (800cfd4 <__swbuf_r+0xa0>)
 800cfb0:	429c      	cmp	r4, r3
 800cfb2:	bf08      	it	eq
 800cfb4:	68ec      	ldreq	r4, [r5, #12]
 800cfb6:	e7ca      	b.n	800cf4e <__swbuf_r+0x1a>
 800cfb8:	4621      	mov	r1, r4
 800cfba:	4628      	mov	r0, r5
 800cfbc:	f000 f81e 	bl	800cffc <__swsetup_r>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d0cb      	beq.n	800cf5c <__swbuf_r+0x28>
 800cfc4:	f04f 37ff 	mov.w	r7, #4294967295
 800cfc8:	e7ea      	b.n	800cfa0 <__swbuf_r+0x6c>
 800cfca:	bf00      	nop
 800cfcc:	0800d784 	.word	0x0800d784
 800cfd0:	0800d7a4 	.word	0x0800d7a4
 800cfd4:	0800d764 	.word	0x0800d764

0800cfd8 <_write_r>:
 800cfd8:	b538      	push	{r3, r4, r5, lr}
 800cfda:	4604      	mov	r4, r0
 800cfdc:	4608      	mov	r0, r1
 800cfde:	4611      	mov	r1, r2
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	4d05      	ldr	r5, [pc, #20]	; (800cff8 <_write_r+0x20>)
 800cfe4:	602a      	str	r2, [r5, #0]
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	f7f4 fdc8 	bl	8001b7c <_write>
 800cfec:	1c43      	adds	r3, r0, #1
 800cfee:	d102      	bne.n	800cff6 <_write_r+0x1e>
 800cff0:	682b      	ldr	r3, [r5, #0]
 800cff2:	b103      	cbz	r3, 800cff6 <_write_r+0x1e>
 800cff4:	6023      	str	r3, [r4, #0]
 800cff6:	bd38      	pop	{r3, r4, r5, pc}
 800cff8:	20001610 	.word	0x20001610

0800cffc <__swsetup_r>:
 800cffc:	4b32      	ldr	r3, [pc, #200]	; (800d0c8 <__swsetup_r+0xcc>)
 800cffe:	b570      	push	{r4, r5, r6, lr}
 800d000:	681d      	ldr	r5, [r3, #0]
 800d002:	4606      	mov	r6, r0
 800d004:	460c      	mov	r4, r1
 800d006:	b125      	cbz	r5, 800d012 <__swsetup_r+0x16>
 800d008:	69ab      	ldr	r3, [r5, #24]
 800d00a:	b913      	cbnz	r3, 800d012 <__swsetup_r+0x16>
 800d00c:	4628      	mov	r0, r5
 800d00e:	f7fe ff05 	bl	800be1c <__sinit>
 800d012:	4b2e      	ldr	r3, [pc, #184]	; (800d0cc <__swsetup_r+0xd0>)
 800d014:	429c      	cmp	r4, r3
 800d016:	d10f      	bne.n	800d038 <__swsetup_r+0x3c>
 800d018:	686c      	ldr	r4, [r5, #4]
 800d01a:	89a3      	ldrh	r3, [r4, #12]
 800d01c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d020:	0719      	lsls	r1, r3, #28
 800d022:	d42c      	bmi.n	800d07e <__swsetup_r+0x82>
 800d024:	06dd      	lsls	r5, r3, #27
 800d026:	d411      	bmi.n	800d04c <__swsetup_r+0x50>
 800d028:	2309      	movs	r3, #9
 800d02a:	6033      	str	r3, [r6, #0]
 800d02c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d030:	f04f 30ff 	mov.w	r0, #4294967295
 800d034:	81a3      	strh	r3, [r4, #12]
 800d036:	e03e      	b.n	800d0b6 <__swsetup_r+0xba>
 800d038:	4b25      	ldr	r3, [pc, #148]	; (800d0d0 <__swsetup_r+0xd4>)
 800d03a:	429c      	cmp	r4, r3
 800d03c:	d101      	bne.n	800d042 <__swsetup_r+0x46>
 800d03e:	68ac      	ldr	r4, [r5, #8]
 800d040:	e7eb      	b.n	800d01a <__swsetup_r+0x1e>
 800d042:	4b24      	ldr	r3, [pc, #144]	; (800d0d4 <__swsetup_r+0xd8>)
 800d044:	429c      	cmp	r4, r3
 800d046:	bf08      	it	eq
 800d048:	68ec      	ldreq	r4, [r5, #12]
 800d04a:	e7e6      	b.n	800d01a <__swsetup_r+0x1e>
 800d04c:	0758      	lsls	r0, r3, #29
 800d04e:	d512      	bpl.n	800d076 <__swsetup_r+0x7a>
 800d050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d052:	b141      	cbz	r1, 800d066 <__swsetup_r+0x6a>
 800d054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d058:	4299      	cmp	r1, r3
 800d05a:	d002      	beq.n	800d062 <__swsetup_r+0x66>
 800d05c:	4630      	mov	r0, r6
 800d05e:	f7ff fb3d 	bl	800c6dc <_free_r>
 800d062:	2300      	movs	r3, #0
 800d064:	6363      	str	r3, [r4, #52]	; 0x34
 800d066:	89a3      	ldrh	r3, [r4, #12]
 800d068:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d06c:	81a3      	strh	r3, [r4, #12]
 800d06e:	2300      	movs	r3, #0
 800d070:	6063      	str	r3, [r4, #4]
 800d072:	6923      	ldr	r3, [r4, #16]
 800d074:	6023      	str	r3, [r4, #0]
 800d076:	89a3      	ldrh	r3, [r4, #12]
 800d078:	f043 0308 	orr.w	r3, r3, #8
 800d07c:	81a3      	strh	r3, [r4, #12]
 800d07e:	6923      	ldr	r3, [r4, #16]
 800d080:	b94b      	cbnz	r3, 800d096 <__swsetup_r+0x9a>
 800d082:	89a3      	ldrh	r3, [r4, #12]
 800d084:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d08c:	d003      	beq.n	800d096 <__swsetup_r+0x9a>
 800d08e:	4621      	mov	r1, r4
 800d090:	4630      	mov	r0, r6
 800d092:	f000 f957 	bl	800d344 <__smakebuf_r>
 800d096:	89a0      	ldrh	r0, [r4, #12]
 800d098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d09c:	f010 0301 	ands.w	r3, r0, #1
 800d0a0:	d00a      	beq.n	800d0b8 <__swsetup_r+0xbc>
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	60a3      	str	r3, [r4, #8]
 800d0a6:	6963      	ldr	r3, [r4, #20]
 800d0a8:	425b      	negs	r3, r3
 800d0aa:	61a3      	str	r3, [r4, #24]
 800d0ac:	6923      	ldr	r3, [r4, #16]
 800d0ae:	b943      	cbnz	r3, 800d0c2 <__swsetup_r+0xc6>
 800d0b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d0b4:	d1ba      	bne.n	800d02c <__swsetup_r+0x30>
 800d0b6:	bd70      	pop	{r4, r5, r6, pc}
 800d0b8:	0781      	lsls	r1, r0, #30
 800d0ba:	bf58      	it	pl
 800d0bc:	6963      	ldrpl	r3, [r4, #20]
 800d0be:	60a3      	str	r3, [r4, #8]
 800d0c0:	e7f4      	b.n	800d0ac <__swsetup_r+0xb0>
 800d0c2:	2000      	movs	r0, #0
 800d0c4:	e7f7      	b.n	800d0b6 <__swsetup_r+0xba>
 800d0c6:	bf00      	nop
 800d0c8:	20000180 	.word	0x20000180
 800d0cc:	0800d784 	.word	0x0800d784
 800d0d0:	0800d7a4 	.word	0x0800d7a4
 800d0d4:	0800d764 	.word	0x0800d764

0800d0d8 <__assert_func>:
 800d0d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0da:	4614      	mov	r4, r2
 800d0dc:	461a      	mov	r2, r3
 800d0de:	4b09      	ldr	r3, [pc, #36]	; (800d104 <__assert_func+0x2c>)
 800d0e0:	4605      	mov	r5, r0
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	68d8      	ldr	r0, [r3, #12]
 800d0e6:	b14c      	cbz	r4, 800d0fc <__assert_func+0x24>
 800d0e8:	4b07      	ldr	r3, [pc, #28]	; (800d108 <__assert_func+0x30>)
 800d0ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0ee:	9100      	str	r1, [sp, #0]
 800d0f0:	462b      	mov	r3, r5
 800d0f2:	4906      	ldr	r1, [pc, #24]	; (800d10c <__assert_func+0x34>)
 800d0f4:	f000 f8dc 	bl	800d2b0 <fiprintf>
 800d0f8:	f000 f9eb 	bl	800d4d2 <abort>
 800d0fc:	4b04      	ldr	r3, [pc, #16]	; (800d110 <__assert_func+0x38>)
 800d0fe:	461c      	mov	r4, r3
 800d100:	e7f3      	b.n	800d0ea <__assert_func+0x12>
 800d102:	bf00      	nop
 800d104:	20000180 	.word	0x20000180
 800d108:	0800d92d 	.word	0x0800d92d
 800d10c:	0800d93a 	.word	0x0800d93a
 800d110:	0800d968 	.word	0x0800d968

0800d114 <_close_r>:
 800d114:	b538      	push	{r3, r4, r5, lr}
 800d116:	2300      	movs	r3, #0
 800d118:	4d05      	ldr	r5, [pc, #20]	; (800d130 <_close_r+0x1c>)
 800d11a:	4604      	mov	r4, r0
 800d11c:	4608      	mov	r0, r1
 800d11e:	602b      	str	r3, [r5, #0]
 800d120:	f7f4 fd48 	bl	8001bb4 <_close>
 800d124:	1c43      	adds	r3, r0, #1
 800d126:	d102      	bne.n	800d12e <_close_r+0x1a>
 800d128:	682b      	ldr	r3, [r5, #0]
 800d12a:	b103      	cbz	r3, 800d12e <_close_r+0x1a>
 800d12c:	6023      	str	r3, [r4, #0]
 800d12e:	bd38      	pop	{r3, r4, r5, pc}
 800d130:	20001610 	.word	0x20001610

0800d134 <__sflush_r>:
 800d134:	898a      	ldrh	r2, [r1, #12]
 800d136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d138:	4605      	mov	r5, r0
 800d13a:	0710      	lsls	r0, r2, #28
 800d13c:	460c      	mov	r4, r1
 800d13e:	d457      	bmi.n	800d1f0 <__sflush_r+0xbc>
 800d140:	684b      	ldr	r3, [r1, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	dc04      	bgt.n	800d150 <__sflush_r+0x1c>
 800d146:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d148:	2b00      	cmp	r3, #0
 800d14a:	dc01      	bgt.n	800d150 <__sflush_r+0x1c>
 800d14c:	2000      	movs	r0, #0
 800d14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d152:	2e00      	cmp	r6, #0
 800d154:	d0fa      	beq.n	800d14c <__sflush_r+0x18>
 800d156:	2300      	movs	r3, #0
 800d158:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d15c:	682f      	ldr	r7, [r5, #0]
 800d15e:	602b      	str	r3, [r5, #0]
 800d160:	d032      	beq.n	800d1c8 <__sflush_r+0x94>
 800d162:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d164:	89a3      	ldrh	r3, [r4, #12]
 800d166:	075a      	lsls	r2, r3, #29
 800d168:	d505      	bpl.n	800d176 <__sflush_r+0x42>
 800d16a:	6863      	ldr	r3, [r4, #4]
 800d16c:	1ac0      	subs	r0, r0, r3
 800d16e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d170:	b10b      	cbz	r3, 800d176 <__sflush_r+0x42>
 800d172:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d174:	1ac0      	subs	r0, r0, r3
 800d176:	2300      	movs	r3, #0
 800d178:	4602      	mov	r2, r0
 800d17a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d17c:	4628      	mov	r0, r5
 800d17e:	6a21      	ldr	r1, [r4, #32]
 800d180:	47b0      	blx	r6
 800d182:	1c43      	adds	r3, r0, #1
 800d184:	89a3      	ldrh	r3, [r4, #12]
 800d186:	d106      	bne.n	800d196 <__sflush_r+0x62>
 800d188:	6829      	ldr	r1, [r5, #0]
 800d18a:	291d      	cmp	r1, #29
 800d18c:	d82c      	bhi.n	800d1e8 <__sflush_r+0xb4>
 800d18e:	4a29      	ldr	r2, [pc, #164]	; (800d234 <__sflush_r+0x100>)
 800d190:	40ca      	lsrs	r2, r1
 800d192:	07d6      	lsls	r6, r2, #31
 800d194:	d528      	bpl.n	800d1e8 <__sflush_r+0xb4>
 800d196:	2200      	movs	r2, #0
 800d198:	6062      	str	r2, [r4, #4]
 800d19a:	6922      	ldr	r2, [r4, #16]
 800d19c:	04d9      	lsls	r1, r3, #19
 800d19e:	6022      	str	r2, [r4, #0]
 800d1a0:	d504      	bpl.n	800d1ac <__sflush_r+0x78>
 800d1a2:	1c42      	adds	r2, r0, #1
 800d1a4:	d101      	bne.n	800d1aa <__sflush_r+0x76>
 800d1a6:	682b      	ldr	r3, [r5, #0]
 800d1a8:	b903      	cbnz	r3, 800d1ac <__sflush_r+0x78>
 800d1aa:	6560      	str	r0, [r4, #84]	; 0x54
 800d1ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1ae:	602f      	str	r7, [r5, #0]
 800d1b0:	2900      	cmp	r1, #0
 800d1b2:	d0cb      	beq.n	800d14c <__sflush_r+0x18>
 800d1b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1b8:	4299      	cmp	r1, r3
 800d1ba:	d002      	beq.n	800d1c2 <__sflush_r+0x8e>
 800d1bc:	4628      	mov	r0, r5
 800d1be:	f7ff fa8d 	bl	800c6dc <_free_r>
 800d1c2:	2000      	movs	r0, #0
 800d1c4:	6360      	str	r0, [r4, #52]	; 0x34
 800d1c6:	e7c2      	b.n	800d14e <__sflush_r+0x1a>
 800d1c8:	6a21      	ldr	r1, [r4, #32]
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	4628      	mov	r0, r5
 800d1ce:	47b0      	blx	r6
 800d1d0:	1c41      	adds	r1, r0, #1
 800d1d2:	d1c7      	bne.n	800d164 <__sflush_r+0x30>
 800d1d4:	682b      	ldr	r3, [r5, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d0c4      	beq.n	800d164 <__sflush_r+0x30>
 800d1da:	2b1d      	cmp	r3, #29
 800d1dc:	d001      	beq.n	800d1e2 <__sflush_r+0xae>
 800d1de:	2b16      	cmp	r3, #22
 800d1e0:	d101      	bne.n	800d1e6 <__sflush_r+0xb2>
 800d1e2:	602f      	str	r7, [r5, #0]
 800d1e4:	e7b2      	b.n	800d14c <__sflush_r+0x18>
 800d1e6:	89a3      	ldrh	r3, [r4, #12]
 800d1e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1ec:	81a3      	strh	r3, [r4, #12]
 800d1ee:	e7ae      	b.n	800d14e <__sflush_r+0x1a>
 800d1f0:	690f      	ldr	r7, [r1, #16]
 800d1f2:	2f00      	cmp	r7, #0
 800d1f4:	d0aa      	beq.n	800d14c <__sflush_r+0x18>
 800d1f6:	0793      	lsls	r3, r2, #30
 800d1f8:	bf18      	it	ne
 800d1fa:	2300      	movne	r3, #0
 800d1fc:	680e      	ldr	r6, [r1, #0]
 800d1fe:	bf08      	it	eq
 800d200:	694b      	ldreq	r3, [r1, #20]
 800d202:	1bf6      	subs	r6, r6, r7
 800d204:	600f      	str	r7, [r1, #0]
 800d206:	608b      	str	r3, [r1, #8]
 800d208:	2e00      	cmp	r6, #0
 800d20a:	dd9f      	ble.n	800d14c <__sflush_r+0x18>
 800d20c:	4633      	mov	r3, r6
 800d20e:	463a      	mov	r2, r7
 800d210:	4628      	mov	r0, r5
 800d212:	6a21      	ldr	r1, [r4, #32]
 800d214:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d218:	47e0      	blx	ip
 800d21a:	2800      	cmp	r0, #0
 800d21c:	dc06      	bgt.n	800d22c <__sflush_r+0xf8>
 800d21e:	89a3      	ldrh	r3, [r4, #12]
 800d220:	f04f 30ff 	mov.w	r0, #4294967295
 800d224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d228:	81a3      	strh	r3, [r4, #12]
 800d22a:	e790      	b.n	800d14e <__sflush_r+0x1a>
 800d22c:	4407      	add	r7, r0
 800d22e:	1a36      	subs	r6, r6, r0
 800d230:	e7ea      	b.n	800d208 <__sflush_r+0xd4>
 800d232:	bf00      	nop
 800d234:	20400001 	.word	0x20400001

0800d238 <_fflush_r>:
 800d238:	b538      	push	{r3, r4, r5, lr}
 800d23a:	690b      	ldr	r3, [r1, #16]
 800d23c:	4605      	mov	r5, r0
 800d23e:	460c      	mov	r4, r1
 800d240:	b913      	cbnz	r3, 800d248 <_fflush_r+0x10>
 800d242:	2500      	movs	r5, #0
 800d244:	4628      	mov	r0, r5
 800d246:	bd38      	pop	{r3, r4, r5, pc}
 800d248:	b118      	cbz	r0, 800d252 <_fflush_r+0x1a>
 800d24a:	6983      	ldr	r3, [r0, #24]
 800d24c:	b90b      	cbnz	r3, 800d252 <_fflush_r+0x1a>
 800d24e:	f7fe fde5 	bl	800be1c <__sinit>
 800d252:	4b14      	ldr	r3, [pc, #80]	; (800d2a4 <_fflush_r+0x6c>)
 800d254:	429c      	cmp	r4, r3
 800d256:	d11b      	bne.n	800d290 <_fflush_r+0x58>
 800d258:	686c      	ldr	r4, [r5, #4]
 800d25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d0ef      	beq.n	800d242 <_fflush_r+0xa>
 800d262:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d264:	07d0      	lsls	r0, r2, #31
 800d266:	d404      	bmi.n	800d272 <_fflush_r+0x3a>
 800d268:	0599      	lsls	r1, r3, #22
 800d26a:	d402      	bmi.n	800d272 <_fflush_r+0x3a>
 800d26c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d26e:	f7fe fe78 	bl	800bf62 <__retarget_lock_acquire_recursive>
 800d272:	4628      	mov	r0, r5
 800d274:	4621      	mov	r1, r4
 800d276:	f7ff ff5d 	bl	800d134 <__sflush_r>
 800d27a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d27c:	4605      	mov	r5, r0
 800d27e:	07da      	lsls	r2, r3, #31
 800d280:	d4e0      	bmi.n	800d244 <_fflush_r+0xc>
 800d282:	89a3      	ldrh	r3, [r4, #12]
 800d284:	059b      	lsls	r3, r3, #22
 800d286:	d4dd      	bmi.n	800d244 <_fflush_r+0xc>
 800d288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d28a:	f7fe fe6b 	bl	800bf64 <__retarget_lock_release_recursive>
 800d28e:	e7d9      	b.n	800d244 <_fflush_r+0xc>
 800d290:	4b05      	ldr	r3, [pc, #20]	; (800d2a8 <_fflush_r+0x70>)
 800d292:	429c      	cmp	r4, r3
 800d294:	d101      	bne.n	800d29a <_fflush_r+0x62>
 800d296:	68ac      	ldr	r4, [r5, #8]
 800d298:	e7df      	b.n	800d25a <_fflush_r+0x22>
 800d29a:	4b04      	ldr	r3, [pc, #16]	; (800d2ac <_fflush_r+0x74>)
 800d29c:	429c      	cmp	r4, r3
 800d29e:	bf08      	it	eq
 800d2a0:	68ec      	ldreq	r4, [r5, #12]
 800d2a2:	e7da      	b.n	800d25a <_fflush_r+0x22>
 800d2a4:	0800d784 	.word	0x0800d784
 800d2a8:	0800d7a4 	.word	0x0800d7a4
 800d2ac:	0800d764 	.word	0x0800d764

0800d2b0 <fiprintf>:
 800d2b0:	b40e      	push	{r1, r2, r3}
 800d2b2:	b503      	push	{r0, r1, lr}
 800d2b4:	4601      	mov	r1, r0
 800d2b6:	ab03      	add	r3, sp, #12
 800d2b8:	4805      	ldr	r0, [pc, #20]	; (800d2d0 <fiprintf+0x20>)
 800d2ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2be:	6800      	ldr	r0, [r0, #0]
 800d2c0:	9301      	str	r3, [sp, #4]
 800d2c2:	f7ff fc6b 	bl	800cb9c <_vfiprintf_r>
 800d2c6:	b002      	add	sp, #8
 800d2c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2cc:	b003      	add	sp, #12
 800d2ce:	4770      	bx	lr
 800d2d0:	20000180 	.word	0x20000180

0800d2d4 <_lseek_r>:
 800d2d4:	b538      	push	{r3, r4, r5, lr}
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	4608      	mov	r0, r1
 800d2da:	4611      	mov	r1, r2
 800d2dc:	2200      	movs	r2, #0
 800d2de:	4d05      	ldr	r5, [pc, #20]	; (800d2f4 <_lseek_r+0x20>)
 800d2e0:	602a      	str	r2, [r5, #0]
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	f7f4 fc8a 	bl	8001bfc <_lseek>
 800d2e8:	1c43      	adds	r3, r0, #1
 800d2ea:	d102      	bne.n	800d2f2 <_lseek_r+0x1e>
 800d2ec:	682b      	ldr	r3, [r5, #0]
 800d2ee:	b103      	cbz	r3, 800d2f2 <_lseek_r+0x1e>
 800d2f0:	6023      	str	r3, [r4, #0]
 800d2f2:	bd38      	pop	{r3, r4, r5, pc}
 800d2f4:	20001610 	.word	0x20001610

0800d2f8 <__swhatbuf_r>:
 800d2f8:	b570      	push	{r4, r5, r6, lr}
 800d2fa:	460e      	mov	r6, r1
 800d2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d300:	4614      	mov	r4, r2
 800d302:	2900      	cmp	r1, #0
 800d304:	461d      	mov	r5, r3
 800d306:	b096      	sub	sp, #88	; 0x58
 800d308:	da08      	bge.n	800d31c <__swhatbuf_r+0x24>
 800d30a:	2200      	movs	r2, #0
 800d30c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d310:	602a      	str	r2, [r5, #0]
 800d312:	061a      	lsls	r2, r3, #24
 800d314:	d410      	bmi.n	800d338 <__swhatbuf_r+0x40>
 800d316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d31a:	e00e      	b.n	800d33a <__swhatbuf_r+0x42>
 800d31c:	466a      	mov	r2, sp
 800d31e:	f000 f8df 	bl	800d4e0 <_fstat_r>
 800d322:	2800      	cmp	r0, #0
 800d324:	dbf1      	blt.n	800d30a <__swhatbuf_r+0x12>
 800d326:	9a01      	ldr	r2, [sp, #4]
 800d328:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d32c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d330:	425a      	negs	r2, r3
 800d332:	415a      	adcs	r2, r3
 800d334:	602a      	str	r2, [r5, #0]
 800d336:	e7ee      	b.n	800d316 <__swhatbuf_r+0x1e>
 800d338:	2340      	movs	r3, #64	; 0x40
 800d33a:	2000      	movs	r0, #0
 800d33c:	6023      	str	r3, [r4, #0]
 800d33e:	b016      	add	sp, #88	; 0x58
 800d340:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d344 <__smakebuf_r>:
 800d344:	898b      	ldrh	r3, [r1, #12]
 800d346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d348:	079d      	lsls	r5, r3, #30
 800d34a:	4606      	mov	r6, r0
 800d34c:	460c      	mov	r4, r1
 800d34e:	d507      	bpl.n	800d360 <__smakebuf_r+0x1c>
 800d350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d354:	6023      	str	r3, [r4, #0]
 800d356:	6123      	str	r3, [r4, #16]
 800d358:	2301      	movs	r3, #1
 800d35a:	6163      	str	r3, [r4, #20]
 800d35c:	b002      	add	sp, #8
 800d35e:	bd70      	pop	{r4, r5, r6, pc}
 800d360:	466a      	mov	r2, sp
 800d362:	ab01      	add	r3, sp, #4
 800d364:	f7ff ffc8 	bl	800d2f8 <__swhatbuf_r>
 800d368:	9900      	ldr	r1, [sp, #0]
 800d36a:	4605      	mov	r5, r0
 800d36c:	4630      	mov	r0, r6
 800d36e:	f7ff fa1d 	bl	800c7ac <_malloc_r>
 800d372:	b948      	cbnz	r0, 800d388 <__smakebuf_r+0x44>
 800d374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d378:	059a      	lsls	r2, r3, #22
 800d37a:	d4ef      	bmi.n	800d35c <__smakebuf_r+0x18>
 800d37c:	f023 0303 	bic.w	r3, r3, #3
 800d380:	f043 0302 	orr.w	r3, r3, #2
 800d384:	81a3      	strh	r3, [r4, #12]
 800d386:	e7e3      	b.n	800d350 <__smakebuf_r+0xc>
 800d388:	4b0d      	ldr	r3, [pc, #52]	; (800d3c0 <__smakebuf_r+0x7c>)
 800d38a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d38c:	89a3      	ldrh	r3, [r4, #12]
 800d38e:	6020      	str	r0, [r4, #0]
 800d390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d394:	81a3      	strh	r3, [r4, #12]
 800d396:	9b00      	ldr	r3, [sp, #0]
 800d398:	6120      	str	r0, [r4, #16]
 800d39a:	6163      	str	r3, [r4, #20]
 800d39c:	9b01      	ldr	r3, [sp, #4]
 800d39e:	b15b      	cbz	r3, 800d3b8 <__smakebuf_r+0x74>
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3a6:	f000 f8ad 	bl	800d504 <_isatty_r>
 800d3aa:	b128      	cbz	r0, 800d3b8 <__smakebuf_r+0x74>
 800d3ac:	89a3      	ldrh	r3, [r4, #12]
 800d3ae:	f023 0303 	bic.w	r3, r3, #3
 800d3b2:	f043 0301 	orr.w	r3, r3, #1
 800d3b6:	81a3      	strh	r3, [r4, #12]
 800d3b8:	89a0      	ldrh	r0, [r4, #12]
 800d3ba:	4305      	orrs	r5, r0
 800d3bc:	81a5      	strh	r5, [r4, #12]
 800d3be:	e7cd      	b.n	800d35c <__smakebuf_r+0x18>
 800d3c0:	0800bdb5 	.word	0x0800bdb5

0800d3c4 <__ascii_mbtowc>:
 800d3c4:	b082      	sub	sp, #8
 800d3c6:	b901      	cbnz	r1, 800d3ca <__ascii_mbtowc+0x6>
 800d3c8:	a901      	add	r1, sp, #4
 800d3ca:	b142      	cbz	r2, 800d3de <__ascii_mbtowc+0x1a>
 800d3cc:	b14b      	cbz	r3, 800d3e2 <__ascii_mbtowc+0x1e>
 800d3ce:	7813      	ldrb	r3, [r2, #0]
 800d3d0:	600b      	str	r3, [r1, #0]
 800d3d2:	7812      	ldrb	r2, [r2, #0]
 800d3d4:	1e10      	subs	r0, r2, #0
 800d3d6:	bf18      	it	ne
 800d3d8:	2001      	movne	r0, #1
 800d3da:	b002      	add	sp, #8
 800d3dc:	4770      	bx	lr
 800d3de:	4610      	mov	r0, r2
 800d3e0:	e7fb      	b.n	800d3da <__ascii_mbtowc+0x16>
 800d3e2:	f06f 0001 	mvn.w	r0, #1
 800d3e6:	e7f8      	b.n	800d3da <__ascii_mbtowc+0x16>

0800d3e8 <memmove>:
 800d3e8:	4288      	cmp	r0, r1
 800d3ea:	b510      	push	{r4, lr}
 800d3ec:	eb01 0402 	add.w	r4, r1, r2
 800d3f0:	d902      	bls.n	800d3f8 <memmove+0x10>
 800d3f2:	4284      	cmp	r4, r0
 800d3f4:	4623      	mov	r3, r4
 800d3f6:	d807      	bhi.n	800d408 <memmove+0x20>
 800d3f8:	1e43      	subs	r3, r0, #1
 800d3fa:	42a1      	cmp	r1, r4
 800d3fc:	d008      	beq.n	800d410 <memmove+0x28>
 800d3fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d402:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d406:	e7f8      	b.n	800d3fa <memmove+0x12>
 800d408:	4601      	mov	r1, r0
 800d40a:	4402      	add	r2, r0
 800d40c:	428a      	cmp	r2, r1
 800d40e:	d100      	bne.n	800d412 <memmove+0x2a>
 800d410:	bd10      	pop	{r4, pc}
 800d412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d41a:	e7f7      	b.n	800d40c <memmove+0x24>

0800d41c <__malloc_lock>:
 800d41c:	4801      	ldr	r0, [pc, #4]	; (800d424 <__malloc_lock+0x8>)
 800d41e:	f7fe bda0 	b.w	800bf62 <__retarget_lock_acquire_recursive>
 800d422:	bf00      	nop
 800d424:	20001605 	.word	0x20001605

0800d428 <__malloc_unlock>:
 800d428:	4801      	ldr	r0, [pc, #4]	; (800d430 <__malloc_unlock+0x8>)
 800d42a:	f7fe bd9b 	b.w	800bf64 <__retarget_lock_release_recursive>
 800d42e:	bf00      	nop
 800d430:	20001605 	.word	0x20001605

0800d434 <_realloc_r>:
 800d434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d438:	4680      	mov	r8, r0
 800d43a:	4614      	mov	r4, r2
 800d43c:	460e      	mov	r6, r1
 800d43e:	b921      	cbnz	r1, 800d44a <_realloc_r+0x16>
 800d440:	4611      	mov	r1, r2
 800d442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d446:	f7ff b9b1 	b.w	800c7ac <_malloc_r>
 800d44a:	b92a      	cbnz	r2, 800d458 <_realloc_r+0x24>
 800d44c:	f7ff f946 	bl	800c6dc <_free_r>
 800d450:	4625      	mov	r5, r4
 800d452:	4628      	mov	r0, r5
 800d454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d458:	f000 f864 	bl	800d524 <_malloc_usable_size_r>
 800d45c:	4284      	cmp	r4, r0
 800d45e:	4607      	mov	r7, r0
 800d460:	d802      	bhi.n	800d468 <_realloc_r+0x34>
 800d462:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d466:	d812      	bhi.n	800d48e <_realloc_r+0x5a>
 800d468:	4621      	mov	r1, r4
 800d46a:	4640      	mov	r0, r8
 800d46c:	f7ff f99e 	bl	800c7ac <_malloc_r>
 800d470:	4605      	mov	r5, r0
 800d472:	2800      	cmp	r0, #0
 800d474:	d0ed      	beq.n	800d452 <_realloc_r+0x1e>
 800d476:	42bc      	cmp	r4, r7
 800d478:	4622      	mov	r2, r4
 800d47a:	4631      	mov	r1, r6
 800d47c:	bf28      	it	cs
 800d47e:	463a      	movcs	r2, r7
 800d480:	f7fe fd88 	bl	800bf94 <memcpy>
 800d484:	4631      	mov	r1, r6
 800d486:	4640      	mov	r0, r8
 800d488:	f7ff f928 	bl	800c6dc <_free_r>
 800d48c:	e7e1      	b.n	800d452 <_realloc_r+0x1e>
 800d48e:	4635      	mov	r5, r6
 800d490:	e7df      	b.n	800d452 <_realloc_r+0x1e>
	...

0800d494 <_read_r>:
 800d494:	b538      	push	{r3, r4, r5, lr}
 800d496:	4604      	mov	r4, r0
 800d498:	4608      	mov	r0, r1
 800d49a:	4611      	mov	r1, r2
 800d49c:	2200      	movs	r2, #0
 800d49e:	4d05      	ldr	r5, [pc, #20]	; (800d4b4 <_read_r+0x20>)
 800d4a0:	602a      	str	r2, [r5, #0]
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	f7f4 fb4d 	bl	8001b42 <_read>
 800d4a8:	1c43      	adds	r3, r0, #1
 800d4aa:	d102      	bne.n	800d4b2 <_read_r+0x1e>
 800d4ac:	682b      	ldr	r3, [r5, #0]
 800d4ae:	b103      	cbz	r3, 800d4b2 <_read_r+0x1e>
 800d4b0:	6023      	str	r3, [r4, #0]
 800d4b2:	bd38      	pop	{r3, r4, r5, pc}
 800d4b4:	20001610 	.word	0x20001610

0800d4b8 <__ascii_wctomb>:
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	4608      	mov	r0, r1
 800d4bc:	b141      	cbz	r1, 800d4d0 <__ascii_wctomb+0x18>
 800d4be:	2aff      	cmp	r2, #255	; 0xff
 800d4c0:	d904      	bls.n	800d4cc <__ascii_wctomb+0x14>
 800d4c2:	228a      	movs	r2, #138	; 0x8a
 800d4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c8:	601a      	str	r2, [r3, #0]
 800d4ca:	4770      	bx	lr
 800d4cc:	2001      	movs	r0, #1
 800d4ce:	700a      	strb	r2, [r1, #0]
 800d4d0:	4770      	bx	lr

0800d4d2 <abort>:
 800d4d2:	2006      	movs	r0, #6
 800d4d4:	b508      	push	{r3, lr}
 800d4d6:	f000 f855 	bl	800d584 <raise>
 800d4da:	2001      	movs	r0, #1
 800d4dc:	f7f4 fb27 	bl	8001b2e <_exit>

0800d4e0 <_fstat_r>:
 800d4e0:	b538      	push	{r3, r4, r5, lr}
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	4d06      	ldr	r5, [pc, #24]	; (800d500 <_fstat_r+0x20>)
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	4608      	mov	r0, r1
 800d4ea:	4611      	mov	r1, r2
 800d4ec:	602b      	str	r3, [r5, #0]
 800d4ee:	f7f4 fb6c 	bl	8001bca <_fstat>
 800d4f2:	1c43      	adds	r3, r0, #1
 800d4f4:	d102      	bne.n	800d4fc <_fstat_r+0x1c>
 800d4f6:	682b      	ldr	r3, [r5, #0]
 800d4f8:	b103      	cbz	r3, 800d4fc <_fstat_r+0x1c>
 800d4fa:	6023      	str	r3, [r4, #0]
 800d4fc:	bd38      	pop	{r3, r4, r5, pc}
 800d4fe:	bf00      	nop
 800d500:	20001610 	.word	0x20001610

0800d504 <_isatty_r>:
 800d504:	b538      	push	{r3, r4, r5, lr}
 800d506:	2300      	movs	r3, #0
 800d508:	4d05      	ldr	r5, [pc, #20]	; (800d520 <_isatty_r+0x1c>)
 800d50a:	4604      	mov	r4, r0
 800d50c:	4608      	mov	r0, r1
 800d50e:	602b      	str	r3, [r5, #0]
 800d510:	f7f4 fb6a 	bl	8001be8 <_isatty>
 800d514:	1c43      	adds	r3, r0, #1
 800d516:	d102      	bne.n	800d51e <_isatty_r+0x1a>
 800d518:	682b      	ldr	r3, [r5, #0]
 800d51a:	b103      	cbz	r3, 800d51e <_isatty_r+0x1a>
 800d51c:	6023      	str	r3, [r4, #0]
 800d51e:	bd38      	pop	{r3, r4, r5, pc}
 800d520:	20001610 	.word	0x20001610

0800d524 <_malloc_usable_size_r>:
 800d524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d528:	1f18      	subs	r0, r3, #4
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	bfbc      	itt	lt
 800d52e:	580b      	ldrlt	r3, [r1, r0]
 800d530:	18c0      	addlt	r0, r0, r3
 800d532:	4770      	bx	lr

0800d534 <_raise_r>:
 800d534:	291f      	cmp	r1, #31
 800d536:	b538      	push	{r3, r4, r5, lr}
 800d538:	4604      	mov	r4, r0
 800d53a:	460d      	mov	r5, r1
 800d53c:	d904      	bls.n	800d548 <_raise_r+0x14>
 800d53e:	2316      	movs	r3, #22
 800d540:	6003      	str	r3, [r0, #0]
 800d542:	f04f 30ff 	mov.w	r0, #4294967295
 800d546:	bd38      	pop	{r3, r4, r5, pc}
 800d548:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d54a:	b112      	cbz	r2, 800d552 <_raise_r+0x1e>
 800d54c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d550:	b94b      	cbnz	r3, 800d566 <_raise_r+0x32>
 800d552:	4620      	mov	r0, r4
 800d554:	f000 f830 	bl	800d5b8 <_getpid_r>
 800d558:	462a      	mov	r2, r5
 800d55a:	4601      	mov	r1, r0
 800d55c:	4620      	mov	r0, r4
 800d55e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d562:	f000 b817 	b.w	800d594 <_kill_r>
 800d566:	2b01      	cmp	r3, #1
 800d568:	d00a      	beq.n	800d580 <_raise_r+0x4c>
 800d56a:	1c59      	adds	r1, r3, #1
 800d56c:	d103      	bne.n	800d576 <_raise_r+0x42>
 800d56e:	2316      	movs	r3, #22
 800d570:	6003      	str	r3, [r0, #0]
 800d572:	2001      	movs	r0, #1
 800d574:	e7e7      	b.n	800d546 <_raise_r+0x12>
 800d576:	2400      	movs	r4, #0
 800d578:	4628      	mov	r0, r5
 800d57a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d57e:	4798      	blx	r3
 800d580:	2000      	movs	r0, #0
 800d582:	e7e0      	b.n	800d546 <_raise_r+0x12>

0800d584 <raise>:
 800d584:	4b02      	ldr	r3, [pc, #8]	; (800d590 <raise+0xc>)
 800d586:	4601      	mov	r1, r0
 800d588:	6818      	ldr	r0, [r3, #0]
 800d58a:	f7ff bfd3 	b.w	800d534 <_raise_r>
 800d58e:	bf00      	nop
 800d590:	20000180 	.word	0x20000180

0800d594 <_kill_r>:
 800d594:	b538      	push	{r3, r4, r5, lr}
 800d596:	2300      	movs	r3, #0
 800d598:	4d06      	ldr	r5, [pc, #24]	; (800d5b4 <_kill_r+0x20>)
 800d59a:	4604      	mov	r4, r0
 800d59c:	4608      	mov	r0, r1
 800d59e:	4611      	mov	r1, r2
 800d5a0:	602b      	str	r3, [r5, #0]
 800d5a2:	f7f4 fab4 	bl	8001b0e <_kill>
 800d5a6:	1c43      	adds	r3, r0, #1
 800d5a8:	d102      	bne.n	800d5b0 <_kill_r+0x1c>
 800d5aa:	682b      	ldr	r3, [r5, #0]
 800d5ac:	b103      	cbz	r3, 800d5b0 <_kill_r+0x1c>
 800d5ae:	6023      	str	r3, [r4, #0]
 800d5b0:	bd38      	pop	{r3, r4, r5, pc}
 800d5b2:	bf00      	nop
 800d5b4:	20001610 	.word	0x20001610

0800d5b8 <_getpid_r>:
 800d5b8:	f7f4 baa2 	b.w	8001b00 <_getpid>

0800d5bc <_init>:
 800d5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5be:	bf00      	nop
 800d5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5c2:	bc08      	pop	{r3}
 800d5c4:	469e      	mov	lr, r3
 800d5c6:	4770      	bx	lr

0800d5c8 <_fini>:
 800d5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ca:	bf00      	nop
 800d5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ce:	bc08      	pop	{r3}
 800d5d0:	469e      	mov	lr, r3
 800d5d2:	4770      	bx	lr
